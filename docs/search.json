[
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "",
    "section": "",
    "text": "Post With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\ndata visualization\n\n\n\n\n\n\n\n\n\n\n\n1699566339000\n\n\nMartin Laptev\n\n\n\n\n\n\n  \n\n\n\n\nMy blog\n\n\n\n\n\n\n\ndecüóìÔ∏èüïì\n\n\nquarto\n\n\n\n\n\n\n\n\n\n\n\n1699566339000\n\n\nMartin Laptev\n\n\n\n\n\n\n  \n\n\n\n\nBrand New Post\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\ndata visualization\n\n\n\n\n\n\n\n\n\n\n\n1699566339000\n\n\nMartin Laptev\n\n\n\n\n\n\nNo matching items\n\n Back to top"
  },
  {
    "objectID": "posts/introduction/index.html",
    "href": "posts/introduction/index.html",
    "title": "My blog",
    "section": "",
    "text": "This is the first post in the blog of Martin Laptev. Welcome!\nI created my blog using the Quarto, which is the bee‚Äôsüêùknees. Quarto is a publishing system that makes it easy to create pretty much any kind of publication including articles, books, blogs, dashboards, presentations, reports, and websites.\n\n\n\n\n\nQuarto\n\n\nPromoting the use of Quarto is one of the goals of my blog. Therefore, many of posts will provide some information on how I accomplished specific tasks with Quarto.\n\n\n\n\n\nJavaScript\n\n\n\n\n\n\nPython\n\n\n\n\n\n\nLua\n\n\n\n\nFor example, I used JavaScript to add a custom timestamp to the navigation bar (navbar), Python to customize the date format in the my blog‚Äôs listing page, and Lua to customize the date format in every blog post.\nJavaScript, Python, and Lua are programming languages that have all have interesting name origins. JavaScript is named after the Java‚òïprogramming language, Pythonüêçis named after the Monty Python comedy troupe, and Lua is the Portugueseüáµüáπword for moonüåï.\nTo create the navbar timestamp, I put &lt;script&gt; tag that sources time.js in an HTML block in every Quarto markdown (.qmd) file. Mine √áetinkaya-Rundel wrote about HTML blocks as part of her A Quarto tip a day project. Essentially, HTML blocks protect raw HTML from being processed by Pandoc.\nPandoc is a program that converts documents into practically any format. The pan in Pandoc comes from the Ancient Greek word for all. Pandoc strives to convert all document formats, just like Pangea contained all the land and a panacea solves all problems.\nQuarto uses Pandoc to convert markdown files into target format(s) like html or pdf. If the source files contain executable code, Quarto executes the code via Jupyter or Knitr. Figure¬†1 is a mermaid.js diagram of the Quarto workflow. Mine √áetinkaya-Rundel‚Äôs Quarto tip series includes a similar Quarto workflow mermaid diagram and her ‚ÄúHello, Quarto!‚Äù keynote with julia stewart lowndes at rstudio::conf(2022) contains truly beautiful Quarto workflow images by Allison Horst: 1, 2, 3, and 4.\n\n\n\n\n\nflowchart LR\n    A[qmd&lt;br/&gt;ipynb]-.Knitr&lt;br/&gt;Jupyter.-&gt;B((md))-.Pandoc with&lt;br/&gt;Lua filters.-&gt;C(html&lt;br/&gt;pdf&lt;br/&gt;docx&lt;br/&gt;etc.)\n\n\nFigure¬†1: Quarto workflow\n\n\n\n\nQuarto controls Pandoc, Jupyter, and Knitr in two ways: 1) with arguments passed to the Quarto CLI commands and 2) with YAML key-value pairs in .qmd, .ipynb, or .yml files.\nNormally, formatting dates in Quarto is as easy as setting the date-format YAML property. In my case it was more difficult, because I wanted dates based on Dec, a calendar and time system I created, instead of the ubiquitous Gregorian calendar.\n\n\n\n\n\nDec\n\n\nI set date-format to x, which formats dates in millisecond UNIX time. It wanted to obtain Dec calendar (Decalendar) dates from UNIX time, so that I could start with a single number and not have to deal with time zones or Gregorian calendar date formats.\nTo customize dates in my blog, I set the date, date-format, and filters YAML properties as shown in Example¬†1.\n\nExample 1 ¬†\n\n\n*.qmd_quarto.yml_metadata.ymltime.jsdate.pydate.lua\n\n\n```{=html}\n&lt;script src=\"time.js\"&gt;&lt;/script&gt;\n```\n\n\nproject:\n  type: website\n  output-dir: docs\n  post-render: date.py\n\n\ndate: now\ndate-format: x\nfilters: date.lua\n\n\n// https://howardhinnant.github.io/date_algorithms.html#days_from_civil\nfunction dote2doty(days = 719468) {\n    const era = Math.floor((days &gt;= 0 ? days : days - 146096) / 146097),\n        dotc = days - era * 146097,\n        yotc = Math.floor((dotc - Math.floor(dotc / 1460)\n        + Math.floor(dotc / 36524) - Math.floor(dotc / 146096)) / 365);\n    return [yotc + era * 400, dotc + Math.floor(yotc / 100)\n        - yotc * 365 - Math.floor(yotc / 4)];\n};\nfunction unix2doty(ms = 0) { return dote2doty(ms / 86400000 + 719468) };\nfunction doty2deco(year = 1969, doty = 306, zone = 0) {\n    [date, time] = doty.toString().split(\".\")\n    return `${year}+${date.toString().padStart(3, \"0\")}.${\n    time.toString().slice(0, 5).padStart(5, \"0\")}`;\n};\nfunction unix2deco(ms = 0) { return doty2deco(...unix2doty(ms)) };\nconst nbc = document.getElementsByClassName(\"navbar-brand-container\");\nconst div = document.createElement(\"div\");\nconst cal = document.createElement(\"i\");\ncal.classList.add(\"bi\", \"bi-calendar\");\ncal.setAttribute(\"role\", \"img\");\nconst tik = document.createElement(\"i\");\ntik.classList.add(\"bi\", \"bi-clock\");\ntik.setAttribute(\"role\", \"img\");\ndiv.setAttribute(\"id\", \"deco\");\nnbc[0].appendChild(cal);\nnbc[0].appendChild(div);\nnbc[0].appendChild(tik);\nsetInterval(() =&gt; document.getElementById(\"deco\").innerText =\n  unix2deco(Date.now()).slice(0, 14), 8.64);\n\n\nimport bs4\n\ndef unix2doty(ms=0):\n    days = ms / 86400000 + 719468\n    dote = days - (era := (days if days &gt;= 0 else days - 146096) // 146097) * 146097\n    year = int((dote - dote / 1460 + dote / 36524 - dote / 146096) // 365 + era * 400)\n    return year, days - (year * 365 + year / 4 - year / 100 + year / 400).__floor__()\n\nwith open(\"docs/posts.html\") as infile:\n    txt = infile.read()\n    soup = bs4.BeautifulSoup(txt, features=\"html.parser\")\nfor div in soup.find_all(\"div\", {\"class\": \"listing-date\"}):\n    if \"+\" not in div.text:\n        y, d = unix2doty(int(div.text))\n        div.string.replace_with(f\"{y:&gt;04}+{d.__floor__():&gt;03}\")\n\nwith open(\"docs/posts.html\", \"w\") as outfile:\n    outfile.write(str(soup))\n\n\nlocal function unix2deco(ms)\n    local days = ms / 86400000 + 719468\n    local era = (days &gt;= 0 and days or days - 146096) // 146097\n    local doe = days - era * 146097\n    local year = math.floor((doe - doe / 1460 + doe / 36524 - doe / 146096) / 365) + era * 400\n    local doty = days - math.floor(year * 365 + year / 4 - year / 100 + year / 400)\n    return string.format(\"%s+%s\", math.floor(year), math.floor(doty))\nend\n\nlocal function to_decalendar(date)\n  local date = pandoc.utils.stringify(date)\n  local unix = date:match(\"(%d+)\")\n  return date:gsub(unix, unix2deco(unix))\nend\n\nfunction Meta(m)\n  m.date = to_decalendar(m.date)\n  return m\nend\n\n\n\nI only need this script to run for the posts The date.lua script is an example of a Pandoc filter.\nThat converts the date in this blog post from UNIX time to a Dec calendar (Decalendar) date. Dec is a decimal calendar and time standard that I created.\nTo make the blog listing page and in every blog post it contains, I dates\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "The plot below is from the Seaborn Python library documentation:\n\n5 blog posts, not 3\nTopics are pre-defined:\n\nProbability theory and random variables\n\n\nHistogram\n\n\nClustering\n\n\nDBSCAN labels for scatter plot\n\n\nLinear and nonlinear regression\n\n\nline on scatter plot\n\n\nClassification\n\n\nROC, PR, Confusion Matrix\n\n\nAnomaly/outlier detection\n\n\nDBSCAN labels for scatter plot\n\n\nLearning objectives: 1. Use various techniques related to preprocessing prior to the use of machine learning models. 2. Describe the probability theory and random variables. 3. Identify the common tasks in machine learning/data mining models for clustering. 4. Analyze multiple linear and nonlinear regression. 5. Describe the algorithms, theories, and applications related to machine learning/data mining for classification. 6. Detect anomaly/outlier behavior and the treatment techniques.\n\n\nCode\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set_theme(style=\"ticks\")\n\n# Initialize the figure with a logarithmic x axis\nf, ax = plt.subplots(figsize=(7, 6))\nax.set_xscale(\"log\")\n\n# Load the example planets dataset\nplanets = sns.load_dataset(\"planets\")\n\n# Plot the orbital period with horizontal boxes\nsns.boxplot(\n    planets, x=\"distance\", y=\"method\", hue=\"method\",\n    whis=[0, 100], width=.6, palette=\"vlag\"\n)\n\n# Add in points to show each observation\nsns.stripplot(planets, x=\"distance\", y=\"method\", size=4, color=\".3\")\n\n# Tweak the visual presentation\nax.xaxis.grid(True)\nax.set(ylabel=\"\")\nsns.despine(trim=True, left=True)\n\n\n\n\n\nThe plot below is from the Yellowbrick Python library documentation:\n\n\nCode\nfrom yellowbrick.datasets import load_concrete\nfrom yellowbrick.features import JointPlotVisualizer\n\n# Load the dataset\nX, y = load_concrete()\n\n# Instantiate the visualizer\nvisualizer = JointPlotVisualizer(columns=\"cement\")\n\nvisualizer.fit_transform(X, y)        # Fit and transform the data\nvisualizer.show()                     # Finalize and render the figure\n\n\n\n\n\n&lt;Axes: xlabel='cement', ylabel='target'&gt;\n\n\nThe example below shows tuning of the regularization strength \\(\\alpha\\).  \nThis is a change to the markdown text.\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "posts/brand-new-post/index.html",
    "href": "posts/brand-new-post/index.html",
    "title": "brand-new-post",
    "section": "",
    "text": "Here is a new blog post with R and Python code.\n\nCode```{r}\n0:8\n```\n\n[1] 0 1 2 3 4 5 6 7 8\n\n\n\nCode```{python}\nlist(range(9))\n```\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8]\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Martin Laptev",
    "section": "",
    "text": "My name is Martin Laptev.\nI am a data scientist and software engineer with a broad scientific background that ranges from biochemistry to epidemiology. I use the JavaScript, Python, and R programming languages along with the UNIX shell to build useful things like cloud‚òÅÔ∏èinfrastructure, dataüìävisualizations, machineü§ñlearningüß†models, and webüï∏sites.\nI created a calendar and timekeeping system called Dec. I write about Dec and many other topics on my blog.\nMy professional information is summarized in my R√©sum√© / Curriculum Vitae."
  },
  {
    "objectID": "index.html#greetings",
    "href": "index.html#greetings",
    "title": "Martin Laptev",
    "section": "",
    "text": "My name is Martin Laptev.\nI am a data scientist and software engineer with a broad scientific background that ranges from biochemistry to epidemiology. I use the JavaScript, Python, and R programming languages along with the UNIX shell to build useful things like cloud‚òÅÔ∏èinfrastructure, dataüìävisualizations, machineü§ñlearningüß†models, and webüï∏sites.\nI created a calendar and timekeeping system called Dec. I write about Dec and many other topics on my blog.\nMy professional information is summarized in my R√©sum√© / Curriculum Vitae."
  },
  {
    "objectID": "posts/intro/index.html",
    "href": "posts/intro/index.html",
    "title": "My blog",
    "section": "",
    "text": "This is the first post in the blog of Martin Laptev. Welcome!\nI created my blog using the Quarto, which is the bee‚Äôsüêùknees. Quarto is a publishing system that makes it easy to create pretty much any kind of publication including articles, books, blogs, dashboards, presentations, reports, and websites.\n\n\n\n\n\nQuarto\n\n\nPromoting the use of Quarto is one of the goals of my blog. Therefore, many of posts will provide some information on how I accomplished specific tasks with Quarto.\n\n\n\n\n\nJavaScript\n\n\n\n\n\n\nPython\n\n\n\n\n\n\nLua\n\n\n\n\nFor example, I used JavaScript to add a custom timestamp to the navigation bar (navbar), Python to customize the date format in the my blog‚Äôs listing page, and Lua to customize the date format in every blog post.\nJavaScript, Python, and Lua are programming languages that have all have interesting name origins. JavaScript is named after the Java‚òïprogramming language, Pythonüêçis named after the Monty Python comedy troupe, and Lua is the Portugueseüáµüáπword for moonüåï.\nTo create the navbar timestamp, I put a &lt;script&gt; tag that sources time.js in an HTML block in every Quarto markdown (.qmd) file, as shown in Example¬†1. Mine √áetinkaya-Rundel wrote about HTML blocks as part of her A Quarto tip a day project. Essentially, HTML blocks protect raw HTML from being processed by Pandoc.\nPandoc is a program that converts documents into practically any format. The pan in Pandoc comes from the Ancient Greek word for all. Pandoc strives to convert all document formats, just like Pangea contained all the land and a panacea solves all problems.\nQuarto uses Pandoc to convert markdown files into target format(s) like html or pdf. If the source files contain executable code, Quarto executes the code via one of two computational engines: Jupyter or Knitr. Figure¬†1 is a mermaid.js diagram of the Quarto workflow.\n\n\n\n\n\nJupyter\n\n\n\n\n\n\nKnitr\n\n\n\n\n\n\n\n\nflowchart LR\n    A[qmd&lt;br/&gt;ipynb]-.Knitr&lt;br/&gt;Jupyter.-&gt;B((md))-.Pandoc with&lt;br/&gt;Lua filters.-&gt;C(html&lt;br/&gt;pdf&lt;br/&gt;docx&lt;br/&gt;etc.)\n\n\nFigure¬†1: Quarto workflow\n\n\n\n\nMine √áetinkaya-Rundel‚Äôs Quarto tip series includes a similar Quarto workflow mermaid diagram and her ‚ÄúHello, Quarto!‚Äù rstudio::conf(2022) keynote with Julia Stewart Lowndes contains truly beautiful Quarto workflow images by Allison Horst: 1, 2, 3, and 4.\nQuarto controls Pandoc, Jupyter, and Knitr in two ways: 1) with arguments passed to the Quarto CLI commands and 2) with YAML key-value pairs in .qmd, .ipynb, or .yml files.\nNormally, formatting dates in Quarto is as easy as setting the date-format YAML property. In my case it was more difficult, because I wanted dates based on Dec, a calendar and time system I created, instead of the ubiquitous Gregorian calendar.\n\n\n\n\n\nDec\n\n\nI set date-format to x in _metadata.yml, which converts the date of each blog post to millisecond UNIX time. I wanted to calculate the Dec calendar (Decalendar) dates from UNIX time, so that I could work with a single number and not have to deal with Gregorian calendar date formats or time zones.\nThe Decalendar dates in my blog are called Decalendar ordinal (deco) dates, because they are similar to ISO-8601 ordinal (isoo) dates. Like isoo dates, deco dates consist of a year and a day-of-the-year (doty).\nDoty values (doties) in Decalendar dates count the number of days that have passed since March 1, which is Day 0 in Decalendar, and can optionally include a Dec clock (Declock) time. The timestamp in the navbar of my blog is an example of a Decalendar date combined with a Declock time.\nThe navbar timestamp is also derived from millisecond UNIX time, which I obtained in time.js by calling Date.now(). In essence, all three of the scripts in Example¬†1 convert millisecond UNIX time into a deco date or timestamp.\nWhile time.js is sourced by Quarto when it reads the HTML block in all of my blog .qmd files, date.lua is run as a Pandoc filter during the creation of the output .html files, and date.py is executed as a post-render script. Example¬†1 speaks to the power and versatility of Quarto.\n\nExample 1 ¬†\n\n\n*.qmd_metadata.yml_quarto.ymltime.jsdate.pydate.lua\n\n\n```{=html}\n&lt;script src=\"time.js\"&gt;&lt;/script&gt;\n```\n\n\ndate: now\ndate-format: x\nfilters: date.lua\n\n\nproject:\n  type: website\n  output-dir: docs\n  post-render: date.py\n\n\n// https://howardhinnant.github.io/date_algorithms.html#days_from_civil\nfunction dote2doty(days = 719468) {\n    const era = Math.floor((days &gt;= 0 ? days : days - 146096) / 146097),\n        dotc = days - era * 146097,\n        yotc = Math.floor((dotc - Math.floor(dotc / 1460)\n        + Math.floor(dotc / 36524) - Math.floor(dotc / 146096)) / 365);\n    return [yotc + era * 400, dotc + Math.floor(yotc / 100)\n        - yotc * 365 - Math.floor(yotc / 4)];\n};\nfunction unix2doty(ms = 0) { return dote2doty(ms / 86400000 + 719468) };\nfunction doty2deco(year = 1969, doty = 306, zone = 0) {\n    [date, time] = doty.toString().split(\".\")\n    return `${year}+${date.toString().padStart(3, \"0\")}.${\n    time.toString().slice(0, 5).padStart(5, \"0\")}`;\n};\nfunction unix2deco(ms = 0) { return doty2deco(...unix2doty(ms)) };\nconst nbc = document.getElementsByClassName(\"navbar-brand-container\");\nconst div = document.createElement(\"div\");\nconst cal = document.createElement(\"i\");\ncal.classList.add(\"bi\", \"bi-calendar\");\ncal.setAttribute(\"role\", \"img\");\nconst tik = document.createElement(\"i\");\ntik.classList.add(\"bi\", \"bi-clock\");\ntik.setAttribute(\"role\", \"img\");\ndiv.setAttribute(\"id\", \"deco\");\nnbc[0].appendChild(cal);\nnbc[0].appendChild(div);\nnbc[0].appendChild(tik);\nsetInterval(() =&gt; document.getElementById(\"deco\").innerText =\n  unix2deco(Date.now()).slice(0, 14), 8.64);\n\n\nimport bs4\n\ndef unix2doty(ms=0):\n    days = ms / 86400000 + 719468\n    dote = days - (era := (days if days &gt;= 0 else days - 146096) // 146097) * 146097\n    year = int((dote - dote / 1460 + dote / 36524 - dote / 146096) // 365 + era * 400)\n    return year, days - (year * 365 + year / 4 - year / 100 + year / 400).__floor__()\n\nwith open(\"docs/posts.html\") as infile:\n    txt = infile.read()\n    soup = bs4.BeautifulSoup(txt, features=\"html.parser\")\nfor div in soup.find_all(\"div\", {\"class\": \"listing-date\"}):\n    if \"+\" not in div.text:\n        y, d = unix2doty(int(div.text))\n        div.string.replace_with(f\"{y:&gt;04}+{d.__floor__():&gt;03}\")\n\nwith open(\"docs/posts.html\", \"w\") as outfile:\n    outfile.write(str(soup))\n\n\nlocal function unix2deco(ms)\n    local days = ms / 86400000 + 719468\n    local era = (days &gt;= 0 and days or days - 146096) // 146097\n    local doe = days - era * 146097\n    local year = math.floor((doe - doe / 1460 + doe / 36524 - doe / 146096) / 365) + era * 400\n    local doty = days - math.floor(year * 365 + year / 4 - year / 100 + year / 400)\n    return string.format(\"%s+%s\", math.floor(year), math.floor(doty))\nend\n\nlocal function to_decalendar(date)\n  local date = pandoc.utils.stringify(date)\n  local unix = date:match(\"(%d+)\")\n  return date:gsub(unix, unix2deco(unix))\nend\n\nfunction Meta(m)\n  m.date = to_decalendar(m.date)\n  return m\nend\n\n\n\n\n\n\n\n\n\n\n Back to top"
  }
]