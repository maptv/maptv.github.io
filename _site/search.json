[
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "",
    "section": "",
    "text": "Quarto\n\n\n\ndecüóìÔ∏èüïì\n\n\nquarto\n\n\nweb dev\n\n\n\n\n\n\n\nMartin Laptev\n\n\n1700271075000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservable\n\n\n\ndecüóìÔ∏èüïì\n\n\nobservable\n\n\nquarto\n\n\n\n\n\n\n\nMartin Laptev\n\n\n1700271075000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJupyter\n\n\n\ndecüóìÔ∏èüïì\n\n\nknitr\n\n\njupyter\n\n\nquarto\n\n\n\n\n\n\n\nMartin Laptev\n\n\n1700271075000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKnitr\n\n\n\ndecüóìÔ∏èüïì\n\n\nknitr\n\n\nquarto\n\n\n\n\n\n\n\nMartin Laptev\n\n\n1700271075000\n\n\n\n\n\n\n\n\nNo matching items\n\n Back to topAttributions\n\nArtwork by @allison_horst",
    "crumbs": [
      "Blog"
    ]
  },
  {
    "objectID": "blog/quarto/index.html",
    "href": "blog/quarto/index.html",
    "title": "Quarto",
    "section": "",
    "text": "Quarto is an open-source software system for turning plain-text source files into outputs like articles, books, blogs, dashboards, presentations, reports, and websites. Announced on 2022+149 by Posit CEO JJ Allaire, Quarto is already taking the worldüåêby storm‚õàÔ∏è!\nI strongly believe that everyone, regardless of their background and current technical skill level, can learn and benefit from Quarto. Getting start with Quarto is easy thanks to its excellent documentation and vibrant community of enthusiastic users and developers.\nRather than repeat the basic information already available elsewhere, I will share some advanced techniques along with the fundamental knowledge needed to understand how they work. The topics I cover are very technical, but my goal is to make the content on my blog as accessible as possible.\nThe first topic I will delve into is creating and publishing a website with Quarto. To follow the Quarto documentation on creating a website, you will need Visual Studio Code (VSCode), VSCodium, RStudio, or a terminal.",
    "crumbs": [
      "Blog",
      "Quarto"
    ]
  },
  {
    "objectID": "blog/quarto/index.html#sec-inst",
    "href": "blog/quarto/index.html#sec-inst",
    "title": "Quarto",
    "section": "Installing necessary tools",
    "text": "Installing necessary tools\nIf you use macOS, Linux, or the Windows Subsystem for Linux (WSL), you can install all of the aforementioned tools with the Homebrew package manager. To install everything you will need to follow along with this blog post, you can first install Homebrew and then run brew bundle in a directory that contains the Brewfile shown in Example¬†1.\n\nExample 1 ¬†\n\n\nBrewfile\n\nbrew \"gh\"\nbrew \"git\"\nbrew \"glab\"\ncask \"github\"\ncask \"quarto\"\ncask \"rstudio\"\ncask \"vscodium\"\ncask \"visual-studio-code\"\nvscode \"quarto.quarto\"\nvscode \"REditorSupport.r\"\n\n\nUsing a package manager like Homebrew to install all the requirements with a single shell command like brew bundle is the fastest and easiest way to get ready to follow along with this blog post. If you are curious about how I set up my computer, you can take a look at my Brewfile and other configuration files in my setup repository (repo) on GitHub and GitHub.\nApart from RStudio, VSCode, and VSCodium, the Brewfile in Example¬†1 will install the Git version control system, the GitHub and GitLab command line interfaces (CLIs), and GitHub Desktop, a Git Graphical User Interface (GUI). For more information on Git, a tool used by 93% of software developers worldwide, according to survey results published by StackOverflow on 2022+314, take a look at the ‚ÄúGitHub for supporting, reusing, contributing, and failing safely‚Äù post by Allison Horst and Julie Lowndes on the Openscapes blog. If you are just getting started with Git, I suggest using a standalone Git GUI rather trying to use",
    "crumbs": [
      "Blog",
      "Quarto"
    ]
  },
  {
    "objectID": "blog/quarto/index.html#sec-meth",
    "href": "blog/quarto/index.html#sec-meth",
    "title": "Quarto",
    "section": "Publishing method overview",
    "text": "Publishing method overview\nOnce you are done setting up your computer and creating the Quarto website template, you can make your site publicly available on the internet using one of the many available publishing services. To explore and assess different publishing workflows and free website hosting options, I set up my personal website on four different web hosts: Quarto Pub, Netlify, GitHub Pages, and GitLab Pages.\nTable¬†1 uses a Code derived from numbered lists in the Quarto publishing documentation to identify different approaches to publishing that I discuss in this blog post. The publishing methods in Table¬†1 each target a particular web Host, Render content locally or on a remote server, and deploy sites using either the quarto publish or the git push shell Command.\n\n\n\n\n\n\nCode\nHost\nRender\nCommand\n\n\n\n\nQ1\nQuarto\nLocal\npublish\n\n\nQ2\nQuarto\nRemote\npush\n\n\nN1\nNetlify\nLocal\npublish\n\n\nN2\nNetlify\nLocal\npush\n\n\nN3\nNetlify\nRemote\npush\n\n\nG1\nGitHub\nLocal\npush\n\n\nG2\nGitHub\nLocal\npublish\n\n\nG3\nGitHub\nRemote\npush\n\n\n\n\n\nTable¬†1: Quarto website publishing methods\n\n\n\nQ1, N1, and G2 all use quarto publish to render website content locally and then deploy it in one fell swoop. If you do not plan to use the Git version control system or the advanced features offered by GitHub, GitLab, or Netlify, then I recommend deploying your site to Quarto Pub by running quarto publish quarto-pub (Q1 in Table¬†1).\nLike Q1, N1 is a deployment method that does not require Git and makes it possible to deploy our site with a single shell command: quarto publish netlify. N1 provides access to the advanced web hosting features offered by Netlify and can even render content as long as code execution is frozen.\nThe first publishing method I tried for my personal site was G1, which requires the use of Git to push all website content to a Git provider like GitHub or GitLab. After I set up GitHub Pages and GitLab Pages, I could update my website on both of these web hosts just by going through the standard Git workflow shown in Figure¬†1.\n\n\n\n\n\n\nflowchart LR\n   A[working&lt;br/&gt;directory]-.git&lt;br/&gt;add.-&gt;B[/staging&lt;br/&gt;area/]-.git&lt;br/&gt;commit.-&gt;C(local&lt;br/&gt;repo)-.git&lt;br/&gt;push.-&gt;D(remote&lt;br/&gt;repo)\n\n\n\n\nFigure¬†1: Quarto workflow\n\n\n\n\n\nG1 is convenient for experienced Git users like me, but leads to messy commits that contain changes to both source and output files. To address this issue, I switched to G2 by adding the quarto publish to my publishing workflow. With G2, I can track changes to my source files on my main branch and publish my output files to GitHub Pages and GitLab Pages from my gh-pages branch.\nTo deploy my site to GitHub Pages, GitLab Pages, and Netlify, I combined G2 with N2. Now when I run quarto publish gh-pages, Quarto renders my site into my output directory, copies the output directory contents to the gh-pages branch of my local repo, and then commits and pushes the changes to my remote repos on GitHub and GitLab, which triggers Netlify to build my site from the gh-pages branch.\nThe only disadvantage of G2 is that there are many commands to run, because running quarto publish gh-pages only updates the output files on my gh-pages and I still have run the git shell commands shown in Figure¬†1 to update the source files on my main branch. To make it easier to make incremental changes to my website and frequently release new content, I combined all of the G2 shell commands into a shell alias like the one shown in Example¬†2.\n\nExample 2 ¬†\nalias qp='(\nquarto publish --no-prompt gh-pages;\ngit add --all;\ngit commit -m 'Edit source files';\ngit push;\n)'\n\nYou can add shell aliases to a shell configuration file like .bashrc or .zshrc on your computer to shorten commands or combine any sequence of commands into one step. The qp alias in the .zshrc file in my setup repo is much more sophisticated than the alias in Example¬†2, because it allows me to enter a free-form commit message directly on the command line without quotes, e.g.¬†qp edit first blog.\nIf you decide to try my qp alias, please exercise extreme caution as any un-escaped or un-quoted metacharacters may yield surprising effects instead of being included verbatim in the commit message. For example, qp * will list the contents of the current directory in the commit message in place of the asterisk!\nTo summarize the Quarto publishing methods I discussed so far, Q1 and N1 are easy to configure and use, N2 automatically builds sites from Git repos, G1 is not recommended because it pollutes commits with output file changes, and G2 is more difficult to set up and use but provides clean commits and a nice separation of source and output files. All of these publishing methods require us to generate output files locally by rendering our source files.\nIn contrast, Q2, G3, and N3 require the most configuration but make it possible to skip local rendering in favor of relying on GitHub Actions to handle all of the necessary steps. Before trying to use GitHub Actions or any other continuous integration systems in your publishing workflow, I suggest getting used to working with quarto publish.\nIn Section¬†1.3, I will walk through the setup of both G2 and G3 to provide the option of rendering locally by running quarto publish or rendering remotely with GitHub Actions by pushing to the main branch. Along the way, I will share many practical tips for working with Quarto and general advice that you can apply to any project.",
    "crumbs": [
      "Blog",
      "Quarto"
    ]
  },
  {
    "objectID": "blog/quarto/index.html#sec-ghp",
    "href": "blog/quarto/index.html#sec-ghp",
    "title": "Quarto",
    "section": "GitHub Pages setup",
    "text": "GitHub Pages setup\nBefore you can publish your site on GitHub or GitLab Pages, you need a GitHub or GitLab account, an SSH key, and a repo like my maptv.github.io and maptv.gitlab.io repos. Each of these repos has a default branch called main and another branch which must be called gh-pages.\nYou can create the repo and the gh-pages branch using the web interface of https://github.com or https://gitlab.com in your browser, but the best way to start a new project is using the CLI for GitHub or GitLab in your terminal. First, run gh auth login or glab auth login and follow the prompts to authenticate via your web browser or with an authentication token.\nThe GitHub CLI allows you to add an SSH key to your account during or after authentication. The GitLab CLI does not handle SSH keys during authentication, but has a similar command for adding an SSH key to your GitLab account.\nAfter authentication and SSH key setup, you can run the code in either of the code chunks in Example¬†3 to set up your local and remote repos and create a Quarto website project in the local repo. You can create shell alias that combine all of the repo creation steps like I did in my .zshrc.\n\nExample 3 ¬†\ncd # start in home directory\nmkdir -p USERNAME\ncd USERNAME\ngh repo create USERNAME.github.io --add-readme --clone --public\ncd SITENAME\nquarto create project website USERNAME.github.io\ncd # start in home directory\nmkdir -p USERNAME\ncd USERNAME\nglab repo create USERNAME.gitlab.io --readme --defaultBranch main --public\ncd SITENAME\ngit pull origin main\ngit branch --set-upstream-to=origin/main main\nquarto create project website USERNAME.gitlab.io\n\nIf you want to have your website hosted on GitHub Pages, you will need set gh-pages as your source branch. For GitLab Pages, you will need to add a .gitlab-ci.yml file to your repo and update your _quarto.yml file as shown in Example¬†4.\n\nExample 4 ¬†\n# https://docs.gitlab.com/ee/user/project/pages/introduction.html#customize-the-default-folder\npages:\n  script: echo \"The site will be deployed to $CI_PAGES_URL\"\n  artifacts:\n    paths:\n      - \".\"\n  publish: \".\"\n  only:\n    - gh-pages\nproject:\n  type: website\n  resources: .gitlab-ci.yml\n\nTo make it easier to maintain my site on both GitHub and GitLab Pages, I set up my local repo cloned to have two origin remote URLs using the code as shown in Example¬†5. Now, running quarto publish or git push in my local repo, updates my content on both GitHub and GitLab.\n\nExample 5 ¬†\ngit remote add lab git@gitlab.com:maptv/maptv.gitlab.io\ngit remote add hub git@github.com:maptv/maptv.github.io\ngit remote set-url --add origin $(git remote get-url lab)\n\nBy default, GitLab Pages includes a random hash in site URLs. To shorten the URL of my GitLab Pages site to &lt;maptv.gitlab.io&gt;, I had to uncheck Use unique domain under Deploy &gt; Pages in the GitLab sidebar.\nAt this point, we have completed G2 setup and you should be able to run quarto publish gh-pages from your main branch to render your site and deploy it to GitHub and/or GitLab Pages. If you are curious to learn about GitHub Actions and G3 setup, you can continue to follow along, but otherwise feel free to skip down to Section¬†2 to learn about customizing your Quarto site instead.\nmkdir -p .github/workflows .github/workflows/publish.yml",
    "crumbs": [
      "Blog",
      "Quarto"
    ]
  },
  {
    "objectID": "blog/quarto/index.html#sec-nav",
    "href": "blog/quarto/index.html#sec-nav",
    "title": "Quarto",
    "section": "Customizing site navigation",
    "text": "Customizing site navigation\nOnce your site is built and published, you can make it easier to navigate with a customized navigation bar (navbar) and sidebar, as described in the Quarto documentation. Check out the _quarto.yml files for my site and the Quarto documentation site to see how the navigation components are set up.\nIn my navbar, I added a toggle buttons for reader mode and dark mode. The other icons on right side of the navbar are spelled out in the sidebar.\nMy navbar also provides the current date and time in Dec ordinal (deco) format, which counts the years since 1 BC and the days since March 1. Dec is a calendar and time system that I created and use throughout my blog.\nTo add a custom timestamp to the navbar, I put a &lt;script&gt; element that runs time.js in an HTML block in every Quarto markdown (.qmd) file, as shown in Example¬†6. Mine √áetinkaya-Rundel wrote about HTML blocks as part of her A Quarto tip a day project.\n\nExample 6 ¬†\n\n*.qmdtime.js\n\n\n```{=html}\n&lt;script src=\"time.js\"&gt;&lt;/script&gt;\n```\n\n\n// https://howardhinnant.github.io/date_algorithms.html#days_from_civil\nfunction dote2doty(days = 719468) {\n    const era = Math.floor((days &gt;= 0 ? days : days - 146096) / 146097),\n        dotc = days - era * 146097,\n        yotc = Math.floor((dotc - Math.floor(dotc / 1460)\n        + Math.floor(dotc / 36524) - Math.floor(dotc / 146096)) / 365);\n    return [yotc + era * 400, dotc + Math.floor(yotc / 100)\n        - yotc * 365 - Math.floor(yotc / 4)];\n};\nfunction unix2doty(ms = 0) { return dote2doty(ms / 86400000 + 719468) };\nfunction doty2deco(year = 1969, doty = 306, zone = 0) {\n    [date, time] = doty.toString().split(\".\")\n    return `${year}+${date.toString().padStart(3, \"0\")}.${\n    time.toString().slice(0, 5).padStart(5, \"0\")}`;\n};\nfunction unix2deco(ms = 0) { return doty2deco(...unix2doty(ms)) };\nconst nbc = document.getElementsByClassName(\"navbar-brand-container\");\nconst div = document.createElement(\"div\");\nconst cal = document.createElement(\"i\");\ncal.classList.add(\"bi\", \"bi-calendar\");\ncal.setAttribute(\"role\", \"img\");\nconst tik = document.createElement(\"i\");\ntik.classList.add(\"bi\", \"bi-clock\");\ntik.setAttribute(\"role\", \"img\");\ndiv.setAttribute(\"id\", \"deco\");\nnbc[0].appendChild(cal);\nnbc[0].appendChild(div);\nnbc[0].appendChild(tik);\nsetInterval(() =&gt; document.getElementById(\"deco\").innerText =\n  unix2deco(Date.now()).slice(0, 14), 86.4);\n\n\n\n\nHTML blocks are useful for running JavaScript code in the context of a single page on your site without affecting the others. The main way to modify a page on your site is through the YAML frontmatter at the top of the .qmd file, but Other ways to modify a single at a\nImportantly, JavaScript can override the default styling provided by Quarto by modifying style attributes, which have the highest specificity in CSS. If I cannot get a CSS rule to work in the styles.css in the root of my site repo, my last resort is to replace the CSS selector with JavaScript code that obtains the target element and applies the CSS rule declarations as a style attribute.\nYou can use HTML blocks to modify protect raw HTML from being processed by Pandoc.\nTo add a custom timestamp to the navbar, I used ) in an HTML block.\nPython to customize the date format in the my blog‚Äôs listing page, and Lua to customize the date format in every blog post.\nJavaScript, Python, and Lua are programming languages that have all have interesting name origins. JavaScript is named after the Java‚òïprogramming language, Pythonüêçis named after the Monty Python comedy troupe, and Lua is the Portugueseüáµüáπword for moonüåï.\nPandoc is a program that converts documents into practically any format. The pan in Pandoc comes from the Ancient Greek word for all. Pandoc strives to convert all document formats, just like Pangea contained all the land and a panacea solves all problems.\nQuarto uses Pandoc to convert markdown files into target format(s) like html or pdf. If the source files contain executable code, Quarto executes the code via one of two computational engines: Jupyter or Knitr. Figure¬†2 shows the Quarto workflow.\n\n\n\n\n\n\nflowchart LR\n   A[qmd&lt;br/&gt;ipynb]-.Knitr&lt;br/&gt;Jupyter.-&gt;B((md))-.Pandoc with&lt;br/&gt;Lua filters.-&gt;C(html&lt;br/&gt;pdf&lt;br/&gt;docx&lt;br/&gt;etc.)\n\n\n\n\nFigure¬†2: Quarto workflow\n\n\n\n\n\nMine √áetinkaya-Rundel‚Äôs Quarto tip series includes a similar Quarto workflow mermaid diagram and her ‚ÄúHello, Quarto!‚Äù rstudio::conf(2022) keynote with Julia Stewart Lowndes contains truly beautiful Quarto workflow images by Allison Horst: 1, 2, 3, and 4.\nQuarto controls Pandoc, Jupyter, and Knitr in two ways: 1) with arguments passed to the Quarto CLI commands and 2) with YAML key-value pairs in .qmd, .ipynb, or .yml files.\nNormally, formatting dates in Quarto is as easy as setting the date-format YAML property. In my case it was more difficult, because I wanted dates based on Dec, a calendar and time system I created, instead of the ubiquitous Gregorian calendar.\nAs shown in Example¬†7, I set date-format to x in _metadata.yml, which converts the date of each blog post to millisecond UNIX time. I wanted to calculate the Dec calendar (Decalendar) dates from UNIX time, so that I could work with a single number and not have to deal with Gregorian calendar date formats or time zones.\nThe Decalendar dates in my blog are called Decalendar ordinal (deco) dates, because they are similar to ISO-8601 ordinal (isoo) dates. Like isoo dates, deco dates consist of a year and a day-of-the-year (doty).\nDoty values (doties) in Decalendar dates count the number of days that have passed since March 1, which is Day 0 in Decalendar, and can optionally include a Dec clock (Declock) time. The timestamp in the navbar of my blog is an example of a Decalendar date combined with a Declock time.\nThe navbar timestamp is also derived from millisecond UNIX time, which I obtained in time.js by calling Date.now(). In essence, all three of the scripts in Example¬†7 convert millisecond UNIX time into a deco date or timestamp.\nWhile time.js is sourced by Quarto when it reads the HTML block in each of my blog .qmd files, date.lua is run as a Pandoc filter during the creation of the output .html files, and date.py is executed as a post-render script. Example¬†7 speaks to the power and versatility of Quarto.\nComing up next on my blog is a post that introduces Dec with Observable graphics. Get ready for an animated and interactive data visualization extravaganza!\n\nExample 7 ¬†\n\n*.qmd_metadata.yml_quarto.ymltime.jsdate.pydate.lua\n\n\n```{=html}\n&lt;script src=\"time.js\"&gt;&lt;/script&gt;\n```\n\n\ndate: now\ndate-format: x\nfilters: date.lua\n\n\nproject:\n  type: website\n  output-dir: docs\n  post-render: date.py\n\n\n// https://howardhinnant.github.io/date_algorithms.html#days_from_civil\nfunction dote2doty(days = 719468) {\n    const era = Math.floor((days &gt;= 0 ? days : days - 146096) / 146097),\n        dotc = days - era * 146097,\n        yotc = Math.floor((dotc - Math.floor(dotc / 1460)\n        + Math.floor(dotc / 36524) - Math.floor(dotc / 146096)) / 365);\n    return [yotc + era * 400, dotc + Math.floor(yotc / 100)\n        - yotc * 365 - Math.floor(yotc / 4)];\n};\nfunction unix2doty(ms = 0) { return dote2doty(ms / 86400000 + 719468) };\nfunction doty2deco(year = 1969, doty = 306, zone = 0) {\n    [date, time] = doty.toString().split(\".\")\n    return `${year}+${date.toString().padStart(3, \"0\")}.${\n    time.toString().slice(0, 5).padStart(5, \"0\")}`;\n};\nfunction unix2deco(ms = 0) { return doty2deco(...unix2doty(ms)) };\nconst nbc = document.getElementsByClassName(\"navbar-brand-container\");\nconst div = document.createElement(\"div\");\nconst cal = document.createElement(\"i\");\ncal.classList.add(\"bi\", \"bi-calendar\");\ncal.setAttribute(\"role\", \"img\");\nconst tik = document.createElement(\"i\");\ntik.classList.add(\"bi\", \"bi-clock\");\ntik.setAttribute(\"role\", \"img\");\ndiv.setAttribute(\"id\", \"deco\");\nnbc[0].appendChild(cal);\nnbc[0].appendChild(div);\nnbc[0].appendChild(tik);\nsetInterval(() =&gt; document.getElementById(\"deco\").innerText =\n  unix2deco(Date.now()).slice(0, 14), 8.64);\n\n\nimport bs4\n\ndef unix2doty(ms=0):\n    days = ms / 86400000 + 719468\n    dote = days - (era := (days if days &gt;= 0 else days - 146096) // 146097) * 146097\n    year = int((dote - dote / 1460 + dote / 36524 - dote / 146096) // 365 + era * 400)\n    return year, days - (year * 365 + year / 4 - year / 100 + year / 400).__floor__()\n\nwith open(\"docs/blog.html\") as infile:\n    txt = infile.read()\n    soup = bs4.BeautifulSoup(txt, features=\"html.parser\")\nfor div in soup.find_all(\"div\", {\"class\": \"listing-date\"}):\n    if \"+\" not in div.text:\n        y, d = unix2doty(int(div.text))\n        div.string.replace_with(f\"{y:&gt;04}+{d.__floor__():&gt;03}\")\nfor p in soup.find_all(\"p\", {\"class\": \"date\"}):\n    if \"+\" not in p.text:\n        y, d = unix2doty(int(p.text))\n        p.string.replace_with(f\"{y:&gt;04}+{d.__floor__():&gt;03}\")\n\nwith open(\"docs/blog.html\", \"w\") as outfile:\n    outfile.write(str(soup))\n\n\nlocal function unix2deco(ms)\n    local days = ms / 86400000 + 719468\n    local era = (days &gt;= 0 and days or days - 146096) // 146097\n    local doe = days - era * 146097\n    local year = math.floor((doe - doe / 1460 + doe / 36524 - doe / 146096) / 365) + era * 400\n    local doty = days - math.floor(year * 365 + year / 4 - year / 100 + year / 400)\n    return string.format(\"%s+%s\", math.floor(year), math.floor(doty))\nend\n\nlocal function to_decalendar(date)\n  local date = pandoc.utils.stringify(date)\n  local unix = date:match(\"(%d+)\")\n  return date:gsub(unix, unix2deco(unix))\nend\n\nfunction Meta(m)\n  m.date = to_decalendar(m.date)\n  return m\nend",
    "crumbs": [
      "Blog",
      "Quarto"
    ]
  }
]