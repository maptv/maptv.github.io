---
title: ""
image: media/martin.png
about:
  template: solana
  image-shape: round
  image-width: 20em
format:
  html:
    grid:
      body-width: 1800px
    output-file: index.html
---

Greetings! My name is Martin Laptev. <img src="media/wave.gif" width="40px"/>

I am a data scientist and software engineer with a broad scientific background that ranges from biochemistry to epidemiology. I use the JavaScript, Python, and R programming languages along with the UNIX shell to build digital deliverables like cloud[]{.bi .bi-cloud}infrastructure, data[]{.bi .bi-bar-chart-line}dashboards, and machine[]{.bi .bi-robot}learning models.

You are currently on the About[]{.bi .bi-person-circle}page of my site. The arrow[](blog/blog.qmd){.bi .bi-arrow-right-short}at the bottom right of this page and the pencil[](blog/blog.qmd){.bi .bi-pencil}icon in the navigation bar (navbar) will take you to my [Blog](blog/blog.qmd). Similarly, the other navbar icons lead to my [Curriculum Vitae (CV)](cv/cv.qmd)[]{.bi .bi-file-earmark-person}, [GitHub](https://github.com/maptv)[]{.bi .bi-github}, and [LinkedIn](https://www.linkedin.com/in/maptv)[]{.bi .bi-linkedin}.


The timestamp in the navbar shows the current `Dec` calendar (`Decalendar`) date[]{.bi .bi-calendar}(\${styledDecoYear}+\${styledDecoDate}) and `Dec` clock (`Declock`) time[]{.bi .bi-clock}(\${styledDecoTime}). `Dec` is a calendar and timekeeping system that I created.

Briefly, `Decalendar` dates (`year+day`) show the [years since 1 BC](https://en.wikipedia.org/wiki/ISO_8601#:~:text=year%200000%20being%20equal%20to%201%20BC) and the [days since March 1st](https://howardhinnant.github.io/date_algorithms.html#civil_from_days:~:text=These%20algorithms%20internally%20assume%20that%20March%201%20is%20the%20first%20day%20of%20the%20year.) separated by a plus sign (`+`). To see a [tooltip](https://en.wikipedia.org/wiki/Tooltip#:~:text=The%20tooltip%2C%20also%20known%20as%20infotip%20or%20hint%2C%20is%20a%20common%20graphical%20user%20interface%20(GUI)%20element%20in%20which%2C%20when%20hovering%20over%20a%20screen%20element%20or%20component%2C%20a%20text%20box%20displays%20information%20about%20that%20element) with the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Time_intervals:~:text=ISO%208601%20is%20an%20international%20standard%20covering%20the%20worldwide%20exchange%20and%20communication%20of%20date%20and%20time%2Drelated%20data.) [calendar date](https://en.wikipedia.org/wiki/ISO_8601#Calendar_dates) equivalent of any underlined `Decalendar` date on my site, e.g. [`1969+306`]{.underline data-bs-toggle="tooltip" data-bs-title="1970-01-01"}, [hover](https://en.wikipedia.org/wiki/Cursor_(user_interface)#:~:text=The%20mouse%2Dover%20or%20hover%20gesture%20can%20also%20show%20a%20tooltip%2C%20which%20presents%20information%20about%20what%20the%20pointer%20is%20hovering%20over) your [pointer](https://en.wikipedia.org/wiki/Cursor_(user_interface)#:~:text=a%20pointer%20or%20mouse%20pointer%20(as%20part%20of%20a%20personal%20computer%20WIMP%20style%20of%20interaction)%5B10%5D%5B11%5D%5B12%5D%20is%20a%20symbol%20or%20graphical%20image%20on%20the%20computer%20monitor%20or%20other%20display%20device%20that%20echoes%20movements%20of%20the%20pointing%20device%2C%20commonly%20a%20mouse%2C%20touchpad%2C%20or%20stylus%20pen.) over the date or [tap and hold](https://en.wikipedia.org/wiki/Tooltip#:~:text=a%20tooltip%20is%20displayed%20upon%20long%2Dpressing%E2%80%94i.e.%2C%20tapping%20and%20holding%E2%80%94an%20element.) the date on a smartphone.

While `Decalendar` dates count years and days, `Declock` times count [fractional days](https://en.wikipedia.org/wiki/Decimal_time#Fractional_days:~:text=The%20time%20of%20day%20is%20sometimes%20represented%20as%20a%20decimal%20fraction%20of%20a%20day%20in%20science%20and%20computers.) since midnight. In addition to displaying the time of day, fractional days can also be used to measure durations, such as the time since this webpage was loaded: \${styledTickTime}.

```{ojs}
//| echo: false
unix = {
  while(true) {
    yield Date.now();
  }
}
tick = {
  let i = 0;
  while (true) {
    yield Promises.tick(864, ++i);
  }
}
tickTime = tick % 1e5
// http://howardhinnant.github.io/date_algorithms.html#civil_from_days
function dote2doty(days = 719468) {
    const era = Math.floor((days >= 0 ? days : days - 146096) / 146097),
        dotc = days - era * 146097,
        yotc = Math.floor((dotc - Math.floor(dotc / 1460)
        + Math.floor(dotc / 36524) - Math.floor(dotc / 146096)) / 365);
    return [yotc + era * 400, dotc + Math.floor(yotc / 100)
        - yotc * 365 - Math.floor(yotc / 4)];
};
function unix2doty(ms = 0) { return dote2doty(ms / 86400000 + 719468) };
function doty2deco(year = 1969, doty = 306, zone = 0) {
    const [date, time] = doty.toString().split(".")
    return `${year}+${date.toString().padStart(3, "0")}.${
    time.toString().slice(0, 5).padStart(5, "0")}`;
};
function unix2deco(ms = 0) { return doty2deco(...unix2doty(ms)) };
// https://observablehq.com/@observablehq/text-color-annotations-in-markdown#textcolor
function setStyle(content, style = {}) {
  function yiq(color) {
    const {r, g, b} = d3.rgb(color);
    return (r * 299 + g * 587 + b * 114) / 1000 / 255; // returns values between 0 and 1
  }
  const {
    background,
    color = yiq(background) >= 0.6 ? "#111" : "white",
    padding = "0 1px",
    borderRadius = "4px",
    fontWeight = 900,
    fontSize = "1em",
    ...rest
  } = typeof style === "string" ? {background: style} : style;
  return htl.html`<span style=${{
    background,
    color,
    padding,
    borderRadius,
    fontWeight,
    ...rest
  }}>${content}</span>`;
}
deco = unix2deco(unix).slice(0, 14)
decoYear = deco.slice(0, 4)
decoDate = deco.slice(5, 8)
decoTime = deco.slice(9, 14)
styledDecoYear = setStyle(decoYear, d3.schemePaired[10])
styledDecoDate = setStyle(decoDate, d3.schemePaired[1])
styledDecoTime = setStyle(decoTime, d3.schemePaired[2])
styledTickTime = setStyle(tickTime, d3.schemePaired[2])
```

```{=html}
<script src="scripts/time.js"></script>
<script>
const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))
</script>
<style>
div#quarto-sidebar-glass { display: none !important; }
ul.navbar-nav.navbar-nav-scroll { -webkit-flex-direction: row !important; }
#quarto-sidebar { padding: 0px; }
#quarto-sidebar > * { padding: 0px; }
#quarto-margin-sidebar { padding: 17px; }
</style>
```
