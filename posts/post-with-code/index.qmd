---
title: Post With Code
author: Martin Laptev
categories:
  - news
  - code
  - analysis
  - data visualization
image: image.jpg
---

```{python}
#| echo: false
#| output: false
import warnings

warnings.filterwarnings("ignore")
```

The plot below is from the [Seaborn Python library documentation](https://seaborn.pydata.org/examples/horizontal_boxplot.html):

1.  5 blog posts, not 3

2.  Topics are pre-defined:

    1.  Probability theory and random variables

    -   Histogram

    2.  Clustering

    -   DBSCAN labels for scatter plot

    3.  Linear and nonlinear regression

    -   line on scatter plot

    4.  Classification

    -   ROC, PR, Confusion Matrix

    5.  Anomaly/outlier detection

    -   DBSCAN labels for scatter plot

Learning objectives: 1. Use various techniques related to preprocessing prior to the use of machine learning models. 2. Describe the probability theory and random variables. 3. Identify the common tasks in machine learning/data mining models for clustering. 4. Analyze multiple linear and nonlinear regression. 5. Describe the algorithms, theories, and applications related to machine learning/data mining for classification. 6. Detect anomaly/outlier behavior and the treatment techniques.

```{python}
import seaborn as sns
import matplotlib.pyplot as plt

sns.set_theme(style="ticks")

# Initialize the figure with a logarithmic x axis
f, ax = plt.subplots(figsize=(7, 6))
ax.set_xscale("log")

# Load the example planets dataset
planets = sns.load_dataset("planets")

# Plot the orbital period with horizontal boxes
sns.boxplot(
    planets, x="distance", y="method", hue="method",
    whis=[0, 100], width=.6, palette="vlag"
)

# Add in points to show each observation
sns.stripplot(planets, x="distance", y="method", size=4, color=".3")

# Tweak the visual presentation
ax.xaxis.grid(True)
ax.set(ylabel="")
sns.despine(trim=True, left=True)
```

The plot below is from the [Yellowbrick Python library documentation](https://www.scikit-yb.org/en/latest/api/features/jointplot.html?highlight=joint%20plot#joint-plot-visualization):

```{python}
from yellowbrick.datasets import load_concrete
from yellowbrick.features import JointPlotVisualizer

# Load the dataset
X, y = load_concrete()

# Instantiate the visualizer
visualizer = JointPlotVisualizer(columns="cement")

visualizer.fit_transform(X, y)        # Fit and transform the data
visualizer.show()                     # Finalize and render the figure
```

The example below shows tuning of the regularization strength $\alpha$. ![image.png](attachment:3f6e174e-eca2-47a0-bc3b-605681c448ea.png) ![image.png](attachment:822e2379-4768-4f25-93c5-1ecfea0b84b7.png)

This is a change to the markdown text.

```{=html}
<script>
// https://howardhinnant.github.io/date_algorithms.html#days_from_civil
function dote2doty(days = 719468) {
    const era = Math.floor((days >= 0 ? days : days - 146096) / 146097),
        dotc = days - era * 146097,
        yotc = Math.floor((dotc - Math.floor(dotc / 1460) + Math.floor(dotc / 36524) - Math.floor(dotc / 146096)) / 365);
    return [yotc + era * 400, dotc + Math.floor(yotc / 100) - yotc * 365 - Math.floor(yotc / 4)];
}
function unix2doty(ms = 0) {
  return dote2doty(ms / 86400000 + 719468)
}
function doty2dote(year = 1969, doty = 0, zone = 0) {
    const cycle = Math.floor((year >= 0 ? year : year - 399) / 400),
    yote = year - cycle * 400;
    return cycle * 146097 + yote * 365 + Math.floor(yote / 4) - Math.floor(yote / 100) + doty - zone
}
function doty2deco(yearDoty = [1969, 306], zone = 0) {
    const yd = dote2doty(doty2dote(yearDoty[0], Math.floor(yearDoty[1])));
    return `${yd[0]}+${(yd[1]).toString().padStart(3, "0")}${
        yearDoty[1].toString().includes(".") ? "." + (
            (yearDoty[1] > 0) ? (yearDoty[1] - zone).toString().split(".").pop()
            : [...(yearDoty[1] - zone).toString().split(".").pop()].map(
                (e, i, a) => (i + 1 === a.length) ? 10 - e : 9 - e
            ).join("")
        ) : ""
    }`
}
function unix2deco(ms = 0) {
    return doty2deco(unix2doty(ms));
};
const nbc = document.getElementsByClassName("navbar-brand-container")
const div = document.createElement("div")
const cal = document.createElement("i")
cal.classList.add("bi", "bi-calendar")
cal.setAttribute("role", "img")
const tik = document.createElement("i")
tik.classList.add("bi", "bi-clock")
tik.setAttribute("role", "img")
div.setAttribute("id", "deco");
nbc[0].appendChild(cal)
nbc[0].appendChild(div)
nbc[0].appendChild(tik)
setInterval(
  () => document.getElementById("deco").innerText =
  unix2deco(Date.now()).slice(0, 14), 8.64);
</script>
```