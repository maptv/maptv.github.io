---
title: Quarto
image: logos.png
categories:
  - decüóìÔ∏èüïì
  - quarto
format:
  html:
    mermaid:
      theme: default
---

This is the first post in the blog of Martin Laptev. Welcome!

I created my blog using the [Quarto](https://quarto.org/#:~:text=An%20open%2Dsource%20scientific%20and%20technical%20publishing%20system), which is the [bee'süêùknees](https://en.wiktionary.org/wiki/the_bee%27s_knees#:~:text=Something%20or%20someone%20excellent%2C%20surpassingly%20wonderful%2C%20or%20cool). Quarto makes it easy to create pretty much any kind of publication including articles, books, blogs, dashboards, presentations, reports, and websites.

::: column-margin
![Quarto](quarto.png){width="100"}
:::

Promoting the use of Quarto is one of the goals of my blog. Therefore, many of posts will provide some information on how I accomplished specific tasks with Quarto.

For example, I used [JavaScript](https://en.wikipedia.org/wiki/JavaScript#:~:text=JavaScript%20(/%CB%88d%CA%92%C9%91%CB%90v%C9%99skr%C9%AApt/)%2C%20often%20abbreviated%20as%20JS%2C%20is%20a%20programming%20language%20that%20is%20one%20of%20the%20core%20technologies%20of%20the%20World%20Wide%20Web%2C%20alongside%20HTML%20and%20CSS.) to add a custom timestamp to the navigation bar (navbar), [Python](https://en.wikipedia.org/wiki/Python_(programming_language)#:~:text=Python%20is%20a%20high%2Dlevel%2C%20general%2Dpurpose%20programming%20language.) to customize the date format in the my blog's [listing page](https://maptv.github.io/posts), and [Lua](https://en.wikipedia.org/wiki/Lua_(programming_language)#:~:text=Lua%20(/%CB%88lu%CB%90%C9%99/%20LOO%2D%C9%99%3B%20from%20Portuguese%3A%20lua%20%5B%CB%88lu(w)%C9%90%5D%20meaning%20moon)%20is%20a%20lightweight%2C%20high%2Dlevel%2C%20multi%2Dparadigm%20programming%20language%20designed%20primarily%20for%20embedded%20use%20in%20applications.) to customize the date format in every blog post.

::: column-margin
![JavaScript](js.png){width="100"}
:::

::: column-margin
![Python](python.png){width="100"}
:::

::: column-margin
![Lua](lua.png){width="100"}
:::

JavaScript, Python, and Lua are programming languages that have all have interesting name origins. JavaScript is named after the Java‚òïprogramming language, Pythonüêçis named after the [Monty Python](https://en.wikipedia.org/wiki/Monty_Python#:~:text=Monty%20Python%20(also%20collectively%20known%20as%20the%20Pythons)%5B2%5D%5B3%5D%20were%20a%20British%20comedy%20troupe%20formed%20in%201969) comedy troupe, and Lua is the Portugueseüáµüáπword for moonüåï.

To create the navbar timestamp, I put a `<script>` tag that sources `time.js` in an HTML block in every Quarto markdown (`.qmd`) file, as shown in @exm-date. [Mine √áetinkaya-Rundel](https://mine-cr.com/) wrote about [HTML blocks](https://mine-cetinkaya-rundel.github.io/quarto-tip-a-day/posts/12-html-block/) as part of her [A Quarto tip a day](https://mine-cetinkaya-rundel.github.io/quarto-tip-a-day/about.html) project. Essentially, HTML blocks protect raw HTML from being processed by Pandoc.

[Pandoc](https://pandoc.org/) is a program that converts documents into practically any format. The pan in Pandoc comes from the Ancient Greek word for [*all*](https://en.wiktionary.org/wiki/pan-#:~:text=pan%2D-,all,-Usage%20notes%5B). Pandoc strives to convert *all* document formats, just like [Pangea](https://en.wikipedia.org/wiki/Pangaea#:~:text=Pangaea%20or%20Pangea%20(/p%C3%A6n%CB%88d%CA%92i%CB%90.%C9%99/)%5B1%5D%20was%20a%20supercontinent%20that%20existed%20during%20the%20late%20Paleozoic%20and%20early%20Mesozoic%20eras.) contained *all* the land and a [panacea](https://en.wiktionary.org/wiki/panacea#English:~:text=A%20solution%20to%20all%20problems.) solves *all* problems.

Quarto uses Pandoc to convert markdown files into target format(s) like `html` or `pdf`. If the source files contain executable code, Quarto executes the code via one of two computational engines: [Jupyter](https://jupyter.org/#:~:text=Free%20software%2C%20open%20standards%2C%20and%20web%20services%20for%20interactive%20computing%20across%20all%20programming%20languages) or [Knitr](https://yihui.org/knitr/#:~:text=the%20knitr%20package%20was%20designed%20to%20be%20a%20transparent%20engine%20for%20dynamic%20report%20generation%20with%20R). @fig-1 is a [mermaid.js](https://mermaid.js.org/#/:~:text=JavaScript%20based%20diagramming,Get%20Started)üßú‚Äç‚ôÄÔ∏èdiagram of the Quarto workflow.

::: column-margin
![Jupyter](jupyter.png){width="100"}
:::

::: column-margin
![Knitr](knitr.svg){.knitr width="100"}
:::

::: column-margin
![Mermaid](mermaid.png){width="100"}
:::

```{mermaid fig-align="center"}
%%| label: fig-1
%%| fig-cap: Quarto workflow
%%| fig-align: center
%%| fig-width: 9
flowchart LR
   A[qmd<br/>ipynb]-.Knitr<br/>Jupyter.->B((md))-.Pandoc with<br/>Lua filters.->C(html<br/>pdf<br/>docx<br/>etc.)
```

Mine √áetinkaya-Rundel's Quarto tip series includes a similar [Quarto workflow mermaid diagram](https://mine-cetinkaya-rundel.github.io/quarto-tip-a-day/posts/21-diagrams/#fig-mermaid) and her ["Hello, Quarto!"](https://mine.quarto.pub/hello-quarto) rstudio::conf(2022) keynote with [Julia Stewart Lowndes](https://jules32.github.io) contains truly beautiful Quarto workflow images by [Allison Horst](https://allisonhorst.com): [1](https://mine.quarto.pub/hello-quarto/#/publishing-system-2), [2](https://mine.quarto.pub/hello-quarto/#/quarto-flattens-the-learning-curve), [3](https://mine.quarto.pub/hello-quarto/#/quarto-can-grow-with-learners-in-a-profound-way), and [4](https://mine.quarto.pub/hello-quarto/#/quarto-cli-orchestrates-each-step-of-rendering).

Quarto controls Pandoc, Jupyter, and Knitr in two ways: 1) with arguments passed to the [Quarto CLI](https://en.wikipedia.org/wiki/Command-line_interface#:~:text=A%20command%2Dline%20interface%20(CLI)%20is%20a%20means%20of%20interacting%20with%20a%20computer%20program%20by%20inputting%20lines%20of%20text%20called%20command%2Dlines.) commands and 2) with [YAML](https://yaml.org/) key-value pairs in `.qmd`, `.ipynb`, or `.yml` files.

Normally, [formatting dates in Quarto](https://quarto.org/docs/reference/dates#using-a-date-format) is as easy as setting the `date-format` YAML property. In my case it was more difficult, because I wanted dates based on `Dec`, a calendar and time system I created, instead of the ubiquitous [Gregorian calendar](https://en.wikipedia.org/wiki/Gregorian_calendar#:~:text=The%20Gregorian%20calendar%20is%20the%20calendar%20used%20in%20most%20parts%20of%20the%20world.).

::: column-margin
![Dec](dec.png){width="100"}
:::

As shown in @exm-date, I set `date-format` to `x` in `_metadata.yml`, which converts the date of each blog post to millisecond [UNIX time](https://en.wikipedia.org/wiki/Unix_time#:~:text=Unix%20time%5Ba%5D%20is%20a%20date%20and%20time%20representation%20widely%20used%20in%20computing.). I wanted to calculate the `Dec` calendar (`Decalendar`) dates from UNIX time, so that I could work with a single number and not have to deal with Gregorian calendar date formats or time zones.

The `Decalendar` dates in my blog are called `Decalendar` ordinal (`deco`) dates, because they are similar to [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#:~:text=ISO%208601%20is%20an%20international%20standard%20covering%20the%20worldwide%20exchange%20and%20communication%20of%20date%20and%20time%2Drelated%20data.) [ordinal](https://en.wikipedia.org/wiki/ISO_8601#Ordinal_dates) (`isoo`) dates. Like `isoo` dates, `deco` dates consist of a year and a day-of-the-year (`doty`).

`Doty` values (`doties`) in `Decalendar` dates count the number of days that have passed since March 1, which is `Day` `0` in `Decalendar`, and can optionally include a `Dec` clock (`Declock`) time. The timestamp in the navbar of my blog is an example of a `Decalendar` date combined with a `Declock` time.

The navbar timestamp is also derived from millisecond UNIX time, which I obtained in `time.js` by calling `Date.now()`. In essence, all three of the scripts in @exm-date convert millisecond UNIX time into a `deco` date or timestamp.

While `time.js` is sourced by Quarto when it reads the HTML block in each of my blog `.qmd` files, `date.lua` is run as a [Pandoc filter](https://quarto.org/docs/extensions/filters.html) during the creation of the output `.html` files, and `date.py` is executed as a [post-render script](https://quarto.org/docs/projects/scripts.html#pre-and-post-render). @exm-date speaks to the power and versatility of Quarto.

Coming up next on my blog is [a post](../observable/observable.qmd) that introduces `Dec` with [Observable](https://observablehq.com/) graphics. Get ready for an animated and interactive data visualization extravaganza!

::: {#exm-date}

::: panel-tabset
#### `*.qmd`

```` html
```{=html}
<script src="time.js"></script>
```
````

#### `_metadata.yml`

``` yaml
date: now
date-format: x
filters: date.lua
```

#### `_quarto.yml`

``` yaml
project:
  type: website
  output-dir: docs
  post-render: date.py
```

#### `time.js`

``` javascript
// https://howardhinnant.github.io/date_algorithms.html#days_from_civil
function dote2doty(days = 719468) {
    const era = Math.floor((days >= 0 ? days : days - 146096) / 146097),
        dotc = days - era * 146097,
        yotc = Math.floor((dotc - Math.floor(dotc / 1460)
        + Math.floor(dotc / 36524) - Math.floor(dotc / 146096)) / 365);
    return [yotc + era * 400, dotc + Math.floor(yotc / 100)
        - yotc * 365 - Math.floor(yotc / 4)];
};
function unix2doty(ms = 0) { return dote2doty(ms / 86400000 + 719468) };
function doty2deco(year = 1969, doty = 306, zone = 0) {
    [date, time] = doty.toString().split(".")
    return `${year}+${date.toString().padStart(3, "0")}.${
    time.toString().slice(0, 5).padStart(5, "0")}`;
};
function unix2deco(ms = 0) { return doty2deco(...unix2doty(ms)) };
const nbc = document.getElementsByClassName("navbar-brand-container");
const div = document.createElement("div");
const cal = document.createElement("i");
cal.classList.add("bi", "bi-calendar");
cal.setAttribute("role", "img");
const tik = document.createElement("i");
tik.classList.add("bi", "bi-clock");
tik.setAttribute("role", "img");
div.setAttribute("id", "deco");
nbc[0].appendChild(cal);
nbc[0].appendChild(div);
nbc[0].appendChild(tik);
setInterval(() => document.getElementById("deco").innerText =
  unix2deco(Date.now()).slice(0, 14), 8.64);
```

#### `date.py`

``` python
import bs4

def unix2doty(ms=0):
    days = ms / 86400000 + 719468
    dote = days - (era := (days if days >= 0 else days - 146096) // 146097) * 146097
    year = int((dote - dote / 1460 + dote / 36524 - dote / 146096) // 365 + era * 400)
    return year, days - (year * 365 + year / 4 - year / 100 + year / 400).__floor__()

with open("docs/posts.html") as infile:
    txt = infile.read()
    soup = bs4.BeautifulSoup(txt, features="html.parser")
for div in soup.find_all("div", {"class": "listing-date"}):
    if "+" not in div.text:
        y, d = unix2doty(int(div.text))
        div.string.replace_with(f"{y:>04}+{d.__floor__():>03}")

with open("docs/posts.html", "w") as outfile:
    outfile.write(str(soup))
```

#### `date.lua`

``` lua
local function unix2deco(ms)
    local days = ms / 86400000 + 719468
    local era = (days >= 0 and days or days - 146096) // 146097
    local doe = days - era * 146097
    local year = math.floor((doe - doe / 1460 + doe / 36524 - doe / 146096) / 365) + era * 400
    local doty = days - math.floor(year * 365 + year / 4 - year / 100 + year / 400)
    return string.format("%s+%s", math.floor(year), math.floor(doty))
end

local function to_decalendar(date)
  local date = pandoc.utils.stringify(date)
  local unix = date:match("(%d+)")
  return date:gsub(unix, unix2deco(unix))
end

function Meta(m)
  m.date = to_decalendar(m.date)
  return m
end
```
:::

:::

```{=html}
<script src="../../time.js"></script>
<style>
#title-block-header > div.quarto-title-banner.page-columns.page-full {
  margin: 0px;
  padding: 0px;
}
#title-block-header {
  margin: 0px;
}
figcaption { text-align: center; }
#fig-1 > figure > figcaption.figure { text-align: center; }
#fig-1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca { text-align: center; }
</style>
```
