---
title: Ordinal date
image: /asset/deidek.svg
citation:
  url: 'https://maptv.github.io/dec/date'
format:
  html:
    include-after-body:
      - ../../asset/cite.html
      - ../../asset/style.html
      - ../../asset/stamp.html
      - ../../asset/tooltip.html
  commonmark: default
format-links:
  - html
  - text: JavaScript Jupyter
    href: index.js.ipynb
    icon: journal-richtext
  - text: JavaScript Quarto
    href: index.js.qmd
    icon: journal-code
  - text: Python Jupyter
    href: index.py.ipynb
    icon: journal-richtext
  - text: Python Quarto
    href: index.py.qmd
    icon: journal-code
  - text: Lua Jupyter
    href: index.lua.ipynb
    icon: journal-richtext
  - text: Lua Quarto
    href: index.lua.qmd
    icon: journal-code
  - text: JavaScript Script
    href: index.js
    icon: filetype-js
  - text: Python script
    href: index.py
    icon: filetype-py
  - text: Lua Script
    href: index.lua
    icon: moon
  - format: commonmark
    text: Markdown
    icon: markdown
notebook-links: false
filters:
  - ../../asset/date.lua
  - include-code-files
execute:
  output: false
---

My site is full of dates in the `year+day` format. The major advantage of this format is that the `day` component can unequivocally identify any date and time in a given year and thus can replace months, days of the month, hours, minutes, and seconds. In essence, the `day` number can  To create all of the dates, I use three different programming languages: Python for the [listing page](/list), Lua for the Published date at the top of each article, and JavaScript for the citation information at the bottom of each article.


To test the code, I will create a separate Quarto markdown (`qmd`) file for each of these 3 programming languages and [embed](https://quarto.org/docs/authoring/notebook-embed.html#overview) them into this `qmd` file.


::: {.content-hidden unless-profile="javascript"}

# JavaScript

```{typescript}
function unix2doty(unix) {
  const dote = unix / 86400 + 719468,
    cykl = Math.floor((
      dote >= 0 ? dote
      : dote - 146096
    ) / 146097),
  dotc = dote - cykl * 146097,
  yotc = Math.floor((dotc
    - Math.floor(dotc / 1460)
    + Math.floor(dotc / 36524)
    - Math.floor(dotc / 146096)
  ) / 365);
  return [
    yotc + cykl * 400,
    dotc - (yotc * 365
      + Math.floor(yotc / 4)
      - Math.floor(yotc / 100)
  )]}
```

```{typescript}
unix2doty(1728000000)
```

```{typescript}
unix2doty(1890000000)
```

:::
::: {.content-hidden unless-profile="lua"}

# Lua

```{lua}
function unix2doty(unix)
  local dote = unix / 86400 + 719468
  local cykl = (
    dote >= 0 and dote
    or dote - 146096
  ) // 146097
  local dotc = dote - cykl * 146097
  local yotc = (
    dotc - dotc // 1460
    + dotc // 36524
    - dotc // 146096
  ) // 365
  return {
    math.floor(yotc + cykl * 400),
    dotc - (yotc * 365
      + yotc // 4
      - yotc // 100
  )}
end
```

```{lua}
unix2doty(1728000000)
```

```{lua}
unix2doty(1890000000)
```

:::

::: {.content-hidden unless-profile="python"}

# Python

```{python}
def unix2doty(unix):
    dote = unix / 86400 + 719468
    cykl = (
        dote if dote >= 0
        else dote - 146096
    ) // 146097
    dotc = dote - cykl * 146097
    yotc = (dotc
        - dotc // 1460
        + dotc // 36524
        - dotc // 146096
    ) // 365
    return [
        int(yotc + cykl * 400),
        dotc - (yotc * 365
            + yotc // 4
            - yotc // 100
    )]
```

```{python}
unix2doty(1728000000)
```

```{python}
unix2doty(1890000000)
```

:::

This is a test.

::: {.content-hidden unless-profile="knitr"}
::: {.content-hidden unless-format="html"}

::: {.panel-tabset }

# JavaScript

{{< embed index.js.ipynb echo=true >}}

# Lua

{{< embed index.lua.ipynb echo=true >}}

# Python

{{< embed index.py.ipynb echo=true >}}

:::
:::
:::
