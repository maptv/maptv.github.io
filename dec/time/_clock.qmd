::: {.clocks}
```{ojs}
//| echo: false
//| column: margin
//| class: clock
//| label: posclock
// https://observablehq.com/@d3/simple-clock
// https://observablehq.com/@drio/lets-build-an-analog-clock
{
  const clockRadius = 200,
    margin = 50,
    w = (clockRadius + margin) * 2,
    h = (clockRadius + margin) * 2,
    hourHandLength = (2 * clockRadius) / 3,
    minuteHandLength = clockRadius,
    secondHandLength = clockRadius - 12,
    secondHandBalance = 30,
    secondTickStart = clockRadius,
    secondTickLength = -10,
    hourTickStart = clockRadius,
    hourTickLength = -18,
    secondLabelRadius = clockRadius + 16,
    secondLabelYOffset = 5,
    hourLabelRadius = clockRadius - 40,
    hourLabelYOffset = 7,
    radians = Math.PI / 180;
  const ten = d3
    .scaleLinear()
    .range([0, 360])
    .domain([0, 10]);
  const sto = d3
    .scaleLinear()
    .range([0, 360])
    .domain([0, 100]);
  const handData = [
    {
      type: "hour",
      value: 0,
      length: -hourHandLength,
      scale: ten
    },
    {
      type: "minute",
      value: 0,
      length: -minuteHandLength,
      scale: sto
    },
    {
      type: "second",
      value: 0,
      length: -secondHandLength,
      scale: sto,
      balance: secondHandBalance
    }
  ];
  function drawClock() {
    // create all the clock elements
    updateData(); //draw them in the correct starting position
    const face = svg
      .append("g")
      .attr("id", "clock-face")
      .attr("transform", `translate(${[w / 2, h / 2]})`);
    // add marks for seconds
    face
      .selectAll(".second-tick")
      .data(d3.range(0, 100))
      .enter()
      .append("line")
      .attr("class", "second-tick")
      .attr("x1", 0)
      .attr("x2", 0)
      .attr("y1", secondTickStart)
      .attr("y2", secondTickStart + secondTickLength)
      .attr("transform", d => `rotate(${sto(d)})`);
    // and labels...
    face
      .selectAll(".second-label")
      .data(d3.range(0, 100, 5))
      .enter()
      .append("text")
      .attr("class", "second-label")
      .attr("text-anchor", "middle")
      .attr("x", d => secondLabelRadius * Math.sin(sto(d) * radians))
      .attr(
        "y",
        d =>
          -secondLabelRadius * Math.cos(sto(d) * radians) + secondLabelYOffset
      )
      .text(d => d);
    // ... and hours
    face
      .selectAll(".hour-tick")
      .data(d3.range(0, 10, 1))
      .enter()
      .append("line")
      .attr("class", "hour-tick")
      .attr("x1", 0)
      .attr("x2", 0)
      .attr("y1", hourTickStart)
      .attr("y2", hourTickStart + hourTickLength)
      .attr("transform", d => `rotate(${ten(d)})`);
    face
      .selectAll(".hour-label")
      .data(d3.range(0, 10, 1))
      .enter()
      .append("text")
      .attr("class", "hour-label")
      .attr("text-anchor", "middle")
      .attr("x", d => hourLabelRadius * Math.sin(ten(d) * radians))
      .attr(
        "y",
        d => -hourLabelRadius * Math.cos(ten(d) * radians) + hourLabelYOffset
      )
      .text(d => d);
    const hands = face.append("g").attr("id", "clock-hands");
    hands
      .selectAll("line")
      .data(handData)
      .enter()
      .append("line")
      .attr("class", d => d.type + "-hand")
      .attr("x1", 0)
      .attr("y1", d => d.balance || 0)
      .attr("x2", 0)
      .attr("y2", d => d.length)
      .attr("transform", d => `rotate(${d.scale(d.value)})`);
    face
      .append("g")
      .attr("id", "face-overlay")
      .append("circle")
      .attr("class", "hands-cover")
      .attr("x", 0)
      .attr("y", 0)
      .attr("r", clockRadius / 20);
  }
  function moveHands() {
    const sel = d3
      .select("#clock-hands-final")
      .selectAll("line")
      .data(handData)
      .transition();
    if (fancySecondsOFF) sel.ease(d3.easeElastic.period(0.5));
    sel.attr("transform", d => `rotate(${d.scale(d.value)})`);
  }
  function updateData() {
    handData[0].value = !fancySecondsOFF ? Math.floor(selectedExact * 10) : decTime[0];
    handData[1].value = !fancySecondsOFF ? Math.floor(selectedExact * 10 % 1 * 100) : decTime.slice(2, 4);
    handData[2].value = !fancySecondsOFF ? selectedExact * 10 % 1 * 100 % 1 * 100 : decTime.slice(4, 6);
  }
  const svg = d3
    .create("svg")
    .attr("viewBox", [0, 0, w, h])
    .style("max-width", `${width / 2.1}px`)
    .attr("class", "analogclock")
    .attr("id", "topclock");
  svg
    .append("text")
    .text(`+${decTime}-${selectedZone}`)
    .attr("x", clockRadius + margin)
    .attr("y", clockRadius * 2 + margin * 2.1)
    .attr("text-anchor", "middle")
    .attr("font-size", 32)
    .attr("font-family", "monospace");
  drawClock();
  // Animation
  const interval = setInterval(
    () => {
      updateData();
      moveHands();
    },
    !fancySecondsOFF ? 10 : 864
  );
  invalidation.then(() => clearInterval(interval));
  return svg.node();
}
```

```{ojs}
//| echo: false
//| column: margin
//| class: clock
//| label: negclock
// https://observablehq.com/@d3/simple-clock
// https://observablehq.com/@drio/lets-build-an-analog-clock
{
  const clockRadius = 200,
    margin = 50,
    w = (clockRadius + margin) * 2,
    h = (clockRadius + margin) * 2,
    hourHandLength = (2 * clockRadius) / 3,
    minuteHandLength = clockRadius,
    secondHandLength = clockRadius - 12,
    secondHandBalance = 30,
    secondTickStart = clockRadius,
    secondTickLength = -10,
    hourTickStart = clockRadius,
    hourTickLength = -18,
    secondLabelRadius = clockRadius + 16,
    secondLabelYOffset = 5,
    hourLabelRadius = clockRadius - 40,
    hourLabelYOffset = 7,
    radians = Math.PI / 180;
  const ten = d3
    .scaleLinear()
    .range([0, 360])
    .domain([0, 10]);
  const sto = d3
    .scaleLinear()
    .range([0, 360])
    .domain([0, 100]);
  const handData = [
    {
      type: "hour",
      value: 0,
      length: -hourHandLength,
      scale: ten
    },
    {
      type: "minute",
      value: 0,
      length: -minuteHandLength,
      scale: sto
    },
    {
      type: "second",
      value: 0,
      length: -secondHandLength,
      scale: sto,
      balance: secondHandBalance
    }
  ];
  function drawClock() {
    // create all the clock elements
    updateData(); //draw them in the correct starting position
    const face = svg
      .append("g")
      .attr("id", "clock-face")
      .attr("transform", `translate(${[w / 2, h / 2]})`);
    // add marks for seconds
    face
      .selectAll(".second-tick")
      .data(d3.range(0, 100))
      .enter()
      .append("line")
      .attr("class", "second-tick")
      .attr("x1", 0)
      .attr("x2", 0)
      .attr("y1", secondTickStart)
      .attr("y2", secondTickStart + secondTickLength)
      .attr("transform", d => `rotate(${sto(d)})`);
    // and labels...
    face
      .selectAll(".second-label")
      .data(d3.range(0, 100, 5))
      .enter()
      .append("text")
      .attr("class", "second-label")
      .attr("text-anchor", "middle")
      .attr("x", d => secondLabelRadius * Math.sin(sto(d) * radians))
      .attr(
        "y",
        d =>
          -secondLabelRadius * Math.cos(sto(d) * radians) + secondLabelYOffset
      )
      .text(d => d);
    // ... and hours
    face
      .selectAll(".hour-tick")
      .data(d3.range(0, 10, 1))
      .enter()
      .append("line")
      .attr("class", "hour-tick")
      .attr("x1", 0)
      .attr("x2", 0)
      .attr("y1", hourTickStart)
      .attr("y2", hourTickStart + hourTickLength)
      .attr("transform", d => `rotate(${ten(d)})`);
    face
      .selectAll(".hour-label")
      .data(d3.range(0, 10, 1))
      .enter()
      .append("text")
      .attr("class", "hour-label")
      .attr("text-anchor", "middle")
      .attr("x", d => hourLabelRadius * Math.sin(ten(d) * radians))
      .attr(
        "y",
        d => -hourLabelRadius * Math.cos(ten(d) * radians) + hourLabelYOffset
      )
      .text(d => d);
    const hands = face.append("g").attr("id", "clock-hands");
    hands
      .selectAll("line")
      .data(handData)
      .enter()
      .append("line")
      .attr("class", d => d.type + "-hand")
      .attr("x1", 0)
      .attr("y1", d => d.balance || 0)
      .attr("x2", 0)
      .attr("y2", d => d.length)
      .attr("transform", d => `rotate(${d.scale(d.value)})`);
    face
      .append("g")
      .attr("id", "face-overlay")
      .append("circle")
      .attr("class", "hands-cover")
      .attr("x", 0)
      .attr("y", 0)
      .attr("r", clockRadius / 20);
  }
  function moveHands() {
    const sel = d3
      .select("#clock-hands-final")
      .selectAll("line")
      .data(handData)
      .transition();
    if (fancySecondsOFF) sel.ease(d3.easeElastic.period(0.5));
    sel.attr("transform", d => `rotate(${d.scale(d.value)})`);
  }
  function updateData() {
    handData[0].value = !fancySecondsOFF ? Math.floor(selectedExactN * 10) : decTimeN[0];
    handData[1].value = !fancySecondsOFF ? Math.floor(selectedExactN * 10 % 1 * 100) : decTimeN.slice(2, 4);
    handData[2].value = !fancySecondsOFF ? selectedExactN * 10 % 1 * 100 % 1 * 100 : decTimeN.slice(4, 6);
  }
  const svg = d3
    .create("svg")
    .attr("viewBox", [0, 0, w, h])
    .style("max-width", `${width / 2.1}px`)
    .attr("class", "analogclock")
    .attr("id", "midclock");
  svg
    .append("text")
    .text(`-${decTimeN}-${selectedZone}`)
    .attr("x", clockRadius + margin)
    .attr("y", clockRadius * 2 + margin * 2.1)
    .attr("text-anchor", "middle")
    .attr("font-size", 32)
    .attr("font-family", "monospace");
  drawClock();
  // Animation
  const interval = setInterval(
    () => {
      updateData();
      moveHands();
    },
    !fancySecondsOFF ? 10 : 864
  );
  invalidation.then(() => clearInterval(interval));
  return svg.node();
}
```

```{ojs}
//| echo: false
//| column: margin
//| class: clock
//| label: sunclock
// https://observablehq.com/@ldgrp/apple-watch-solar-dial-simulation
{
  const radius = 200;
  const width = radius * 2;
  const height = radius * 2;
  //let _minutes = 0;
  const svg = d3
    .create("svg")
    .attr("id", "btmclock")
    .attr("viewBox", [0, 0, width, height])
    .style("margin-top", "1px")
    .style("max-width", "200px");
  const face = svg
    .append("g")
    .attr("transform", `translate(${width / 2}, ${height / 2})`);
  for (const angle of angles) {
    const arc = d3
      .arc()
      .innerRadius(0)
      .outerRadius(radius)
      .startAngle(angle.start)
      .endAngle(angle.end);
    face.append("path").attr("d", arc).attr("fill", angle.color);
  }
  const sun = face
    .append("circle")
    .attr("r", 15)
    .attr("cx", 125 * -sin(astDegMapPlot))
    .attr("cy", 125 * cos(astDegMapPlot))
    .style("fill", "white");
  const ringContainer = svg
    .append("g")
    .attr("transform", `translate(${width / 2}, ${height / 2})`);
  const ring = ringContainer
    .append("circle")
    .attr("r", 125)
    .style("opacity", 0.2)
    .style("fill", "transparent")
    .style("stroke", "white")
    .style("stroke-width", 3);
  const events = [
    data.astronomicalSunrise,
    data.astronomicalSunset,
    data.nauticalSunrise,
    data.nauticalSunset,
    data.civilSunrise,
    data.civilSunset,
    data.sunrise,
    data.sunset,
    data.solarNoon
  ];
  for (const e of events) {
    ringContainer
      .append("circle")
      .attr("r", 5)
      .attr("cx", 125 * Math.sin(e))
      .attr("cy", 125 * -Math.cos(e))
      .style("opacity", 0.4)
      .style("fill", "white");
  }
  const digitalClock = svg
    .append("g")
    .attr(
      "transform",
      `translate(${width / 2 + 45 * sin(astDegMapPlot)}, ${
        height / 2 + 45 * -cos(astDegMapPlot)
      })`
    );
  const digitalClockBase = digitalClock
    .append("circle")
    .attr("r", 100)
    .style("opacity", 0.21)
    .style("fill", "white");
//  const digitalClockTicks = digitalClock
//    .selectAll(".digital-clock-tick")
//    .data(d3.range(0, 60))
//    .enter()
//    .append("line")
//    .attr("class", "digital-clock-tick")
//    .attr("x1", 0)
//    .attr("x2", 0)
//    .attr("y1", 100 - 5)
//    .attr("y2", 100 - 10)
//    .attr("stroke", (d) => (d > seconds ? "black" : "white"))
//    .attr("stroke-width", "3")
//    .attr("stroke-linecap", "round")
//    .style("mix-blend-mode", "luminance")
//    .style("opacity", 0.6)
//    .attr("transform", (d) => `rotate(${180 + d * 6})`);
  const clockText = digitalClock
    .append("text")
    .attr("y", 25)
    .attr("fill", "white")
    .attr("text-anchor", "middle")
    .attr("font-family", "Helvetica, Arial, sans-serif")
    .style("opacity", 1)
    .attr("font-weight", 600)
    .attr("font-size", "75px")
    .text(astDecMapPlot.toFixed(2));
  const ticks = face
    .selectAll(".tick")
    .data(d3.range(0, 20))
    .enter()
    .append("line")
    .attr("class", "tick")
    .attr("x1", 0)
    .attr("x2", 0)
    .attr("y1", radius - 5)
    .attr("y2", radius - 20)
    .attr("stroke", "white")
    .attr("stroke-width", "3")
    .attr("stroke-linecap", "round")
    .style("mix-blend-mode", "screen")
    .style("opacity", 1)
    .attr("transform", (d) => `rotate(${d * 18})`);
  const minuteTicks = face
    .selectAll(".tick")
    .data(d3.range(0, 200))
    .enter()
    .append("line")
    .attr("class", "tick")
    .attr("x1", 0)
    .attr("x2", 0)
    .attr("y1", radius - 5)
    .attr("y2", radius - 15)
    .attr("stroke", "white")
    .attr("stroke-width", "2")
    .attr("stroke-linecap", "round")
    .style("mix-blend-mode", "screen")
    .style("opacity", 0.6)
    .attr("transform", (d) => `rotate(${d * 2})`);
  const hourLabels = face
    .selectAll(".hour-label")
    .data(d3.range(0, 10))
    .enter()
    .append("text")
    .attr("class", "hour-label")
    .attr("x", (d) => 160 * -Math.sin(toRadians((d / 10) * 360)))
    .attr("y", (d) => 160 * Math.cos(toRadians((d / 10) * 360)) + 12)
    .attr("fill", "white")
    .attr("text-anchor", "middle")
    .attr("font-family", "Helvetica, Arial, sans-serif")
    .attr("font-weight", 600)
    .attr("font-size", "38px")
    .style("opacity", 0.7)
    .text((d) => (String(d)));
  return svg.node();
}
```
:::

