```{ojs}
//| echo: false
//| label: iobinput
//| column: margin
//| class: freqcomponent
// https://observablehq.com/@austinkeeton/sounds
viewof iobs = Inputs.range([34, 9999], { step: 1,  value: 380, label: "Iobs" })
```

```{ojs}
//| echo: false
//| label: iobplayer
//| column: margin
//| class: freqcomponent
// https://observablehq.com/@austinkeeton/sounds
Play((t) => Math.sin(iobs / .864 * t * 2 * Math.PI), .864)
```

| Note    | i      | z    | Color                  | Ti        | nz      |
| ------- | ------ | ---- | ---------------------- | --------- | ------- |
| A4      | 380.16 | 1.93 | [ff6400]{.colorff6400} | 417.99    | 1549.20 |

```{ojs}
//| echo: false
//| label: iobpiano
//| class: freqcomponent
// https://observablehq.com/@austinkeeton/sounds
{
  const width = 960;
  const keyHeight = 270;
  const height = 320;
  const whiteKeys = 13;
  const blackKeys = [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1];
  const whiteOffsets = blackKeys.reduce((x, y) => x.concat([y + x[x.length - 1] + 1]), [0]);
  const svg = html`<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}"
    xmlns="http://www.w3.org/2000/svg"></svg>`;
  function wrap(elem, note) {
    const freq = 440 * Math.pow(2, note / 12);
    // Play a note when clicked.
    const oscillator = ctx.createOscillator();
    const gain = ctx.createGain();
    gain.gain.value = 0;
    oscillator.type = 'square';
    oscillator.frequency.setValueAtTime(freq, ctx.currentTime);
    oscillator.connect(gain);
    gain.connect(ctx.destination);
    oscillator.start();
    elem.style.cursor = 'pointer';
    elem.onclick = () => {
      gain.gain.cancelScheduledValues(ctx.currentTime);
      gain.gain.linearRampToValueAtTime(0.1, ctx.currentTime + 0.05);
      gain.gain.linearRampToValueAtTime(0, ctx.currentTime + 0.3);
    };
    return elem;
  }
  // Draw the white keys.
  for (let i = 0; i <= whiteKeys - 1; i++) {
    svg.appendChild(wrap(html`<svg><rect x="${width * i / whiteKeys}" y="0" width="${width / whiteKeys}" height="${keyHeight}" fill="white" stroke="black" stroke-width="2"/></svg>`, whiteOffsets[i] - 19));
    svg.appendChild(html`<svg><text style="user-select: none;" x="${width * (i + 0.5) / whiteKeys}" y="${keyHeight + 12}" font-family="sans-serif" id="pianotext" font-size="24" text-anchor="middle">${String.fromCharCode('A'.charCodeAt(0) + (i + 3) % 7)}</text></svg>`);
    svg.appendChild(html`<svg><text style="user-select: none;" x="${width * (i + 0.5) / whiteKeys}" y="${keyHeight + 24}" font-family="sans-serif" id="pianotext" font-size="24" text-anchor="middle">${Math.round(freqs[i])}</text></svg>`);
  }
  // Draw the black keys.
  for (let i = 0; i <= whiteKeys - 2; i++) {
    if (blackKeys[i] == 1) {
      svg.appendChild(wrap(html`<svg><rect x="${width * ((i + 0.65) / whiteKeys)}" y="0" width="${width / whiteKeys * 0.7}" height="${keyHeight * 0.55}" fill="black" stroke="black" stroke-width="2"/></svg>`, whiteOffsets[i] - 19 + blackKeys[i]));
    }
  }
  return svg;
}
```

```{ojs}
//| echo: false
//| label: wavinput
//| column: margin
//| class: freqcomponent
// https://observablehq.com/@spattana/color-from-wavelength-and-correlated-temperature
viewof wavelength = Inputs.range([950, 1950], {label: "nz", value: 1549, step: 1})
```

:::{.column-margin fig-align="center" style="text-align:center;" .freqcomponent}
\${wavehexHsl}
:::

