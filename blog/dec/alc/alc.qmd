---
title: 'Decalc'
author: 'Martin Laptev'
format: html
echo: false
observable: 'https://observablehq.com/@dec/alc'
---

```{ojs}
md`# Decalc`
```

```{ojs}
md`This [notebook](/@dec/alc) demonstrates Dec timekeeping calculations. Dec is a [measurement system](https://en.wikipedia.org/wiki/System_of_units_of_measurement#:~:text=a%20collection%20of%20units%20of%20measurement%20and%20rules%20relating%20them%20to%20each%20other) that [I](https://maptv.github.io) created to measure‚è≥time,üìçposition,üß≠orientation,üìêangles, andüîÑcycles in [turns](https://en.wikipedia.org/wiki/Turn_%28angle%29#:~:text=a%20unit%20of%20plane%20angle%20measurement%20equal%20to%202%CF%80%C2%A0radians%2C%20360%C2%A0degrees) ([${tex`\tau`}](https://en.wikipedia.org/wiki/Turn_%28angle%29#:~:text=the%20Greek%20letter,to%20one%20turn)) instead of months, weeks, hours, minutes, seconds, and degrees. For time measurement, Dec uses days and years, which are turns of a [celestial body](https://en.wikipedia.org/wiki/Astronomical_object#:~:text=a%20single%2C%20tightly%20bound%2C%20contiguous%20entity) on [its axis](https://en.wikipedia.org/wiki/Axial_tilt#:~:text=the%20imaginary%20line%20that%20passes%20through%20both%20the%20north%20pole%20and%20south%20pole) and around [the point it orbits](https://en.wikipedia.org/wiki/Barycenter_%28astronomy%29#:~:text=the%20point%20about%20which%20the%20bodies%20orbit), respectively.`
```

```{ojs}
clock = {
  const svg = d3
    .create("svg")
    .attr("viewBox", [-69, -10, 139, 23])
    .style("max-width", "350px")
    .attr("id", "clock");

  svg
    .append("text")
    .text(selectedDeco)
    .attr("text-anchor", "middle")
    .attr("font-size", 12)
    .attr("font-family", "monospace");
  
  svg
    .append("text")
    .text(selectedDecoM)
    .attr("text-anchor", "middle")
    .attr("font-size", 12)
    .attr("dy", 12)
    .attr("font-family", "monospace");
  return svg.node();
}
```

```{ojs}
DOM.download(() => serialize(clock), `${micro}_dec_timestamp`, "Save as SVG")
```

```{ojs}
md`The pair of Dec [timestamps](https://en.wikipedia.org/wiki/Timestamp#:~:text=a%20sequence%20of%20characters%20or%20encoded%20information%20identifying%20when%20a%20certain%20event%20occurred) above display the [ordinalüóìÔ∏èdate](https://en.wikipedia.org/wiki/Ordinal_date#:~:text=the%20multiples%20of%20a%20day%2C%20called%20day%20of%20the%20year) and the [Ô∏èdecidayüï∞Ô∏èÔ∏ètime](https://en.wikipedia.org/wiki/Decimal_time#Fractional_days:~:text=dividing%20the%20day%20into%2010%20decidays) since the start (top) and until the end (bottom) of the current year in the Dec time zone selected by the red‚≠ïÔ∏ècircle on the [solar terminator](https://en.wikipedia.org/wiki/Terminator_%28solar%29#:~:text=a%20moving%20line%20that%20divides%20the%20daylit%20side%20and%20the%20dark%20night%20side%20of%20a%20planetary%20body)üó∫Ô∏èmap below. Press the button beneath the timestamps to save them as an [SVG](https://en.wikipedia.org/wiki/SVG#:~:text=an%20XML%2Dbased%20vector%20image%20format%20for%20defining%20two%2Ddimensional%20graphics) file with a [filename](https://en.wikipedia.org/wiki/Filename#:~:text=a%20name%20used%20to%20uniquely%20identify%20a%20computer%20file%20in%20a%20file%20system) which starts with a Dec timestamp that uses [micro](https://en.wikipedia.org/wiki/Micro-#:~:text=a%20unit%20prefix%20in%20the%20metric%20system%20denoting%20a%20factor%20of%2010%E2%88%926%20%28one%20millionth%29)days instead of [deci](https://en.wikipedia.org/wiki/Deci-#:~:text=a%20decimal%20unit%20prefix%20in%20the%20metric%20system%20denoting%20a%20factor%20of%20one%20tenth)days.`
```

```{ojs}
md`Unlike the timestamp pair, the filename prefix timestamp does not include a time zone at the end because it always shows time in Zone 0, the first of the ten Dec time zones, numbered 0 through 9, on the map. The leftmost‚Üïvertical line on the map is [Meridian 0](https://en.wikipedia.org/wiki/126th_meridian_west#:~:text=a%20line%20of%20longitude%20that%20extends%20from%20the%20North%20Pole%20across%20the%20Arctic%20Ocean%2C%20North%20America%2C%20the%20Pacific%20Ocean%2C%20the%20Southern%20Ocean%2C%20and%20Antarctica%20to%20the%20South%20Pole), the Dec [International Date Line](https://en.wikipedia.org/wiki/International_Date_Line#:~:text=the%20line%20between%20the%20South%20and%20North%20Poles%20that%20is%20the%20boundary%20between%20one%20calendar%20day%20and%20the%20next) and [prime meridian](https://en.wikipedia.org/wiki/Prime_meridian#:~:text=an%20arbitrarily%2Dchosen%20meridian%20%28a%20line%20of%20longitude%29%20in%20a%20geographic%20coordinate%20system%20at%20which%20longitude%20is%20defined%20to%20be%200%C2%B0), which cuts across the Atlantic Ocean just West ofüåçAfrica and marks the start of Zone 0.`
```

```{ojs}
md`Centered directly beneath the map is a second pair of Dec [timestamps](https://en.wikipedia.org/wiki/Timestamp#:~:text=a%20sequence%20of%20characters%20or%20encoded%20information%20identifying%20when%20a%20certain%20event%20occurred) which are identical to the first pair except that they display the[‚òÄÔ∏èsolarüï∞Ô∏èÔ∏ètime](https://en.wikipedia.org/wiki/Solar_time#:~:text=the%20hour%20angle%20of%20the%20mean%20sun%20plus%2012%20hours) at the [longitude](https://en.wikipedia.org/wiki/Longitude#:~:text=geographic%20coordinate%20that%20specifies%20the%20east%E2%80%93west%20position%20of%20a%20point%20on%20the%20surface%20of%20the%20Earth%2C%20or%20another%20celestial%20body) of the red‚≠ïÔ∏ècircle on the map instead of zonal time in the selected time zone. Timestamps that display solar time do not include time zones, because solar time varies by longitude, according to [the equation of time](https://en.wikipedia.org/wiki/Equation_of_time), regardless of time zone.`
```

```{ojs}
md`The plot to the lower left of the map visualizes the amount of daylight (yellow) throughout every day of the year (y-axis) at the latitude of the red‚≠ïÔ∏ècircle on the map. The‚ÜïÔ∏èvertical position of the red<font color=red>‚Äî</font>line and the‚ÜîÔ∏èhorizontal position of the redüî¥dot on the daylight plot determine the ordinal date and the solar time shown by the Dec timestamp pair above theüåêglobe to the lower right of the daylight plot.`
```

```{ojs}
viewof location = worldMapCoordinates([162, 0], [width, Math.round((21 / 40) * width)])
```

```{ojs}
html`
<br>
<center class="solarTimestamp" id="firstTimestamp">${solarDeco}</center>
<center class="solarTimestamp" id="lastTimestamp">${solarDeco1}</center>
<style>
.solarTimestamp {
  font-size: ${fontSize * 1.3}px;
  margin: 0px 0px -5px 0px;
  padding: 0px 0px 0px 0px;
  text-anchor: middle;
  font-family: monospace;
}
#firstTimestamp {
  margin:  ${-5 + (width < 790) * 21}px 0px 0px 0px;
}
#lastTimestamp {
  margin: 0px 0px ${-35 + Number(width < 400) * 8 + (width < 800) * 16}px 0px;
}
</style>`
```

```{ojs}
app = {
  const svg = d3.select(DOM.svg(width, height));
  
  svg.style("user-select", "none")
     .style("-webkit-user-select", "none");
  
  const margin = {top: 0, left: 16, right: 16, bottom: 0, inner: 32};
  const contentWidth = width - margin.left - margin.right - margin.inner;
  const columnWidth = contentWidth / 2;
    
  let selection = {
    date: this != null ? this.value.date : new Date(),
    hour: this != null ? this.value.hour : new Date().getHours()
  }
  
  const renderPlot = () => {
    svg.selectAll("#plot *").remove();
    svg.select("#plot").call(daylightPlot, {
      width: columnWidth,
      height: height - margin.top - margin.bottom,
      year: new Date().getFullYear(),
      latitude: location[1],
      defaultDate: selection.date,
      defaultHour: selection.hour
    })
  }
  
  const renderSolarSystem = () => {
    svg.selectAll("#solar-system *").remove();
    svg.selectAll("#solar-system").call(solarSystem,
                                        columnWidth,
                                        location,
                                        selection.date,
                                        selection.hour);
  }
  
  const renderGlobe = () => {
    svg.selectAll("#globe *").remove();
    svg.selectAll("#globe").call(globe, { width: columnWidth / 1.08, location, ...selection });
  }
  
  const setSelection = (newSelection, forceRender = false) => {
    const prev = {...selection};
    selection = newSelection;
    
    svg.node().value = selection;
    
    if (forceRender) {
      renderPlot();
      renderSolarSystem();
      renderGlobe();
    } else if (prev.hour !== selection.hour || prev.date !== selection.date) {
      renderSolarSystem();
      renderGlobe();
    }
  }
  
  const plot = svg.append("g")
    .attr("id", "plot")
    .attr("transform", `translate(${margin.left})`);
  
  svg.append("g")
    .attr("id", "solar-system")
    .attr("transform", `translate(${margin.left + margin.inner + columnWidth}, ${margin.top + height / 7.5})`);
  
  svg.append("g")
    .attr("id", "globe")
    .attr("transform", `translate(${margin.left + margin.inner + 1.04 * columnWidth}, ${margin.top + height / 3.05 + Number(columnWidth < 300) * 16})`);

  setSelection(selection, true);
  
  const handleDateHourChange = ({ target, detail: { date, hour }}) => {
    if (date != null && hour != null) setSelection({...selection, date, hour});
  }
  
  svg.node().addEventListener(EventType.DateHourChange, handleDateHourChange, false);
    
  return svg.node();
}
```

```{ojs}
md`### Timestamps
Dec timestamps are based on this equation:<br>
${tex`\large\colorbox{yellow}{$y$}{=}\lfloor\colorbox{yellow}{$y$}\rfloor{+}\frac{\colorbox{cyan}{$\overrightarrow{d}$}{-}\colorbox{lime}{$\overrightarrow{z}$}}{\colorbox{orange}{$n$}}{=}\lfloor\colorbox{yellow}{$y$}\rfloor{+}1{-}\frac{\colorbox{pink}{$\overleftarrow{d}$}{+}\colorbox{GreenYellow}{$\overleftarrow{z}$}}{\colorbox{orange}{$n$}}`}, where
- ${tex`\colorbox{yellow}{$y$}`} is the [decimal years](https://en.wikipedia.org/wiki/Decimal_time#Fractional_days:~:text=decimal%20years%20divide%20the%20year%20into%2010%C2%A0equal%20parts) since the start of Year 0, the Dec [epoch](https://en.wikipedia.org/wiki/Epoch#:~:text=an%20instant%20in%20time%20chosen%20as%20the%20origin%20of%20a%20particular%20calendar%20era),${tex`\textcolor{white}{\colorbox{white}{$\overrightarrow{d}$}}`}
- ${tex`\lfloor\colorbox{yellow}{$y$}\rfloor`} is ${tex`\colorbox{yellow}{$y$}`} [floored](https://en.wikipedia.org/wiki/Floor_and_ceiling_functions#:~:text=the%20greatest%20integer%20less%20than%20or%20equal%20to%20x) to an integer to remove its [decimal part](https://en.wikipedia.org/wiki/Fractional_part#:~:text=the%20excess%20beyond%20that%20number%27s%20integer%20part),${tex`\textcolor{white}{\colorbox{white}{$\overrightarrow{d}$}}`}
- ${tex`\colorbox{orange}{$n$}`} is the total [decidays](https://en.wikipedia.org/wiki/Decimal_time#Fractional_days:~:text=dividing%20the%20day%20into%2010%20decidays) in the year (${tex`\colorbox{cyan}{$\overrightarrow{d}$}{+}\colorbox{pink}{$\overleftarrow{d}$}`} ),
- ${tex`\colorbox{cyan}{$\overrightarrow{d}$}`} is the decidays since the start of the year (${tex`\colorbox{orange}{$n$}{-}\colorbox{pink}{$\overleftarrow{d}$}`}),
- ${tex`\colorbox{pink}{$\overleftarrow{d}$}`} is the decidays until the end of the year (${tex`\colorbox{orange}{$n$}{-}\colorbox{cyan}{$\overrightarrow{d}$}`}),
- ${tex`\colorbox{lime}{$\overrightarrow{z}$}`} is the [zero-based index](https://en.wikipedia.org/wiki/Zero-based_numbering#:~:text=a%20way%20of%20numbering%20in%20which%20the%20initial%20element%20of%20a%20sequence%20is%20assigned%20the%20index%C2%A00) of the Dec time zone, and${tex`\textcolor{white}{\colorbox{white}{$\overrightarrow{d}$}}`}
- ${tex`\colorbox{GreenYellow}{$\overleftarrow{z}$}`} is the last digit of the [negative index](https://en.wikipedia.org/wiki/Array_slicing#:~:text=specify%20an%20offset%20from%20the%20end%20of%20the%20array%20in%20that%20dimension) of the Dec time zone.${tex`\textcolor{white}{\colorbox{white}{$\overrightarrow{d}$}}`}`
```

```{ojs}
md`The current values in the equation for **Zone ${zone}**, the Dec time zone that most closely matches the [UTC offset](https://en.wikipedia.org/wiki/UTC_offset#:~:text=difference%20in%20hours%20and%20minutes%20between%20Coordinated%20Universal%20Time%20%28UTC%29%20and%20local%20solar%20time) provided by your web browser, are:<br>
${tex`\large\texttt{\colorbox{yellow}{${fracYear.toFixed(8)}}=\colorbox{yellow}{${decoYearP}}+}\frac{\texttt{\colorbox{cyan}{${decoDateTimeP}}-\colorbox{lime}{${zone}}}}{\texttt{\colorbox{orange}{${nDaysInYear}}}}\texttt{=\colorbox{yellow}{${decoYearM}}-}\frac{\texttt{\colorbox{pink}{${decoDateM}${decoTimeM}}+\colorbox{GreenYellow}{${Math.abs((zone - 10) % 10)}}}}{\texttt{\colorbox{orange}{${nDaysInYear}}}}`}`
```

```{ojs}
md`Each of the 3 expressions in the equation above represents a different type of timestamp. From left to right, the timestamp types are [T plus](https://en.wikipedia.org/wiki/Countdown#:~:text=typically%20shown%20as%20%22-,T%20plus,-.%22%20The%20adjacent%20picture) (`T+`), [T minus](https://en.wikipedia.org/wiki/Countdown#:~:text=began%20at%20Launch-,minus%205%20days,-in%20coordination%20with) (`T-`), and decimal year. `T+` and `T-` timestamps remain in an [unsolved](https://en.wikipedia.org/wiki/Equation_solving#:~:text=to%20solve%20an%20equation%20is%20to%20find%20its%20solutions) or [unsimplified](https://en.wikipedia.org/wiki/Simplification#:~:text=the%20process%20of%20replacing%20a%20mathematical%20expression%20by%20an%20equivalent%20one%2C%20that%20is%20simpler) state so that we can see the ordinal date, the time of day, and the time zone. In contrast, decimal year timestamps simplify all of the `T+` or `T-` timestamp components down to a single number and can thus be considered the solution to the equation above.
`
```

```{ojs}
md``T+` and `T-` timestamps typically omit ${tex`\colorbox{orange}{$n$}`}, because it is not needed to identify a specific point in time, only has 2 possible values (3650 or 3660), remains constant for long periods of time (366, 1095, or 2920 days), and can be determined by using the Gregorian calendar [leap year rule](https://en.wikipedia.org/wiki/Leap_year#:~:text=Every%20year%20that%20is%20exactly%20divisible%20by%20four%20is%20a%20leap%20year%2C%20except%20for%20years%20that%20are%20exactly%20divisible%20by%20100%2C%20but%20these%20centurial%20years%20are%20leap%20years%20if%20they%20are%20exactly%20divisible%20by%20400) on the subsequent year (${tex`\lfloor\colorbox{yellow}{$y$}\rfloor{+}1`}), taken from the `T-` timestamp, instead of the current year (${tex`\lfloor\colorbox{yellow}{$y$}\rfloor`}), obtained from the `T+` timestamp:<br>
${tex`\small\colorbox{orange}{$n$}=\begin{cases}366&{\text{if } (\lfloor \colorbox{yellow}{$y$}\rfloor+1)\text{ \% }4=0\land(\lfloor \colorbox{yellow}{$y$}\rfloor+1)\text{ \% }100\neq0\lor(\lfloor \colorbox{yellow}{$y$}\rfloor+1)\text{ \% }400=0;}\\365&{\text{otherwise.}}\end{cases}`}`
```

```{ojs}
md`In addition to omitting ${tex`\colorbox{orange}{$n$}`}, we can make timestamps easier to read by using spaces, emojis, letters, or Chinese characters to separate ordinal dates and decimal times:<br> 

${htl.html`
<ul style="line-height:1em;margin:0;padding:1em;list-style-type:none;font-family=monospace;">
 <li><code style="line-height:.8em;margin: 0;padding:0em;font-size:1.2em;">${tex`\texttt{\colorbox{yellow}{${decoYearP}}{+}\colorbox{cyan}{${decoDateP}}}`} ${tex`\texttt{\colorbox{cyan}{${decoTimeP}}{-}\colorbox{lime}{${zone}}}`}</code></li>
  <li><code style="line-height:.8em;margin: 0;padding:0em;font-size:1.2em;">${tex`\texttt{\colorbox{yellow}{${decoYearM}}{-}\colorbox{pink}{${decoDateM}}}`} ${tex`\texttt{\colorbox{pink}{${decoTimeM}}{+}\colorbox{GreenYellow}{${Math.abs((zone - 10) % 10)}}}`}</code></li>
</ul>
`}
${htl.html`
<ul style="line-height:1em;margin:0;padding:1em;list-style-type:none;font-family=monospace;">
 <li><code style="line-height:.8em;margin: 0;padding:0em;font-size:1.2em;">${tex`\texttt{\colorbox{yellow}{${decoYearP}}{+}\colorbox{cyan}{${decoDateP}}}`}d${tex`\texttt{\colorbox{cyan}{${decoTimeP}}{-}\colorbox{lime}{${zone}}}`}</code></li>
  <li><code style="line-height:.8em;margin: 0;padding:0em;font-size:1.2em;">${tex`\texttt{\colorbox{yellow}{${decoYearM}}{-}\colorbox{pink}{${decoDateM}}}`}d${tex`\texttt{\colorbox{pink}{${decoTimeM}}{+}\colorbox{GreenYellow}{${Math.abs((zone - 10) % 10)}}}`}</code></li>
</ul>
`}
${htl.html`
<ul style="line-height:1em;margin:0;padding:1em;list-style-type:none;">
  <li><code style="line-height:.8em;margin: 0;padding:0em;font-size:1.2em;font-family=monospace;">
    Ô∏è${tex`\texttt{\colorbox{yellow}{${decoYearP}}{+}\colorbox{cyan}{${decoDateP}}}`}üóìÔ∏èÔ∏è${tex`\texttt{\colorbox{cyan}{${decoTimeP}}{-}\colorbox{lime}{${zone}}}`}</code></li>
  <li><code style="line-height:.8em;margin: 0;padding:0em;font-size:1.2em;">
    ${tex`\texttt{\colorbox{yellow}{${decoYearM}}{-}\colorbox{pink}{${decoDateM}}}`}üóì${tex`\texttt{\colorbox{pink}{${decoTimeM}}{+}\colorbox{GreenYellow}{${Math.abs((zone - 10) % 10)}}}`}</code></li> </ul>
`}
${htl.html`
<ul style="line-height:1em;margin:0;padding:1em;list-style-type:none;">
  <li><code style="line-height:.8em;margin: 0;padding:0em;font-size:1.2em;font-family=monospace;">
    Ô∏è${tex`\texttt{\colorbox{yellow}{${decoYearP}}{+}\colorbox{cyan}{${decoDateP}}}`}Êó•Ô∏èÔ∏è${tex`\texttt{\colorbox{cyan}{${decoTimeP}}{-}\colorbox{lime}{${zone}}}`}</code></li>
<li><code style="line-height:.8em;margin: 0;padding:0em;font-size:1.2em;">
  ${tex`\texttt{\colorbox{yellow}{${decoYearM}}{-}\colorbox{pink}{${decoDateM}}}`}Êó•${tex`\texttt{\colorbox{pink}{${decoTimeM}}{+}\colorbox{GreenYellow}{${Math.abs((zone - 10) % 10)}}}`}</code></li>
</ul>
`}`
```

```{ojs}
md`Chinese characters can also replace `+` and `-` as delimiters in Dec timestamps, but this approach makes differentiating between `T+` and `T-` timestamps more difficult:<br> 
${htl.html`
<ul style="line-height:1em;margin:0;padding:1em;list-style-type:none;">
  <li><code style="line-height:.8em;margin: 0;padding:0em;font-size:1.2em;font-family=monospace;">
    Ô∏è${tex`\texttt{\colorbox{yellow}{${decoYearP}}Âπ¥\colorbox{cyan}{${decoDateP}}Êó•\colorbox{cyan}{${decoTimeP}}Êõ¥\colorbox{lime}{${zone}}}Âå∫`}</code></li>
<li><code style="line-height:.8em;margin: 0;padding:0em;font-size:1.2em;">
  ${tex`\texttt{\colorbox{yellow}{${decoYearM}}Âπ¥\colorbox{pink}{${decoDateM}}}`}${tex`\texttt{Êó•\colorbox{pink}{${decoTimeM}}Êõ¥\colorbox{GreenYellow}{${Math.abs((zone - 10) % 10)}}}Âå∫`}</code></li>
</ul>
`}`
```

```{ojs}
md`As an alternative to delimiters and to better fit narrow spaces, such as the screens of mobile devices like smartphones, Dec timestamps can be split into 2 or 4 lines:
${htl.html`
<ul style="line-height:1em;margin:0;padding:1em;list-style-type:none;">
 <li><code style="line-height:.8em;margin: 0;padding:0em;font-size:1.2em;">${tex`\texttt{\colorbox{yellow}{${decoYearP}}{+}\colorbox{cyan}{${decoDateP}}}`}<br>${tex`\texttt{\colorbox{cyan}{${decoTimeP}}{-}\colorbox{lime}{${zone}}}`}</code></li><br>
  <li><code style="line-height:.8em;margin: 0;padding:0em;font-size:1.2em;">${tex`\texttt{\colorbox{yellow}{${decoYearM}}{-}\colorbox{pink}{${decoDateM}}}`}<br>${tex`\texttt{\colorbox{pink}{${decoTimeM}}{+}\colorbox{GreenYellow}{${Math.abs((zone - 10) % 10)}}}`}</code></li>
</ul>
`}
${htl.html`
<ul style="line-height:1em;margin:0;padding:1em;list-style-type:none;">
 <li><code style="line-height:.8em;margin: 0;padding:0em;font-size:1.2em;">${tex`\texttt{\colorbox{yellow}{${decoYearP}}}`}<br>${tex`\texttt{+\colorbox{cyan}{${decoDateP}}}`}<br>${tex`\texttt{\colorbox{cyan}{${decoTimeP.slice(0, 4)}}}`}<br>${tex`\texttt{\colorbox{cyan}{${decoTimeP.slice(4, 8)}}-}`}<font style="background-color:#45FF20">${tex`\texttt{${zone}}`}</font></code></li><br>
 <li><code style="line-height:.8em;margin: 0;padding:0em;font-size:1.2em;">${tex`\texttt{\colorbox{yellow}{${decoYearM}}}`}<br>${tex`\texttt{-\colorbox{pink}{${decoDateM}}}`}<br>${tex`\texttt{\colorbox{pink}{${decoTimeM.slice(0, 4)}}}`}<br>${tex`\texttt{\colorbox{pink}{${decoTimeM.slice(4, 8)}}+}`}<font style="background-color:#BDFF3F">${tex`\texttt{${Math.abs((zone - 10) % 10)}}`}</font></code></li><br>
</ul>
`}`
```

```{ojs}
md`### Time intervals
Dec timestamps can be combined into pairs to create Dec intervals. The timestamps in an intervals are called the minuend and the subtrahend and can be thought of as the start and end of the interval even though the minuend does not necessarily have to be earlier in time than the subtrahend. Minuends and subtrahends are always tied to a time zone. A mismatch in minuend and subtrahend time zones may indicate movement across time zones during the interval.`
```

```{ojs}
md`The time in between the minuend and subtrahend of an internal is referred to as its difference (diff), duration, distance, or delta. Unlike minuends and subtrahends, interval diffs are not associated with any specific time zone. The simplest form of the equation for Dec intervals uses decimal years:
${tex`\colorbox{yellow}{$y_m$}{-}\colorbox{yellow}{$y_s$}{=}\colorbox{yellow}{$y_d$}`}, where ${tex`\colorbox{yellow}{$y_m$}`} is the minuend, ${tex`\colorbox{yellow}{$y_s$}`} is the subtrahend, and ${tex`\colorbox{yellow}{$y_d$}`} is the difference.`
```

```{ojs}
md`For example, the time that has passed since the [UNIX epoch](https://en.wikipedia.org/wiki/Epoch_%28computing%29#:~:text=Thursday%201%20January%201970%2000%3A00%3A00%20UT) is calculated by subtracting the UNIX epoch timestamp from the current timestamp:<br>
${tex`\large\texttt{\colorbox{yellow}{${fracYear0.toFixed(8)}}{-}\colorbox{yellow}{${yearsUnix.toFixed(8)}}{=}\colorbox{yellow}{${diffYearsUnix.toFixed(8)}}}`}<br>`
```

```{ojs}
md`To convert decimal years into floored years and decimal decidays, we can multiply the decimal portion of the decimal years above by the number of decidays in the minuend year (${tex`\colorbox{orange}{$n_m$}`}) or the subtrahend year (${tex`\colorbox{orange}{$n_s$}`}), according to this equation: ${tex`\large\lfloor\colorbox{yellow}{$y_m$}\rfloor{+}\frac{\colorbox{cyan}{$\overrightarrow{d_m}$}{-}\colorbox{lime}{$\overrightarrow{z_m}$}}{\colorbox{orange}{$n_m$}}{-}\lfloor\colorbox{yellow}{$y_s$}\rfloor{+}\frac{\colorbox{cyan}{$\overrightarrow{d_s}$}{-}\colorbox{lime}{$\overrightarrow{z_s}$}}{\colorbox{orange}{$n_s$}}{=}\lfloor\colorbox{yellow}{$y_d$}\rfloor{+}\frac{\colorbox{cyan}{$\overrightarrow{d_d}$}}{\begin{cases}\colorbox{orange}{$n_m$}&{\text{if } \colorbox{yellow}{$y_m$} \geq \colorbox{yellow}{$y_s$};}\\\colorbox{orange}{$n_s$}&{\text{otherwise.}}\end{cases}}`}`
```

```{ojs}
md`The UNIX example minuend and subtrahend are both in Zone 0 (${tex`\colorbox{lime}{$\overrightarrow{z_m}$}{=}\colorbox{lime}{$\overrightarrow{z_s}$}{=}0`}):<br>
${tex`\large\texttt{\colorbox{yellow}{${decoYearP}}{+}}\frac{\texttt{\colorbox{cyan}{${(yd0[1] * 10).toFixed(4)}}}}{\texttt{\colorbox{orange}{${nDaysInYear0}}}}\texttt{{-}\colorbox{yellow}{1969}{+}}\frac{\texttt{\colorbox{cyan}{3060.0000}}}{\texttt{\colorbox{orange}{3650}}}\texttt{{=}\colorbox{yellow}{${flooredDiffYearsUnix.toString().padStart(4, "0")}}{+}}\frac{\texttt{\colorbox{cyan}{${diffDoty.toFixed(4).padStart(9, "0")}}}}{\texttt{\colorbox{orange}{${nDaysInYear0}}}}`}`
```

```{ojs}
md`If we omit ${tex`\colorbox{orange}{$n_m$}`} and ${tex`\colorbox{orange}{$n_s$}`}, the remaining parts of the interval equation fit on 1 line:
${tex`\large\texttt{\colorbox{yellow}{${yd0[0]}}+\colorbox{cyan}{${(yd0[1] * 10).toFixed(4)}}-\colorbox{yellow}{1969}+\colorbox{cyan}{3060.0000}=\colorbox{yellow}{${flooredDiffYearsUnix.toString().padStart(4, "0")}}+\colorbox{cyan}{${diffDoty.toFixed(4).padStart(9, "0")}}}`}`
```

```{ojs}
md`Interval diffs that are less than a year, such as the time since the previous and until the next midnight,  are best displayed as decimal decidays without a year:
${tex`\large\texttt{\colorbox{yellow}{${yd0[0]}}+\colorbox{cyan}{${(yd0[1] * 10).toFixed(4)}}-\colorbox{yellow}{${yd0[0]}}+\colorbox{cyan}{${(Math.floor(yd0[1]) * 10).toFixed(4)}}=\colorbox{cyan}{+${(yd0[1] % 1 * 10).toFixed(4)}}}`}
${tex`\large\texttt{\colorbox{yellow}{${yd0[0]}}+\colorbox{cyan}{${(yd0[1] * 10).toFixed(4)}}-\colorbox{yellow}{${yd0[0]}}+\colorbox{cyan}{${(Math.floor(yd0[1] + 1) * 10).toFixed(4)}}=\colorbox{pink}{${(yd0[1] % 1 * 10 - 10).toFixed(4)}}}`}`
```

```{ojs}
md`If we want to use the same minuend for more than 1 interval, we can use an extended equation that has multiple expressions which are equal to the minuend:<br>
${tex`\large\texttt{\colorbox{yellow}{${yd0[0]}}+\colorbox{cyan}{${(yd0[1] * 10).toFixed(4)}}=\colorbox{yellow}{${yd0[0]}}+\colorbox{cyan}{${(Math.floor(yd0[1]) * 10).toFixed(4)}}+\colorbox{cyan}{${(yd0[1] % 1 * 10).toFixed(4)}}=\colorbox{yellow}{${yd0[0]}}+\colorbox{cyan}{${(Math.floor(yd0[1] + 1) * 10).toFixed(4)}}-\colorbox{pink}{${Math.abs(yd0[1] % 1 * 10 - 10).toFixed(4)}}}`}`
```

```{ojs}
md`The equation above can be organized into date and diff columns using line breaks:<br>
${tex`\large\texttt{\colorbox{yellow}{${yd0[0]}}+\colorbox{cyan}{${(yd0[1] * 10).toFixed(4)}}=}`}<br>
${tex`\large\texttt{\colorbox{yellow}{${yd0[0]}}+\colorbox{cyan}{${(Math.floor(yd0[1]) * 10).toFixed(4)}}+\colorbox{cyan}{${(yd0[1] % 1 * 10).toFixed(4)}}=}`}<br>
${tex`\large\texttt{\colorbox{yellow}{${yd0[0]}}+\colorbox{cyan}{${(Math.floor(yd0[1] + 1) * 10).toFixed(4)}}-\colorbox{pink}{${Math.abs(yd0[1] % 1 * 10 - 10).toFixed(4)}}}`}<br>`
```

```{ojs}
md`A subtrahend that is later in time than its minuend yields a negative diff. When the minuend is the current time, a negative diff will count down like a `T-` timestamp until it reaches zero and then starts to count up as a positive diff like a `T+` timestamp.`
```

```{ojs}
md`### Decimal day timestamps 
Just like decimal year timestamps, decimal (deci)day timestamps can represent a specific point in time as a single number. Decimal (deci)day timestamps greatly facilitate arithmetic with ordinal dates and times of day, such as finding the difference between two timestamps and changing time zones. Unlike decimal year timestamps, decimal (deci)day timestamps include the time of day.`
```

```{ojs}
md`To isolate the time of day from `T+`, `T-`, and decimal (deci)day timestamps, we [keep only the remainder](https://en.wikipedia.org/wiki/Modulo#:~:text=returns%20the%20remainder%20or%20signed%20remainder%20of%20a%20division) after dividing days by 1 or dividing decidays by 10. Similarly, to isolate ordinal dates from `T+`, `T-`, and decimal (deci)day timestamps, we floor after dividing days by 1 or dividing decidays by 10. Before adding a time zone to a decimal day timestamp (${tex`\texttt{\colorbox{cyan}{${dz[0].toFixed(5)}}}`}), we have to multiply the timestamp by 10 to convert it into a decimal deciday timestamp (${tex`\texttt{\colorbox{cyan}{${(dz[0] * 10).toFixed(4)}}-\colorbox{lime}{${dz[1]}}}`}). We can then improve the readability of the decimal deciday timestamp (${tex`\texttt{\colorbox{cyan}{${dz[0].toString().slice(0, 6)}}üóì\colorbox{cyan}{${(dz[0] * 10).toFixed(4).slice(6)}}-\colorbox{lime}{${dz[1]}}üï∞}`}) by using emojis to separate the date (${tex`\texttt{\colorbox{cyan}{${dz[0].toString().slice(0, 6)}}üóì}`}) from the time (${tex`\texttt{\colorbox{cyan}{${(dz[0] * 10).toFixed(4).slice(6)}}-\colorbox{lime}{${dz[1]}}üï∞}`}).`
```

```{ojs}
md`We can obtain ${tex`\lfloor\colorbox{yellow}y\rfloor`} and  ${tex`\colorbox{cyan}{$\overrightarrow{d}$}`} from decimal day timestamps via [calculations](https://howardhinnant.github.io/date_algorithms.html#civil_from_days) developed by [Howard Hinnant](https://howardhinnant.github.io). I walk through these and other calculations from Howard Hinnant's [date library](https://howardhinnant.github.io/date/date.html) in the [Dec calendar (Decalendar) notebook](/@dec/al) and demonstrate how they can be adapted to extend Dec beyond the Gregorian calendar to other calendar systems, notably the [Solar](https://en.wikipedia.org/wiki/Solar_Hijri_calendar) and [Lunar](https://en.wikipedia.org/wiki/Islamic_calendar) [Hijiri](https://en.wikipedia.org/wiki/Hijrah#:~:text=The%20year%20in%20which%20the%20Hijrah%20took%20place%20is%20also%20identified%20as%20the%20epoch%20of%20the%20Lunar%20Hijri%5Ba%5D%20and%20Solar%20Hijri%20calendars) and [Martian](https://en.wikipedia.org/wiki/Timekeeping_on_Mars) calendars. The various decalendars can have different [epochs](https://en.wikipedia.org/wiki/Epoch#:~:text=an%20instant%20in%20time%20chosen%20as%20the%20origin%20of%20a%20particular%20calendar%20era), [year lengths](https://en.wikipedia.org/wiki/Year#:~:text=the%20mean%20length%20of%20the%20Gregorian%20calendar%20year%20is%20365.2425%20days), and [leap year rules](https://en.wikipedia.org/wiki/Leap_year#:~:text=Every%20year%20that%20is%20exactly%20divisible%20by%20four%20is%20a%20leap%20year%2C%20except%20for%20years%20that%20are%20exactly%20divisible%20by%20100%2C%20but%20these%20centurial%20years%20are%20leap%20years%20if%20they%20are%20exactly%20divisible%20by%20400). It should be possible to decalenderize any [rule-based](https://en.wikipedia.org/wiki/Rule-based_system#:~:text=a%20computer%20system%20in%20which%20domain%2Dspecific%20knowledge%20is%20represented%20in%20the%20form%20of%20rules%20and%20general%2Dpurpose%20reasoning%20is%20used%20to%20solve%20problems%20in%20the%20domain) calendar system, but [lunisolar](https://en.wikipedia.org/wiki/Lunisolar_calendar#:~:text=indicates%20both%20the%20Moon%20phase%20and%20the%20time%20of%20the%20solar%20year) decalendars are likely to be more difficult to implement than [solar](https://en.wikipedia.org/wiki/Solar_calendar#:~:text=a%20calendar%20whose%20dates%20indicate%20the%20season) and [lunar](https://en.wikipedia.org/wiki/Lunar_calendar#:~:text=a%20calendar%20based%20on%20the%20monthly%20cycles%20of%20the%20Moon%27s%20phases) decalendars because of the complexity of their [intercalation](https://en.wikipedia.org/wiki/Intercalation_%28timekeeping%29#:~:text=the%20insertion%20of%20a%20leap%20day%2C%20week%2C%20or%20month%20into%20some%20calendar%20years%20to%20make%20the%20calendar%20follow%20the%20seasons%20or%20moon%20phases) calculations.`
```

```{ojs}
md`### Date conversion`
```

```{ojs}
md`Gregorian decalendar leap years are always the year before a Gregorian calendar leap year, because leap day is always the last day of leap years (Day 365) in Decalendar and the 60th day of leap years in the Gregorian calendar. Starting 60 days earlier than the Gregorian calendar aligns the Gregorian decalendar with the [meterological seasons](https://en.wikipedia.org/wiki/Season#:~:text=groupings%20of%20three%20whole%20months%20as%20identified%20by%20the%20Gregorian%20calendar) and is required for unequivocal conversion between Gregorian calendar and decalendar dates in both common and leap years. Press the Play button below to cycle through every Gregorian decalendar `T+` ordinal date and see the corresponding Gregorian calendar months and day of the months.`
```

```{ojs}
viewof scrubberDoty = Scrubber(numbers, {autoplay: false, alternate: true, delay: 86.4, loopDelay: 864, format: y => "", inputStyle: "display:none;"})
```

```{ojs}
viewof inputDoty = Inputs.range([0, 365], {value: 306, step: 1, label: "day of the year"});
```

```{ojs}
viewof monthInput = transformInput(
    Inputs.range([1, 12], {step: 1, label: "month"}),
    {bind: viewof inputDoty, transform: doty2month, invert: month2doty}
);
```

```{ojs}
viewof dotmInput = transformInput(
    Inputs.range([1, 31], {step: 1, label: "day of the month"}),
    {bind: viewof inputDoty, transform: doty2dotm, invert: (x => Math.floor(( 153 * (
        viewof monthInput.value > 2
        ? viewof monthInput.value - 3
        : viewof monthInput.value + 9) + 2
    ) / 5 + x - 1
))});
```

```{ojs}
md`The animation above demonstrates that Dec can identify any Gregorian calendar date with a single number that is 1 to 3 digits long. Dec has no use for months or days of the month, but keeps Gregorian calendar dates readily available if necessary. If we ever need to convert `T+` ordinal dates to and from Gregorian calendar dates without modern technology, we can use the Dec finger counting method for Gregorian calendar date conversion, which is similar to the [knuckle mnemonic](https://en.wikipedia.org/wiki/Knuckle_mnemonic#:~:text=a%20mnemonic%20device%20for%20remembering%20the%20number%20of%20days%20in%20the%20months%20of%20the%20Julian%20and%20Gregorian%20calendars).`
```

```{ojs}
md`The numbers above the fingers in the image below indicate the Dec date of the last day of each month. The thumb, middle finger, and pinky represent months with 31 days, whereas the index and ring fingers stand for 30-day months. The last day of March is Day 30 even though March has 31 days, because Dec dates are zero-based.`
```

```{ojs}
html`<?xml version="1.0" encoding="UTF-8"?>
<svg enable-background="new 0 0 838.332 516.951" overflow="visible" i:pageBounds="-124 716 716 124" i:rulerOrigin="124 -124" i:viewOrigin="-123.4824 642.7246" version="1.1" viewBox="0 0 531.09 260.36" xml:space="preserve" xmlns="http://www.w3.org/2000/svg" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:i="&#38;#38;ns_ai;" xmlns:ns0="&#38;#38;ns_sfw;" xmlns:ns5="&#38;#38;ns_vars;" xmlns:pdf="http://ns.adobe.com/pdf/1.3/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:x="adobe:ns:meta/" xmlns:xap="http://ns.adobe.com/xap/1.0/" xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/" xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
	<metadata>
		<ns0:sfw>
			<ns0:slices/>
			<ns0:sliceSourceBounds x="-123.482" y="125.773" width="838.332" height="516.951" bottomLeftOrigin="true"/>
		</ns0:sfw>
		<ns5:variableSets>
			<ns5:variableSet locked="none" varSetName="binding1">
				<ns5:variables/>
				<ns5:sampleDataSets/>
			</ns5:variableSet>
		</ns5:variableSets>
<x:xmpmeta x:xmptk="XMP toolkit 3.0-29, framework 1.6">
<rdf:RDF>

 <rdf:Description rdf:about="uuid:4dd77512-294e-11df-b0f4-001f5b3c2ba8">
  <pdf:Producer>Adobe PDF library 6.66</pdf:Producer>
 </rdf:Description>

 <rdf:Description rdf:about="uuid:4dd77512-294e-11df-b0f4-001f5b3c2ba8">
 </rdf:Description>

 <rdf:Description rdf:about="uuid:4dd77512-294e-11df-b0f4-001f5b3c2ba8">
 </rdf:Description>

 <rdf:Description rdf:about="uuid:4dd77512-294e-11df-b0f4-001f5b3c2ba8">
  <xap:ModifyDate>2010-03-06T19:45:34Z</xap:ModifyDate>
  <xap:CreateDate>2008-03-27T12:07:11+01:00</xap:CreateDate>
  <xap:CreatorTool>Illustrator</xap:CreatorTool>
  <xap:MetadataDate>2008-03-27T16:40:58+01:00</xap:MetadataDate>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType="Resource">
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>256</xapGImg:width>
     <xapGImg:height>160</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA
AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK
DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f
Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAoAEAAwER
AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA
AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB
UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE
1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ
qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy
obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp
0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo
+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9KaVpWlnS7MmzgJMEdT6
afyD2xVFfonSv+WKD/kUn9MVd+idK/5YoP8AkUn9MVd+idK/5YoP+RSf0xV36J0r/lig/wCRSf0x
V36J0r/lig/5FJ/TFXfonSv+WKD/AJFJ/TFXfonSv+WKD/kUn9MVd+idK/5YoP8AkUn9MVd+idK/
5YoP+RSf0xV5L/zjFaWl1+Wjy3MMc8v6Uvl5yqHagl2FWB6Yq9a/ROlf8sUH/IpP6Yq79E6V/wAs
UH/IpP6Yq79E6V/yxQf8ik/pirv0TpX/ACxQf8ik/pirv0TpX/LFB/yKT+mKu/ROlf8ALFB/yKT+
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</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about="uuid:4dd77512-294e-11df-b0f4-001f5b3c2ba8">
  <xapMM:DocumentID>uuid:db0c57f4-dad3-11dc-b3c0-003065732f80</xapMM:DocumentID>
 </rdf:Description>

 <rdf:Description rdf:about="uuid:4dd77512-294e-11df-b0f4-001f5b3c2ba8">
  <dc:format>image/svg+xml</dc:format>
  <dc:title>
   <rdf:Alt>
    <rdf:li xml:lang="x-default">keyboard.ai</rdf:li>
   </rdf:Alt>
  </dc:title>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>

			</metadata>
		<g transform="translate(275 25.452)"><path d="m104.83 115.39c6.404-2.645-8.252-81.105-10.439-94.6-3.708-22.874 20.403-27.359 24.219-4.037 2.169 13.249 13.406 91.545 19.883 92.723" fill="#cff" i:knockout="Off"/><path d="m77.572 137.87c6.351-6.543-36.331-73.707-43.051-83.852-10.573-15.957 10.541-26.844 19.885-13.199 5.886 8.594 44.021 77.211 50.424 74.564" fill="#c0dbfc" i:knockout="Off"/><path d="m61.288 163.93c-12.38-12.268-42.161-34.516-50.955-40.324-16.419-10.842-8.151-28.834 9.289-19.791 11.855 6.146 51.601 40.602 57.951 34.057" fill="#befc75" i:knockout="Off"/><path d="m180.69 146.27c2.476-0.215 5.742-3.523 10.661-9.414 26.474-31.705 55.667-34.346 63.162-17.869-17.557 10.336-45.352 33.574-50.785 56.691" fill="#e9befc" i:knockout="Off"/><path d="m138.49 109.47c6.477 1.178 26.692-67.762 31.054-82.859 5.918-20.479 27.516-13.883 22.155 6.934-3.078 11.955-15.788 56.023-17.843 84.938" fill="#ff6" i:knockout="Off"/><path d="m71.329 145.83c21.224-35.646 55.968-37.51 81.838-34.816" fill="#fff" stroke="#000" stroke-linecap="round" stroke-linejoin="bevel" stroke-width="2.2742" i:knockout="Off"/><path d="m203.41 176.23c-4.001 17.025-13.369 32.77-24.92 43.295-12.778 11.641-27.906 5.285-41.088 9.52-9.404 3.021-17.9 6.805-28.715 3.371-16.236-5.16-38.154-46.174-42.324-61.123-2.028-7.266-45.412-39.908-56.348-47.131-16.419-10.84-8.151-28.834 9.288-19.791 11.856 6.146 51.603 40.602 57.953 34.059 6.351-6.545-36.33-73.709-43.052-83.854-10.573-15.957 10.54-26.844 19.885-13.198 5.885 8.593 44.021 77.212 50.424 74.565 6.404-2.646-8.252-81.106-10.44-94.601-3.708-22.874 20.403-27.36 24.22-4.038 2.168 13.25 13.406 91.547 19.882 92.723 6.477 1.178 26.693-67.762 31.055-82.859 5.918-20.478 27.515-13.883 22.154 6.934-3.876 15.059-23.037 81.07-16.934 103.57 3.519 12.973 6.746 11.52 16.583-0.262 26.473-31.705 55.666-34.346 63.162-17.869-17.557 10.335-45.353 33.575-50.785 56.691z" fill="none" stroke="#000" stroke-linecap="round" stroke-linejoin="bevel" stroke-width="2.2742" i:knockout="Off"/></g><g transform="translate(-275.39 26.165)"><path d="m425.07 115.77c-6.403-2.646 8.252-81.105 10.439-94.6 3.707-22.875-20.402-27.36-24.219-4.038-2.17 13.249-13.407 91.546-19.884 92.724" fill="#cff" i:knockout="Off"/><path d="m452.33 138.26c-6.352-6.543 36.33-73.709 43.051-83.852 10.572-15.957-10.541-26.845-19.885-13.199-5.885 8.592-44.021 77.211-50.424 74.564" fill="#c0dbfc" i:knockout="Off"/><path d="m468.61 164.32c12.381-12.268 42.16-34.516 50.957-40.324 16.418-10.842 8.15-28.834-9.289-19.791-11.855 6.146-51.602 40.602-57.951 34.057" fill="#befc75" i:knockout="Off"/><path d="m349.21 146.65c-2.476-0.213-5.742-3.521-10.661-9.414-26.474-31.703-55.667-34.346-63.162-17.867 17.557 10.336 45.352 33.574 50.786 56.691" fill="#e9befc" i:knockout="Off"/><path d="m391.41 109.86c-6.477 1.178-26.692-67.763-31.054-82.86-5.917-20.478-27.515-13.882-22.155 6.934 3.078 11.954 15.788 56.024 17.843 84.938" fill="#ff6" i:knockout="Off"/><path d="m327.84 175.51c4.001 17.025 13.369 32.77 24.919 43.293 12.779 11.641 27.907 5.285 41.089 9.52 9.405 3.021 17.901 6.807 28.714 3.371 16.238-5.16 38.154-46.172 42.324-61.123 2.029-7.266 45.414-39.908 56.35-47.131 16.418-10.84 8.15-28.834-9.289-19.791-11.855 6.148-51.602 40.602-57.951 34.059s36.33-73.709 43.051-83.852c10.572-15.958-10.541-26.846-19.885-13.199-5.885 8.592-44.021 77.211-50.424 74.564-6.403-2.646 8.253-81.105 10.439-94.6 3.707-22.875-20.402-27.361-24.219-4.039-2.169 13.25-13.406 91.547-19.883 92.725s-26.692-67.764-31.054-82.861c-5.918-20.477-27.516-13.882-22.155 6.934 3.877 15.059 23.037 81.072 16.934 103.57-3.519 12.971-6.746 11.518-16.583-0.264-26.474-31.703-55.667-34.346-63.162-17.869 17.557 10.337 45.352 33.576 50.785 56.693z" fill="none" stroke="#000" stroke-linecap="round" stroke-linejoin="bevel" stroke-width="2.2742" i:knockout="Off"/><path d="m459.92 145.12c-21.223-35.648-55.966-37.51-81.839-34.818" fill="#fff" stroke="#000" stroke-linecap="round" stroke-linejoin="bevel" stroke-width="2.2742" i:knockout="Off"/></g>
		
	<text transform="translate(-4 18.354)" fill="#000000" style="shape-inside:url(#rect109);white-space:pre" xml:space="preserve"/><text x="19.67388" y="115.98518" fill="#000000" font-family="Lato" font-size=".9em" text-align="center" text-anchor="middle" xml:space="preserve"><tspan x="19.67388" y="115.98518">March</tspan><tspan x="19.67388" y="130.9852">30</tspan></text><text x="74.959618" y="22.081184" fill="#000000" font-family="Lato" font-size=".9em" text-align="center" text-anchor="middle" xml:space="preserve"><tspan x="74.959618" y="22.081184">April</tspan><tspan x="74.959618" y="37.149948">60</tspan></text><text x="151.14308" y="8.9851837" fill="#000000" font-family="Lato" font-size=".9em" text-align="center" text-anchor="middle" xml:space="preserve"><tspan x="151.14308" y="8.9851837">May</tspan><tspan x="151.14308" y="24.053947">91</tspan></text><text x="214.66582" y="42.985184" fill="#000000" font-family="Lato" font-size=".9em" text-align="center" text-anchor="middle" xml:space="preserve"><tspan x="214.66582" y="42.985184">June</tspan><tspan x="214.66582" y="58.053947">121</tspan></text><text x="235.86626" y="108.98518" fill="#000000" font-family="Lato" font-size=".9em" text-align="center" text-anchor="middle" xml:space="preserve"><tspan x="235.86626" y="108.98518">July</tspan><tspan x="235.86626" y="124.05395">152</tspan></text><text x="501.76001" y="115.98518" fill="#000000" font-family="Ewka" text-align="center" text-anchor="middle" xml:space="preserve"><tspan x="501.76001" y="115.98518"/></text><text x="295.30399" y="108.98518" fill="#000000" font-family="Lato" font-size=".9em" text-align="center" text-anchor="middle" xml:space="preserve"><tspan x="295.30399" y="108.98518">August</tspan><tspan x="295.30399" y="124.05395">183</tspan></text><text x="317.61273" y="43.081184" fill="#000000" font-family="Lato" font-size=".9em" text-align="center" text-anchor="middle" xml:space="preserve"><tspan x="317.61273" y="43.081184">September</tspan><tspan x="317.61273" y="58.149948">213</tspan></text><text x="381.24997" y="9.1171875" fill="#000000" font-family="Lato" font-size=".9em" text-align="center" text-anchor="middle" xml:space="preserve"><tspan x="381.24997" y="9.1171875">October</tspan><tspan x="381.24997" y="24.185951">244</tspan></text><text x="459.61121" y="21.985184" fill="#000000" font-family="Lato" font-size=".9em" text-align="center" text-anchor="middle" xml:space="preserve"><tspan x="459.61121" y="21.985184">November</tspan><tspan x="459.61121" y="37.053947">274</tspan></text><text x="500.43457" y="85.985184" fill="#000000" font-family="Lato" font-size=".9em" text-align="center" text-anchor="middle" xml:space="preserve"><tspan x="500.43457" y="85.985184">December</tspan><tspan x="500.43457" y="101.05395">305</tspan><tspan x="500.43457" y="116.12271">January</tspan><tspan x="500.43457" y="131.19147">336</tspan></text><text x="515.56207" y="226.96729" fill="#ffffff" font-family="Lato" font-size=".9em" font-size="592px" stroke="#000000" stroke-linejoin="round" stroke-width=".378" text-align="center" text-anchor="middle" xml:space="preserve"><tspan x="515.56207" y="226.96729"/></text></svg>`
```

```{ojs}
md`The [southward equinox](https://en.wikipedia.org/wiki/September_equinox#:~:text=the%20moment%20when%20the%20Sun%20appears%20to%20cross%20the%20celestial%20equator%2C%20heading%20southward) falls on Day 205 in Zone 0 in Year 2024, 2025, 2028, and 2029. We can determine that Day 205 is September 22 by subtracting the Dec date of the last day of August (Day 183), the month preceding September, from the southward equinox Dec date: ${tex`205-183=22`}. To convert in the other direction, we would sum the Dec date and the Gregorian calendar day of the month: ${tex`183+22=205`}.`
```

```{ojs}
md`Coincidentally, the start of Day 183 marks the midpoint of leap years. The midpoint of the year marks a Decalendar holiday called Dyad Deciday that celebrates the moment when the `T+` and `T-` timestamp decidays have the same absolute value. The Dec interval below shows how many decidays are left until the next Dyad Deciday.`
```

```{ojs}
md`${tex`\large\texttt{\colorbox{yellow}{${yd[0]}}+\colorbox{cyan}{${(yd[1] * 10).toFixed(4)}}=}`}<br>
${tex`\large\texttt{\colorbox{yellow}{${daysUntilMidThisYear < 0 ? yd[0] : yd[0] + 1}}+\colorbox{cyan}{${(daysUntilMidThisYear < 0 ? nDaysInYear / 2 : nDaysNextYear / 2).toFixed(4)}}-\colorbox{pink}{${Math.abs(daysUntilMidThisYear < 0 ? daysUntilMidThisYear * 10: daysUntilMidNextYear * 10).toFixed(4)}}}`}<br>`
```

```{ojs}
md`If a date is close to the end of the month, it may be easier to work backwards from the last day of the month. First, we calculate the days left in the month. Then, we  we can subtract the days remaining in the month from the total number of days in the month to get the Gregorian calendar date or from the Dec date of the last day in the month to obtain the Dec date. In the southward equinox example, there are 8 days before the end of the month (${tex`213-205=8`} or ${tex`30-22=8`}). Therefore, the Gregorian calendar date is ${tex`30-8=22`} and the Dec date is ${tex`213-8=205`}.`
```

```{ojs}
md`The examples above all demonstrate how `T+` ordinal dates can be easily converted to Gregorian calendar dates regardless of the year. In contrast to `T+` ordinal dates, conversion of `T-` ordinal dates is dependent on the year, because `T-` ordinal dates start from Day -366 in leap years and from Day -365 in common years. Nevertheless, `T-` timestamps consistently display the time left in the year and thus can help us understand the transition between years. If we allow a `T-` timestamp to continue after the end of the year, it becomes the `T+` timestamp for the subsequent year.`
```

```{ojs}
md`Press the Play button or move the slider below to see two different ways of showing the switch from the current year to the following year. The two timestamps below become identical at midnight of Day 0, the midpoint of the animation. The `T+` timestamp on the left jumps suddenly to Day 0, changing most of its digits, while the `T-` timestamp on the right progresses smoothly, only changing its sign and last digit.`
```

```{ojs}
Scrubber([...Array(11).keys()].map(n => `${(n < 5 ? lazyYear: lazyYear + 1)}+${((lazyNdays - .0005 + n / 10000) % 3650).toFixed(4).padStart(9, "0")} ${lazyYear + 1}${(n < 5 ? "-": "+")}${Math.abs(-.0005 + n / 10000).toFixed(4).padStart(9, "0")}`), {autoplay: false, delay: 864, inputStyle: `width:${width / 4}px;`})
```

```{ojs}
md`The two timestamps above do not include any kind of separator between the date and time of day to emphasize that the date and time of day are a single number. Dec dates also consist of 2 numbers. The first two digits of a Dec date provide the dek and the last digit is the day of the dek. Deks are groups of 10 days that fulfill the role of months and weeks in Decalendar. Similarly, days of the dek are the Decalendar equivalent of the day of the month and the day of the week. Therefore, the dek and the day of the dek in Decalendar dates do the work of 4 numbers: the month and day of the month in [calendar dates](https://en.wikipedia.org/wiki/ISO_8601#Calendar_dates) and the week and day of the week in [week dates](https://en.wikipedia.org/wiki/ISO_8601#Week_dates).`
```

```{ojs}
md`The two timestamps above do not include any kind of separator between the date and time of day to emphasize that the date and time of day are a single number. Dec dates also consist of 2 numbers. The first two digits of a Dec date provide the dek and the last digit is the day of the dek. Deks are groups of 10 days that fulfill the role of months and weeks in Decalendar. Similarly, days of the dek are the Decalendar equivalent of the day of the month and the day of the week. Therefore, the dek and the day of the dek in Decalendar dates do the work of 4 numbers: the month and day of the month in [calendar dates](https://en.wikipedia.org/wiki/ISO_8601#Calendar_dates) and the week and day of the week in [week dates](https://en.wikipedia.org/wiki/ISO_8601#Week_dates).`
```

```{ojs}
md`Each dek consists of 2 groups of 5 days called pents which follow a sequence of workdays and restdays called a pently schedule. The pently schedules visualized in the bar chart below all split up workdays symmetrically, so that the time before work is equal to the time after work, and keep the amount time of spent at work constant at 1.2 days per pent, despite having different numbers of workdays per pent. You can switch between the different pently schedules by clicking the radio buttons below, create a custom schedule using the [interval sliders](https://observablehq.com/@mootari/range-slider#example_observable) beneath the radio buttons, and then click the Download‚¨áÔ∏èbutton below the chart to get the schedule as a CSV file.`
```

```{ojs}
viewof schedule = Inputs.radio([2, 3, 4, 5], {label: "Workdays per pent", value: 3})
```

```{ojs}
viewof intervals = Inputs.form([
  interval([0, 1], {step: .01, value: [.3, .7], label: '0 or 5', width: 195, format: ([start, end]) => start === end ? "" : `${formatDecimal(start)}: ${formatDecimal(end)}`}),
  interval([0, 1], {step: .01, value: [.3, .7], label: '1 or 6', width: 195, format: ([start, end]) => start === end ? "" : `${formatDecimal(start)}: ${formatDecimal(end)}`}),
  interval([0, 1], {step: .01, value: [.3, .7], label: '2 or 7', width: 195, format: ([start, end]) => start === end ? "" : `${formatDecimal(start)}: ${formatDecimal(end)}`}),
  interval([0, 1], {step: .01, value: [0, 0], label: '3 or 8', width: 195, format: ([start, end]) => start === end ? "" : `${formatDecimal(start)}: ${formatDecimal(end)}`}),
  interval([0, 1], {step: .01, value: [0, 0], label: '4 or 9', width: 195, format: ([start, end]) => start === end ? "" : `${formatDecimal(start)}: ${formatDecimal(end)}`}),
])
```

```{ojs}
pentBar = Plot.plot({
  x: {label: "Day of the dek", labelOffset: 36, labelArrow: true, labelAnchor: "center"},
  style: {fontSize: "16px"},
  marginBottom: 40,
  width: width,
  className: "pentbar",
  color: {scheme: "Set1", legend: "swatches", reverse: true, className: "pentbarlegend"},
  y: {label: "Proportion of the day", domain: [1, 0], tickPadding: 3, tickSize: 4},
  marks: [
  Plot.barY(durations, {x: "label", y: "duration", fill: "group"}),
  Plot.textY(
      durations,
      Plot.stackY(
        Plot.groupX(
          { y: "first", text: "first",
          },
          {
            x: "label",
            z: "group",
            y: "duration",
            text: (d) => (d.duration < .0001 ? null : formatDecimal(d.duration)),
            fill: "white",
            stroke: "black",
            fontSize: 28,
          }
        )
      )
    ),
  ]})
```

```{ojs}
viewof filename = Inputs.text({label: "Filename", placeholder: "Enter the filename", value: `schedule${schedule}.csv`})
```

```{ojs}
button(durations, filename)
```

```{ojs}
md`Unlike pently schedules, the weekly schedule is asymmetric and divides up workdays into proportions that are easier to express as fractions: ${tex`\frac{3}{8}=.375`}, ${tex`\frac{1}{3}=.\overline3`}, and ${tex`\frac{7}{24}=.291\overline6`}. In contrast, pently schedules divide each workday into simple proportions that are easily expressed as [terminating decimal](https://en.wikipedia.org/wiki/Decimal#:~:text=a%20finite%20number%20of%20non%2Dzero%20digits%20after%20the%20decimal%20separator) numbers.`
```

```{ojs}
md`The Dec interval notation to the right of the interval sliders above is inspired by [slices](https://en.wikipedia.org/wiki/Array_slicing#1991:_Python) in the [Python](https://en.wikipedia.org/wiki/Python_%28programming_language%29#:~:text=a%20high%2Dlevel%2C%20general%2Dpurpose%20programming%20language). Dec intervals and Python slices are [right-open](https://en.wikipedia.org/wiki/Interval_%28mathematics%29#:~:text=open%20if%20it-,contains%20no%20maximum,-%3B%20and%20open%20if), meaning that they do not include their latest timestamp. In addition to timestamps, Dec intervals can be used for other numbers such as longitudes and latitudes. For example, the Zone 0 longitude interval can be written with milliturn (${tex`1\over1000`} turns) units as a Python slice (${tex`0{:}100`}), an inequality (${tex`0\le\lambda\lt100`}), or an interval (${tex`[0, 100)`}). Another example is the state of [Colorado](https://en.wikipedia.org/wiki/Colorado#:~:text=a%20landlocked%20state%20in%20the%20Mountain%20West%20subregion%20of%20the%20Western%20United%20States) which has a rectangular shape that can be approximated by the longitude interval ${tex`${long2turn(-109.0467).toFixed(0)}{:}${long2turn(-102.0467).toFixed(0)}`} and the latitude interval ${tex`${long2turn(36.998972).toFixed(0)}{:}${long2turn(41).toFixed(0)}`}. Dec has its own interval notation which is discussed in the [Declass notebook](/@dec/lass) but can be briefly summarized as allowing for intervals to be defined by a minuend and a subtrahend: ${tex`${long2turn(-109.0467).toFixed(0)}(${long2turn(-102.0467).toFixed(0)})`}, a minuend and a diff: ${tex`${long2turn(-109.0467).toFixed(0)}(${(long2turn(-102.0467) - long2turn(-109.0467)).toFixed(0)}.)`}, or a subtrahend and a diff: ${tex`${long2turn(-102.0467).toFixed(0)}(${(long2turn(-109.0467) - long2turn(-102.0467)).toFixed(0)}.)`}.`
```

```{ojs}
md`## Appendix`
```

```{ojs}
midThisYear = doty2dote(yd[0], nDaysInYear / 20)
```

```{ojs}
midNextYear = doty2dote(yd[0] + 1, nDaysNextYear / 20)
```

```{ojs}
daysUntilMidThisYear = dz[0] - midThisYear
```

```{ojs}
daysUntilMidNextYear = dz[0] - midNextYear
```

```{ojs}
selectedDote = unix2dote(unix, selectedZone)
```

```{ojs}
selectedDeco = dote2deco(...selectedDote, "0", true)
```

```{ojs}
unixDeco = doty2deco(3, 182.1, 0, "0", true)
```

```{ojs}
unixDecoM = doty2deco(1, 182.1, 0, "0", true, true)
```

```{ojs}
182-365
```

```{ojs}
selectedDecoM = dote2deco(...selectedDote, "0", true, true)
```

```{ojs}
selectedDoty = dote2doty(...selectedDote)
```

```{ojs}
micro = `${yd0[0]}+${Math.floor(yd0[1] * 1e6)}`
```

```{ojs}
selectedZone = long2zone(location[0])
```

```{ojs}
serialize = {
  const xmlns = "http://www.w3.org/2000/xmlns/";
  const xlinkns = "http://www.w3.org/1999/xlink";
  const svgns = "http://www.w3.org/2000/svg";
  return function serialize(svg) {
    svg = svg.cloneNode(true);
    const fragment = window.location.href + "#";
    const walker = document.createTreeWalker(svg, NodeFilter.SHOW_ELEMENT);
    while (walker.nextNode()) {
      for (const attr of walker.currentNode.attributes) {
        if (attr.value.includes(fragment)) {
          attr.value = attr.value.replace(fragment, "#");
        }
      }
    }
    svg.setAttributeNS(xmlns, "xmlns", svgns);
    svg.setAttributeNS(xmlns, "xmlns:xlink", xlinkns);
    const serializer = new window.XMLSerializer;
    const string = serializer.serializeToString(svg);
    return new Blob([string], {type: "image/svg+xml"});
  };
}
```

```{ojs}
function rasterize(svg) {
  let resolve, reject;
  const promise = new Promise((y, n) => (resolve = y, reject = n));
  const image = new Image;
  image.onerror = reject;
  image.onload = () => {
    const rect = svg.getBoundingClientRect();
    const context = DOM.context2d(rect.width, rect.height);
    context.drawImage(image, 0, 0, rect.width, rect.height);
    context.canvas.toBlob(resolve);
  };
  image.src = URL.createObjectURL(serialize(svg));
  return promise;
}
```

```{ojs}
moveLegend = {
  d3.select(pentBar)
    .select("div")
    .style("position", "relative")
    .style("left", `${width / 2 + (width < 432) * 10}px`)
    .style("top", `-${width < 422 ? 35 : 20}px`);
}
```

```{ojs}
html`<style>
  svg.pentbar > g[aria-label="y-axis label"]:has(text) {
    transform: translateY(-19px);
  }
  .pentbar {
    margin-top: -48px
  }
  .pentbarlegend-swatch {
    font-size: 1.6em;
  }
</style>`
```

```{ojs}
function interval(range = [], options = {}) {
  const [min = 0, max = 1] = range;
  const {
    step = .001,
    label = null,
    value = [min, max],
    format = ([start, end]) => `${start} ‚Ä¶ ${end}`,
    color,
    width,
    theme,
  } = options;

  const __ns__ = DOM.uid('scope').id;
  const css = `
#${__ns__} {
  font: 13px/1.2 var(--sans-serif);
  display: flex;
  align-items: baseline;
  flex-wrap: wrap;
  max-width: 100%;
  width: auto;
}
@media only screen and (min-width: 30em) {
  #${__ns__} {
    flex-wrap: nowrap;
    width: 360px;
  }
}
#${__ns__} .label {
  width: 60px;
  padding: 5px 0 4px 0;
  margin-right: .5px;
  flex-shrink: 0;
}
#${__ns__} .form {
  display: flex;
  width: 100%;
}
#${__ns__} .range {
  flex-shrink: 1;
  width: 100%;
}
#${__ns__} .range-slider {
  width: 100%;
}
  `;
  
  const $range = rangeInput({min, max, value: [value[0], value[1]], step, color, width, theme});
  const $output = html`<output>`;
  const $view = html`<div id=${__ns__}>
${label == null ? '' : html`<div class="label">${label}`}
<div class=form>
  <div class=range>
    ${$range}<div class=range-output style="display: inline-block;">${$output}</div>
  </div>
</div>
${html`<style>${css}`}
  `;

  const update = () => {
    const content = format([$range.value[0], $range.value[1]]);
    if(typeof content === 'string') $output.value = content;
    else {
      while($output.lastChild) $output.lastChild.remove();
      $output.appendChild(content);
    }
  };
  $range.oninput = update;
  update();
  
  return Object.defineProperty($view, 'value', {
    get: () => $range.value,
    set: ([a, b]) => {
      $range.value = [a, b];
      update();
    },
  });
}
```

```{ojs}
cssLength = v => v == null ? null : typeof v === 'number' ? `${v}px` : `${v}`
```

```{ojs}
theme_Flat = `
/* Options */
:scope {
  color: #3b99fc;
  width: 240px;
}

:scope {
  position: relative;
  display: inline-block;
  --thumb-size: 15px;
  --thumb-radius: calc(var(--thumb-size) / 2);
  padding: var(--thumb-radius) 0;
  margin: 2px;
  vertical-align: middle;
}
:scope .range-track {
  box-sizing: border-box;
  position: relative;
  height: 7px;
  background-color: hsl(0, 0%, 80%);
  overflow: visible;
  border-radius: 4px;
  padding: 0 var(--thumb-radius);
}
:scope .range-track-zone {
  box-sizing: border-box;
  position: relative;
}
:scope .range-select {
  box-sizing: border-box;
  position: relative;
  left: var(--range-min);
  width: calc(var(--range-max) - var(--range-min));
  cursor: ew-resize;
  background: currentColor;
  height: 7px;
  border: inherit;
}
/* Expands the hotspot area. */
:scope .range-select:before {
  content: "";
  position: absolute;
  width: 100%;
  height: var(--thumb-size);
  left: 0;
  top: calc(2px - var(--thumb-radius));
}
:scope .range-select:focus,
:scope .thumb:focus {
  outline: none;
}
:scope .thumb {
  box-sizing: border-box;
  position: absolute;
  width: var(--thumb-size);
  height: var(--thumb-size);

  background: #fcfcfc;
  top: -4px;
  border-radius: 100%;
  border: 1px solid hsl(0,0%,55%);
  cursor: default;
  margin: 0;
}
:scope .thumb:active {
  box-shadow: inset 0 var(--thumb-size) #0002;
}
:scope .thumb-min {
  left: calc(-1px - var(--thumb-radius));
}
:scope .thumb-max {
  right: calc(-1px - var(--thumb-radius));
}
`
```

```{ojs}
function randomScope(prefix = 'scope-') {
  return prefix + (performance.now() + Math.random()).toString(32).replace('.', '-');
}
```

```{ojs}
function rangeInput(options = {}) {
  const {
    min = 0,
    max = 100,
    step = 'any',
    value: defaultValue = [min, max],
    color,
    width,
    theme = theme_Flat,
  } = options;
  
  const controls = {};
  const scope = randomScope();
  const clamp = (a, b, v) => v < a ? a : v > b ? b : v;
  const html = htl.html;

  // Will be used to sanitize values while avoiding floating point issues.
  const input = html`<input type=range ${{min, max, step}}>`;
  
  const dom = html`<div class=${`${scope} range-slider`} style=${{
    color,
    width: cssLength(width),
  }}>
  ${controls.track = html`<div class="range-track">
    ${controls.zone = html`<div class="range-track-zone">
      ${controls.range = html`<div class="range-select" tabindex=0>
        ${controls.min = html`<div class="thumb thumb-min" tabindex=0>`}
        ${controls.max = html`<div class="thumb thumb-max" tabindex=0>`}
      `}
    `}
  `}
  ${html`<style>${theme.replace(/:scope\b/g, '.'+scope)}`}
</div>`;

  let value = [], changed = false;
  Object.defineProperty(dom, 'value', {
    get: () => [...value],
    set: ([a, b]) => {
      value = sanitize(a, b);
      updateRange();
    },
  });

  const sanitize = (a, b) => {
    a = isNaN(a) ? min : ((input.value = a), input.valueAsNumber);
    b = isNaN(b) ? max : ((input.value = b), input.valueAsNumber);
    return [Math.min(a, b), Math.max(a, b)];
  }
  
  const updateRange = () => {
    const ratio = v => (v - min) / (max - min);
    dom.style.setProperty('--range-min', `${ratio(value[0]) * 100}%`);
    dom.style.setProperty('--range-max', `${ratio(value[1]) * 100}%`);
  };

  const dispatch = name => {
    dom.dispatchEvent(new Event(name, {bubbles: true}));
  };
  const setValue = (vmin, vmax) => {
    const [pmin, pmax] = value;
    value = sanitize(vmin, vmax);
    updateRange();
    // Only dispatch if values have changed.
    if(pmin === value[0] && pmax === value[1]) return;
    dispatch('input');
    changed = true;
  };
  
  setValue(...defaultValue);
  
  // Mousemove handlers.
  const handlers = new Map([
    [controls.min, (dt, ov) => {
      const v = clamp(min, ov[1], ov[0] + dt * (max - min));
      setValue(v, ov[1]);
    }],
    [controls.max, (dt, ov) => {
      const v = clamp(ov[0], max, ov[1] + dt * (max - min));
      setValue(ov[0], v);
    }],
    [controls.range, (dt, ov) => {
      const d = ov[1] - ov[0];
      const v = clamp(min, max - d, ov[0] + dt * (max - min));
      setValue(v, v + d);
    }],
  ]);
  
  // Returns client offset object.
  const pointer = e => e.touches ? e.touches[0] : e;
  // Note: Chrome defaults "passive" for touch events to true.
  const on  = (e, fn) => e.split(' ').map(e => document.addEventListener(e, fn, {passive: false}));
  const off = (e, fn) => e.split(' ').map(e => document.removeEventListener(e, fn, {passive: false}));
  
  let initialX, initialV, target, dragging = false;
  function handleDrag(e) {
    // Gracefully handle exit and reentry of the viewport.
    if(!e.buttons && !e.touches) {
      handleDragStop();
      return;
    }
    dragging = true;
    const w = controls.zone.getBoundingClientRect().width;
    e.preventDefault();
    handlers.get(target)((pointer(e).clientX - initialX) / w, initialV);
  }
  
  
  function handleDragStop(e) {
    off('mousemove touchmove', handleDrag);
    off('mouseup touchend', handleDragStop);
    if(changed) dispatch('change');
  }
  
  invalidation.then(handleDragStop);
  
  dom.ontouchstart = dom.onmousedown = e => {
    dragging = false;
    changed = false;
    if(!handlers.has(e.target)) return;
    on('mousemove touchmove', handleDrag);
    on('mouseup touchend', handleDragStop);
    e.preventDefault();
    e.stopPropagation();
    
    target = e.target;
    initialX = pointer(e).clientX;
    initialV = value.slice();
  };
  
  controls.track.onclick = e => {
    if(dragging) return;
    changed = false;
    const r = controls.zone.getBoundingClientRect();
    const t = clamp(0, 1, (pointer(e).clientX - r.left) / r.width);
    const v = min + t * (max - min);
    const [vmin, vmax] = value, d = vmax - vmin;
    if(v < vmin) setValue(v, v + d);
    else if(v > vmax) setValue(v - d, v);
    if(changed) dispatch('change');
  };
  
  return dom;
}
```

```{ojs}
function formatDecimal(number) {
  return number == 1 ? number : (Math.round(number * 100) / 100).toString().slice(1)
}
```

```{ojs}
nested = Array.from({length: intervals.length}, (_, i) => ([
  {
  label: `${i} or ${i+5}`,
  duration: intervals[i][1] !== intervals[i][0] ? intervals[i][0] : 1,
  group: "Rest"
},
  {
  label: `${i} or ${i+5}`,
  duration: intervals[i][1]-intervals[i][0],
  group: "Work"
},
  {
  label: `${i} or ${i+5}`,
  duration: intervals[i][1] !== intervals[i][0] ? 1-intervals[i][1] : null,
  group: "Rest"
  }]))
```

```{ojs}
schedule3 = [
  {label: "0 or 5", duration: 0.3, group: "Rest"},
  {label: "0 or 5", duration: 0.4, group: "Work"},
  {label: "0 or 5", duration: 0.3, group: "Rest"},
  {label: "1 or 6", duration: 0.3, group: "Rest"},
  {label: "1 or 6", duration: 0.4, group: "Work"},
  {label: "1 or 6", duration: 0.3, group: "Rest"},
  {label: "2 or 7", duration: 0.3, group: "Rest"},
  {label: "2 or 7", duration: 0.4, group: "Work"},
  {label: "2 or 7", duration: 0.3, group: "Rest"},
  {label: "3 or 8", duration: 0, group: "Rest"},
  {label: "3 or 8", duration: 0, group: "Work"},
  {label: "3 or 8", duration: 1, group: "Rest"},
  {label: "4 or 9", duration: 0, group: "Rest"},
  {label: "4 or 9", duration: 0, group: "Work"},
  {label: "4 or 9", duration: 1, group: "Rest"},
]
```

```{ojs}
schedule2 = [
  {label: "0 or 5", duration: 0.2, group: "Rest"},
  {label: "0 or 5", duration: 0.6, group: "Work"},
  {label: "0 or 5", duration: 0.2, group: "Rest"},
  {label: "1 or 6", duration: 0.2, group: "Rest"},
  {label: "1 or 6", duration: 0.6, group: "Work"},
  {label: "1 or 6", duration: 0.2, group: "Rest"},
  {label: "2 or 7", duration: 0, group: "Rest"},
  {label: "2 or 7", duration: 0, group: "Work"},
  {label: "2 or 7", duration: 1, group: "Rest"},
  {label: "3 or 8", duration: 0, group: "Rest"},
  {label: "3 or 8", duration: 0, group: "Work"},
  {label: "3 or 8", duration: 1, group: "Rest"},
  {label: "4 or 9", duration: 0, group: "Rest"},
  {label: "4 or 9", duration: 0, group: "Work"},
  {label: "4 or 9", duration: 1, group: "Rest"},
]
```

```{ojs}
schedules = [
  [[.2, .8], [.2, .8], [0, 0], [0, 0], [0, 0]],
  [[.3, .7], [.3, .7], [.3, .7], [0, 0], [0, 0]],
  [[.35, .65], [.35, .65], [.35, .65], [.35, .65], [0, 0]],
  [[.38, .62], [.38, .62], [.38, .62], [.38, .62], [.38, .62]],
]
```

```{ojs}
set(viewof intervals, schedules[schedule-2])
```

```{ojs}
durations = [].concat(...nested)
```

```{ojs}
// https://observablehq.com/@jeremiak/download-data-button
button = (data, filename = 'data.csv') => {
  if (!data) throw new Error('Array of data required as first argument');

  let downloadData;
  if (filename.includes('.csv')) {
    downloadData = new Blob([d3.csvFormat(data)], { type: "text/csv" });
  } else {
    downloadData = new Blob([JSON.stringify(data, null, 2)], {
      type: "application/json"
    });
  }

  const size = (downloadData.size).toFixed(0);
  const button = DOM.download(
    downloadData,
    filename,
    `Download ${filename} (~${size} bytes)`
  );
  return button;
}
```

```{ojs}
yearsUnix = 1969 + 306 / 365
```

```{ojs}
diffYearsUnix = fracYear0 - yearsUnix
```

```{ojs}
flooredDiffYearsUnix = Math.floor(diffYearsUnix)
```

```{ojs}
moduloDiffYearsUnix = diffYearsUnix % 1
```

```{ojs}
diffDoty = moduloDiffYearsUnix * nDaysInYear0
```

```{ojs}
function year2dote(year = 0) {
    const cykl = Math.floor((year >= 0 ? year : year - 399) / 400),
    yotc = year - cykl * 400;
    return cykl * 146097 + yotc * 365 + Math.floor(yotc / 4) - Math.floor(yotc / 100)
}
```

```{ojs}
lazyDote = unix2dote(Date.now())
```

```{ojs}
numbers = Array.from({length: 366}, (_, i) => i)
```

```{ojs}
lazyYear = dote2doty(...lazyDote)[0]
```

```{ojs}
lazyNdays = (365 + year2leap(lazyYear + 1)) * 10
```

```{ojs}
set(viewof inputDoty, scrubberDoty)
```

```{ojs}
// https://observablehq.com/@observablehq/synchronized-inputs
function set(input, value) {
  input.value = value;
  input.dispatchEvent(new Event("input", {bubbles: true}));
}
```

```{ojs}
function doty2dotm(doty = 0) {
    const m = Math.floor((5 * doty + 2) / 153);
    return doty - Math.floor((153 * m + 2) / 5) + 1;
}
```

```{ojs}
function month2doty(month = 1) {
    return Math.floor(
        (153 * (month > 2 ? month - 3 : month + 9) + 2) / 5
)}
```

```{ojs}
new Date().getUTCFullYear() - (new Date().getMonth() < 3) + 1
```

```{ojs}
function doty2month(doty = 0) {
    const m = Math.floor((5 * doty + 2) / 153);
    return Math.floor(m < 10 ? m + 3 : m - 9);
}
```

```{ojs}
// https://observablehq.com/@juang1744/transform-input/1
transformInput = function(target, {bind: source, transform = identity, involutory = false, invert = involutory ? transform : inverse(transform)} = {}){
  if (source === undefined) {
    source = target;
    target = html`<div>${source}</div>`;
  }
  function sourceInputHandler() {
    target.removeEventListener("input", targetInputHandler);
    setTransform(target).to(transform(source.value)).andDispatchEvent();
    target.addEventListener("input", targetInputHandler);
  }
  function targetInputHandler() {
    source.removeEventListener("input", sourceInputHandler);
    setTransform(source).to(invert(target.value)).andDispatchEvent();
    source.addEventListener("input", sourceInputHandler);
  }
  source.addEventListener("input", sourceInputHandler);
  target.addEventListener("input", targetInputHandler);
  invalidation.then(() => {
    source.removeEventListener("input", sourceInputHandler);
    target.removeEventListener("input", targetInputHandler);
  });

  sourceInputHandler();
  return target;
}
```

```{ojs}
setTransform = (input) => ({to: (value) => (input.value = value, {andDispatchEvent: (event = new Event("input")) => input.dispatchEvent(event)})});
```

```{ojs}
function inverse(f) {
  switch (f) {
    case identity:  return identity;
    case Math.sqrt: return square;
    case Math.log:  return Math.exp;
    case Math.exp:  return Math.log;
    default:        return (x => solve(f, x, x));
  }
  function solve(f, y, x = 0) {
    const dx = 1e-6;
    let steps = 100, deltax, fx, dfx;
    do {
      fx = f(x)
      dfx = (f(x + dx) - fx) || dx;
      deltax = dx * (fx - y)/dfx
      x -= deltax;
    } while (Math.abs(deltax) > dx && --steps > 0);
    return steps === 0 ? NaN : x;
  }

  function square(x) {
    return x * x;
  }
}
```

```{ojs}
function identity(x) {
  return x;
}
```

```{ojs}
unix = {
  while(true) {
    yield Date.now();
  }
}
```

```{ojs}
function unix2dote(unix, zone, offset = 719468) {
  return [
    (unix ?? Date.now()) / 86400000
    + (zone = zone ?? (10 - Math.round(
        (new Date).getTimezoneOffset() / 144)) % 10
      ) / 10 + offset, zone]
}
```

```{ojs}
function doty2dote(year = 1969, doty = 306) {
    return doty + Math.floor(year * 365 + Math.floor(year / 4) - Math.floor(year / 100) + Math.floor(year / 400));
}
```

```{ojs}
function doty2deco(year = 1969, doty = 306, zone = 0, lead = "0", emoji = false, minus = false) {
  return dote2deco(doty2dote(year, doty), zone, lead, emoji, minus);
}
```

```{ojs}
function dote2doty(days = 719468, zone = 0) {
  const era = Math.floor((days >= 0 ? days : days - 146096) / 146097), dotc = days - era * 146097,
      yotc = Math.floor((dotc - Math.floor(dotc / 1460) + Math.floor(dotc / 36524) - Math.floor(dotc / 146096)) / 365);
  return [yotc + era * 400, dotc + Math.floor(yotc / 100) - yotc * 365 - Math.floor(yotc / 4), zone];
}
```

```{ojs}
function dote2deco(dote = 719468, zone = 0, lead = "0", emoji = false, minus = false) {
let [year, doty] = dote2doty(dote);
  if (minus) {
    doty = Math.abs(doty - (365 + Number(year2leap(year + 1))));
    if (zone != null) {
      zone = (10 - zone) % 10;
    }
  }
return `${
    (year + minus).toString().padStart(4, lead)}${minus ? "-" : "+"}${
    Math.floor(doty).toString().padStart(3, lead)}${emoji ? "üóìÔ∏è" : ""}${(doty % 1 * 10).toFixed(4)}${
    zone != null ? (minus ? "+" : "-") + String(zone) : ""}${emoji ? "üï∞Ô∏è" : ""}`
}
```

```{ojs}
function year2leap(year = 1970) {
    return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;
}
```

```{ojs}
function doty2dote1(year = 1969, doty = 306, zone = 0) {
    const cycle = Math.floor((year >= 0 ? year : year - 399) / 400),
      yote = year - cycle * 400;
    return [cycle * 146097 + yote * 365 + Math.floor(yote / 4) - Math.floor(yote / 100) + doty, zone]
}
```

```{ojs}
solarDoty = solarTime(unix, location[0])
```

```{ojs}
solarDeco = doty2deco(...solarDoty.slice(0, 2), null, "0", true, false)
```

```{ojs}
solarDeco1 = doty2deco(...solarDoty.slice(0, 2), null, "0", true, true)
```

```{ojs}
// I derived the function below from https://github.com/hypnos3/suncalc3#getting-solar-time
// https://github.com/Hypnos3/suncalc3/blob/master/suncalc.js#L780
// Looks like I ditched the original version of the function after this version:
// https://observablehq.com/@dec/alc@21363
// I created a new version of the function below in this version of the alc notebook:
// https://observablehq.com/@dec/alc@21383
// I updated the way longitude is included in this version of the alc notebook:
// https://observablehq.com/@dec/alc@27187
// I am not sure how well (if at all) I tested the function below
// 360 / 365 = 9.863, which matches a value in the wikipedia equation
// https://en.wikipedia.org/wiki/Equation_of_time
// (doty + 345) % 365 adjusts to dayOfYear - 81 in original function
// Math.PI / 180 converts to radians
// The function below is similar to this pysolar function:
// https://github.com/pingswept/pysolar/blob/master/pysolar/solar.py#L46
solarTime = function(unix, long) {
    const dote = unix2dote(unix, 0)[0], [year, doty] = dote2doty(dote),
    b = 360 / 365 * ((Math.floor(doty) + 345) % 365) * Math.PI / 180;
    return dote2doty(dote + (
      9.87 * Math.sin(2 * b)
      - 7.53 * Math.cos(b)
      - 1.5 * Math.sin(b)
    ) / 1440 + long2turn(long, 0));
};
```

```{ojs}
// These are previous versions, in something approximately chronological order, of the solarTime function for recordkeeping purposes
// getSolarTime = function (dateValue, lng) {
//         const date = new Date(dateValue);
//         const start = new Date(date.getFullYear(), 0, 0);
//         const diff = date.getTime() - start.getTime() + (start.getTimezoneOffset() - date.getTimezoneOffset()) * 60000;
//         const dayOfYear = Math.floor(diff / 86400000);

//         const b = 360 / 365 * (dayOfYear - 81) * Math.PI / 180;
//         const equationOfTime = 9.87 * Math.sin(2 * b) - 7.53 * Math.cos(b) - 1.5 * Math.sin(b);
//         const timeCorrection = equationOfTime + 4 * lng;
//         const localSolarTime = date.getHours() + timeCorrection / 60 + date.getMinutes() / 60;

//         const solarDate = new Date(0, 0);
//         solarDate.setMinutes(+localSolarTime * 60);
//         return solarDate.getUTCHours() / 2.4 + solarDate.getUTCMinutes() / 144 + solarDate.getUTCSeconds() / 8640 + solarDate.getUTCMilliseconds() / 8640000;
//     };
// getTC = function (unix, long) {
//     const [year, doty] = dote2doty(...unix2dote(unix, 4))
//     const b = 360 / 365 * ((doty + 61 + greg2bool(year + 1)) % 365 - 81) * Math.PI / 180;
//     return (9.87 * Math.sin(2 * b) - 7.53 * Math.cos(b) - 1.5 * Math.sin(b) + 4 * long) / 1440;
// };

// getSolarTime = function(unix, long) {
//     const dote = unix2dote(unix, 4)[0], [year, doty] = dote2doty(dote),
//     b = 360 / 365 * ((doty + 61 + greg2bool(year + 1)) % 365 - 81) * Math.PI / 180;
//     return dote2doty(dote + (9.87 * Math.sin(2 * b) - 7.53 * Math.cos(b) - 1.5 * Math.sin(b) + 4 * long) / 1440);
// };

// getMySolarTime = function(unix, long) {
//     const dote = unix2dote(unix, 4)[0], [year, doty] = dote2doty(dote),
//     b = 360 / 365 * ((Math.floor(doty) + 345) % 365) * Math.PI / 180;
//     return dote2doty(dote + (9.87 * Math.sin(2 * b) - 7.53 * Math.cos(b) - 1.5 * Math.sin(b) + 4 * long) / 1440);
// };

// solarTime = function(unix, long) {
//     const dote = unix2dote(unix, 0)[0], [year, doty] = dote2doty(dote),
//     b = 360 / 365 * ((Math.floor(doty) + 345) % 365) * Math.PI / 180;
//     return dote2doty(dote + (
//       9.87 * Math.sin(2 * b) - 7.53 * Math.cos(b) - 1.5 * Math.sin(b) + 4 * long
//     ) / 1440);
// };
//
// solarTime = function(unix, long) {
//     const dote = unix2dote(unix, 0)[0], [year, doty] = dote2doty(dote),
//     b = 360 / 365 * ((Math.floor(doty) + 345) % 365) * Math.PI / 180;
//     return dote2doty(dote + (
//       9.87 * Math.sin(2 * b)
//       - 7.53 * Math.cos(b)
//       - 1.5 * Math.sin(b)
//       + 4 * (((long %= 360) < 0 ? long + 360 : long) + 18)
//     ) / 1440);
// };
```

```{ojs}
// mysolar = function(doty) {
//     const b = 360 / 365 * ((Math.floor(doty) + 345) % 365) * Math.PI / 180;
//     return 9.87 * Math.sin(2 * b) - 7.53 * Math.cos(b) - 1.5 * Math.sin(b)
// };
```

```{ojs}
// pysolar = function(day) {
//     const b = 2 * Math.PI / 364.0 * (day - 81);
//     return 9.87 * Math.sin(2 * b) - 7.53 * Math.cos(b) - 1.5 * Math.sin(b)
// }
```

```{ojs}
dz = unix2dote(unix)
```

```{ojs}
dz0 = unix2dote(unix, 0)
```

```{ojs}
yd = dote2doty(...dz)
```

```{ojs}
yd0 = dote2doty(...dz0)
```

```{ojs}
fracYear = yd[0] + yd[1] * 10 / nDaysInYear
```

```{ojs}
fracYear0 = yd0[0] + yd0[1] * 10 / nDaysInYear0
```

```{ojs}
zone = dz[1]
```

```{ojs}
function removeEmoji(arg) {
  return arg.replace(/[^\p{N}\p{P}\p{Sm}\n]/gu, '')
}
```

```{ojs}
decoP = removeEmoji(dote2deco(...dz))
```

```{ojs}
decoM = removeEmoji(dote2deco(...dz, "0", false, true))
```

```{ojs}
decoYearP = decoP.slice(0, 4)
```

```{ojs}
decoYearM = decoM.slice(0, 4)
```

```{ojs}
decoDateP = decoP.slice(5, 8)
```

```{ojs}
decoDateM = decoM.slice(5, 8)
```

```{ojs}
decoTimeP = removeEmoji(decoP.slice(8, 14))
```

```{ojs}
decoTimeM = removeEmoji(decoM.slice(8, 14))
```

```{ojs}
decoDateTimeP = removeEmoji(decoP.slice(5, 14))
```

```{ojs}
nDaysInYear = (365 + year2leap(decoYearP + 1)) * 10
```

```{ojs}
nDaysNextYear = (365 + year2leap(decoYearP + 2)) * 10
```

```{ojs}
nDaysInYear0 = (365 + year2leap(yd0[0] + 1)) * 10
```

```{ojs}
function long2zone(degrees = -180) {
  return Math.floor(long2turn(degrees, 1));
}
```

```{ojs}
function removeLeadingZeros(arg) {
  return arg.split(/\+|(?=\d\.)/)
}
```

```{ojs}
function getYotcSH(dote = 492633) {
  const socy = Math.floor(dote / 12053);
  const dotc = dote - socy * 12053;
  return Math.floor((dotc - Math.floor(dotc / 1461)) / 365)
}
```

```{ojs}
function getDotcSH(yotc = 0) {
  return yotc * 365 + Math.trunc((yotc - 1) / 4)
}
```

```{ojs}
graticule = d3.geoGraticule().stepMinor([36,36]).stepMajor([36,36])()
```

```{ojs}
graticule.coordinates = graticule.coordinates.map(
  i => i.map(j => j.map((k, index, arr) => i.length === 3 && index === 0 ? k - 18 : k))
)
```

```{ojs}
// https://github.com/topojson/world-atlas
world = d3.json("https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json")
```

```{ojs}
countries = topojson.feature(world, world.objects.countries)
```

```{ojs}
topojson = require("topojson-client@3")
```

```{ojs}
label_style = `font: 13px/1.2 var(--sans-serif); width: 120px; font-size: ${label_size};`
```

```{ojs}
label_size = '80%'
```

```{ojs}
function long2zone1(degrees = -180) {
  return ~~long2turn(degrees, 1);
}
```

```{ojs}
function long2zone2(degrees = -180) {
  return Math.round(long2long1(degrees, 1));
}
```

```{ojs}
function long2turn(degrees = -180, e = 3) {
  // turns: e=0, deciturns: e=1, etc.
  return (((degrees %= 360) < 0 ? degrees + 360 : degrees) + 18) / (360 / 10**e) % 10**e;
}
```

```{ojs}
function lati2turn(degrees = -180, e = 3) {
  // turns: e=0, deciturns: e=1, etc.
  return ((degrees %= 360) < 0 ? degrees + 360 : degrees) / (360 / 10**e) % 10**e;
}
```

```{ojs}
function lati2turn1(degrees = -180, e = 3) {
  // turns: e=0, deciturns: e=1, etc.
  return (degrees %= 360) / (360 / 10**e) % 10**e;
}
```

```{ojs}
function turn2long(turns = 0) {
  return (((turns %= 1000) < 0 ? turns + 1000 : turns)) * .360 - 162;
}
```

```{ojs}
function long2long1(degrees = -180, e = 0) {
  return ((degrees %= 360) < 0 ? degrees + 360 : degrees) / (360 / 10**e) % 10**e;
}
```

```{ojs}
// degrees to zone
// multiples of 9 degrees yield terminating decimal numbers
// [-180, -90, 0, 9, 18, 36, 45, 90, 162].map(long2zone1)
```

```{ojs}
// degrees to zone
// multiples of 9 degrees yield terminating decimal numbers
[-180, -90, 0, 9, 18, 36, 45, 90, 162].map(long2zone2)
```

```{ojs}
// https://observablehq.com/@dbridges/visualizing-seasonal-daylight
solarSystem = (root, width, location, date, hour) => {
  const earthRadius = 0.04 * width;
  const sunRadius = 0.06 * width;
  const solarSystemRadius = width / 2 - 20;
  const stretch = 0.3;

  const solarAngle = getSolarAngle(date);
  const solarAngleDeg = (solarAngle * 180) / Math.PI;
  const x = solarSystemRadius * Math.sin(solarAngle);
  const y = stretch * solarSystemRadius * Math.cos(solarAngle);
  const spin = 180 + -location[0] + solarAngleDeg + 360 * ((hour + 12) / 24);

  const earthGeo = { type: "Sphere" };
  const projection = d3
    .geoOrthographic()
    .fitWidth(earthRadius * 2, earthGeo)
    .rotate([spin, 0, 23.5])
    .translate([0, 0]);
  const staticProjection = d3
    .geoOrthographic()
    .fitWidth(earthRadius * 2, earthGeo)
    .rotate([solarAngleDeg - 90, 0])
    .translate([0, 0]);
  const path = d3.geoPath(projection).pointRadius(1.5);
  const staticPath = d3.geoPath(staticProjection);

  const solarSystem = root
    .append("g")
    .attr("transform", `translate(${width / 2})`);

  solarSystem.append("circle").attr("r", sunRadius).attr("fill", colors.sun);

  /* Draw orbit */
  solarSystem
    .append("ellipse")
    .attr("rx", solarSystemRadius)
    .attr("ry", stretch * solarSystemRadius)
    .attr("fill", "none")
    .attr("stroke", "black");

  /* Draw month ticks */
  d3.range(12).map((m) => {
    const d = new Date(date.getFullYear(), m, 1);
    const angle = getSolarAngle(d);

    solarSystem
      .append("line")
      .attr("x1", (solarSystemRadius + 6) * Math.sin(angle))
      .attr("y1", (solarSystemRadius + 6) * stretch * Math.cos(angle))
      .attr("x2", (solarSystemRadius - 6) * Math.sin(angle))
      .attr("y2", (solarSystemRadius - 6) * stretch * Math.cos(angle))
      .attr("stroke", "black");

    const startMonthAngle = getSolarAngle(new Date(date.getFullYear(), m, 1));

    solarSystem
      .append("text")
      .text(date2doty(d))
      .attr("x", (solarSystemRadius + 18) * Math.sin(startMonthAngle))
      .attr(
        "y",
        (solarSystemRadius + 18) * 1.18 * stretch * Math.cos(startMonthAngle)
      )
      .attr("text-anchor", "middle")
      .attr("font-size", fontSize)
      .attr("dominant-baseline", "middle")
      .attr("font-size", fontSize)
      .attr("font-family", "sans-serif")
      .attr("fill", "black");
  });

  const earth = solarSystem
    .append("g")
    .attr("transform", `translate(${x}, ${y})`);

  earth
    .append("line")
    .attr("y1", -1.5 * earthRadius)
    .attr("y2", 1.5 * earthRadius)
    .attr("stroke", "blue")
    .attr("transform", `rotate(-23.5)`);

  earth.append("path").attr("d", path(earthGeo)).attr("fill", colors.ocean);

  earth.append("path").attr("d", path(land)).attr("fill", colors.land);
  
  earth.append("path")
  .attr("d", path(countries))
  .attr("stroke-width", ".075")
  .attr("fill", "none")
  .attr("stroke", "#555");

  const shadowPolygon = [
    [0, -90],
    [0, 0],
    [0, 90],
    [180, 0],
    [0, -90]
  ];

  earth
    .append("path")
    .attr("d", staticPath({ type: "Polygon", coordinates: [shadowPolygon] }))
    .attr("fill", "rgba(0, 0, 0, 0.5)");

  earth
    .append("path")
    .attr("d", path({ type: "Point", coordinates: location }))
    .attr("r", 18)
    .attr("stroke-width", .3)
    .attr("stroke", "black")
    .attr("fill", "red");
}
```

```{ojs}
function greg2doty(month = 1, day = 1) {
    return Math.floor(
        (153 * (month > 2 ? month - 3 : month + 9) + 2) / 5 + day - 1
)}
```

```{ojs}
function date2doty(date) {
  return greg2doty(date.getMonth() + 1, date.getDate())
}
```

```{ojs}
function date2doty1(date) {
  const doty = greg2doty(date.getMonth() + 1, date.getDate())
  return doty === 31 ? "Day " + String(doty) : doty
}
```

```{ojs}
// https://observablehq.com/@dbridges/visualizing-seasonal-daylight
globe = (root, { width, location, date, hour }) => {
  const solarAngle = getSolarAngle(date);
  const solarAngleDeg = toDegrees(solarAngle);
  const hourSpin = 360 * ((hour + 12) / 24);
  const spin = (180 + -location[0] + solarAngleDeg + hourSpin);
  const tilt = -15;
    
  const projection = d3.geoOrthographic()
                       .fitWidth(width, graticule)
                       .rotate([spin, tilt, 23.5]);
  const path = d3.geoPath(projection);
  
  const unClippedProjection = d3.geoOrthographic()
                                .clipAngle(null)
                                .fitWidth(width, graticule)
                                .rotate([spin, tilt, 23.5]);
  const unClippedPath = d3.geoPath(unClippedProjection);
  
  const staticProjection = d3.geoOrthographic()
                             .fitWidth(width, graticule)
                             .rotate([solarAngleDeg - 90, tilt]);
  const staticPath = d3.geoPath(staticProjection);
  
  const background = root.append("g");  
  const earth = root.append("g").style("opacity", 0.75);
  const foreground = root.append("g");
 
  earth.append("path")
    .attr("d", path({type: "Sphere"}))
    .attr("fill", colors.ocean)
    .attr("stroke", "#9ecbda");
  
  earth.append("path")
    .attr("d", path(land))
    .attr("fill", colors.land);
  
  earth.append("path")
    .attr("d", path(countries))
    .attr("stroke-width", "1")
    .attr("fill", "none")
    .attr("stroke", "#000");
  
  root
    .append("text")
    .text(`${dote2deco(date.setUTCHours(0, 0, 0, 0) / 86400000 + 719468 + hour / 24, null, "0", true)}`)
    .attr("x", width / 2)
    .attr("y", -24 + (width < 400) * 4)
    .attr("text-anchor", "middle")
    .attr("font-size", fontSize * (width < 600 ? 1 : 1.2))
    .attr("font-family", "monospace")
    .attr("fill", "black");
  
  root
    .append("text")
    .text(`${dote2deco(date.setUTCHours(0, 0, 0, 0) / 86400000 + 719468 + hour / 24, null, "0", true, true)}`)
    .attr("x", width / 2)
    .attr("y", -4 + (width < 400) * 1)
    .attr("text-anchor", "middle")
    .attr("font-size", fontSize * (width < 600 ? 1 : 1.2))
    .attr("font-family", "monospace")
    .attr("fill", "black");
  
  background.append("path")
    .attr("d", unClippedPath({type: "Point", coordinates: location}))
    .attr("fill", "red");
  
  const latitudeCoords = (latitude, start, end) => {
    const longitudes = d3.range(start, end, 2).concat(end);
    return longitudes.map(d => [d, latitude]);
  }
  
  const correctSpin = d3.geoRotation([-hourSpin, 0]);
  const correctTilt = d3.geoRotation([6, 0, 0]);
  
  /* total angular extent of day/night */
  const dayExtent = 360 * dayLength(date, location[1]) / 24;
  const nightExtent = 360 - dayExtent;
    
  const dayLine = {
    type: "LineString",
    coordinates: latitudeCoords(location[1],
                                location[0] - dayExtent / 2,
                                location[0] + dayExtent / 2).map(d => correctSpin(d))
  };
  
  const nightLine = {
    type: "LineString",
    coordinates: latitudeCoords(location[1],
                                location[0] - dayExtent / 2 - nightExtent,
                                location[0] - dayExtent / 2).map(d => correctSpin(d))
  };
  
  background.append("path")
    .attr("d", unClippedPath(dayLine))
    .attr("fill", "none")
    .attr("stroke", colors.day)
    .attr("stroke-width", 3);
  
  background.append("path")
    .attr("d", unClippedPath(nightLine))
    .attr("fill", "none")
    .attr("stroke", colors.night)
    .attr("stroke-width", 3);
  
  foreground.append("path")
    .attr("d", path(dayLine))
    .attr("fill", "none")
    .attr("stroke", colors.day)
    .attr("stroke-width", 3);
  
  foreground.append("path")
    .attr("d", path(nightLine))
    .attr("fill", "none")
    .attr("stroke", colors.night)
    .attr("stroke-width", 3);
  
  foreground.append("path")
    .attr("d", path({type: "Point", coordinates: location}))
    .attr("stroke-width", .5)
    .attr("stroke", "black")
    .attr("fill", "red");
  
    
  const shadowPolygon = [[0, -90], [0, 0], [0, 90], [180, 0], [0, -90]].map(d => correctTilt(d));
  
  foreground.append("path")
    .attr("d", staticPath({type: "Polygon", coordinates: [shadowPolygon]}))
    .attr("fill", "rgba(0, 0, 0, 0.25)");
}
```

```{ojs}
dayOfYear = (date) => {
  const yearStart = new Date(date.getFullYear(), 0, 1+60);
  return Math.floor((date.getTime() - yearStart.getTime())/86400000) + 1
}
```

```{ojs}
// https://observablehq.com/@dbridges/visualizing-seasonal-daylight
daylightPlot = (
  root,
  { width, height, year, latitude, defaultDate, defaultHour }
) => {
  const margin = { top: 24, bottom: 32, left: 48, right: 0 };
  const chartWidth = width - margin.left - margin.right;
  const chartHeight = height - margin.top - margin.bottom;

  const xTickValues =
    width > 380 ? [3, 6, 9, 12, 15, 18, 21] : width > 240 ? [6, 12, 18] : [12];

  const xScale = d3
    .scaleLinear()
    .domain([0, 24])
    .range([margin.left, margin.left + chartWidth])
    .clamp(true);

  // y-axis scale
  const yScale = d3
    .scaleTime()
    .domain([new Date(year, 0, 1+60), new Date(year, 11, 31+60)])
    .range([margin.top, margin.top + chartHeight])
    .clamp(true);

  // y-axis labels
  const yAxis = d3
    .axisLeft(yScale)
    .tickValues(d3.timeMonth.range(new Date(year, 1, 1+60), new Date(year, 12, 1+57)))
    .tickSize(chartWidth)
    .tickFormat(date2doty1);

  const xAxis = d3
    .axisBottom(xScale)
    .tickValues(xTickValues)
    .tickSize(chartHeight)
    .tickFormat((d) => {
      return `${d / .024}`;
    });


  let date = defaultDate || new Date();
  let hour = defaultHour != null ? defaultHour : date.getHours();

  const handleMouseMove = (e) => {};

  root
    .append("rect")
    .attr("x", margin.left)
    .attr("y", margin.top)
    .attr("width", chartWidth)
    .attr("height", chartHeight)
    .attr("rx", 0.05 * width)
    .attr("fill", colors.night);

  root
    .append("g")
    .attr("transform", `translate(${margin.left + chartWidth}, 0)`)
    .call(yAxis)
    .call((g) => g.select(".domain").remove())
    .call((g) => g.selectAll(".tick").attr("color", colors.grid))
    .call((g) => g.selectAll(".tick text").attr("font-size", 1.1 * fontSize))
    .call((g) => g.selectAll(".tick text").attr("color", "black"))
    .call((g) => g.selectAll(".tick line").attr("stroke-dasharray", "5 3"));

  root
    .append("g")
    .attr("transform", `translate(0, ${margin.top})`)
    .call(xAxis)
    .call((g) => g.select(".domain").remove())
    .call((g) => g.selectAll(".tick").attr("color", colors.grid))
    .call((g) => g.selectAll(".tick text").attr("font-size", 1.1 * fontSize))
    .call((g) => g.selectAll(".tick text").attr("color", "black"))
    .call((g) => g.selectAll(".tick line").attr("stroke-dasharray", "5 3"));

  root
    .append("text")
    .text("Local Solar Time")
    .attr("x", margin.left + chartWidth / 2)
    .attr("y", margin.top + chartHeight + margin.bottom - 2)
    .attr("text-anchor", "middle")
    .attr("font-size", fontSize * 1.2)
    .attr("font-family", "sans-serif")
    .attr("fill", "black");

  const data = yearDates(year)
    .map((d) => [d, dayLength(d, latitude)])
    .filter(([_, d]) => d > 0);

  /* Render separate polygons for each continuous sequence of
   * days with more than 0 hours of day light
   */
  const polys = [];
  let currentPoly = [];

  for (let i = 0; i < data.length; i++) {
    const currentDate = data[i][0];
    const prevDate = (data[i - 1] || [])[0];

    if (
      i === 0 ||
      currentDate.getTime() - prevDate.getTime() < 3600 * 24 * 1000 * 1.5
    ) {
      currentPoly.push(data[i]);
    } else {
      polys.push(currentPoly);
      currentPoly = [data[i]];
    }
  }

  polys.push(currentPoly);

  polys.forEach((p) => {
    const points = [
      ...p.map(([d, l]) => `${xScale(12 - l / 2)},${yScale(d)}`),
      ...p.reverse().map(([d, l]) => `${xScale(12 + l / 2)},${yScale(d)}`)
    ].join(" ");

    root.append("polygon").attr("points", points).attr("fill", colors.day);
  });

  /* Legend */
  const legend = root
    .append("g")
    .attr("transform", `translate(${margin.left + chartWidth / 2 - 64})`);

  legend
    .append("rect")
    .attr("rx", 5)
    .attr("width", 1.4 * fontSize)
    .attr("height", 1.4 * fontSize)
    .attr("fill", colors.day);

  legend
    .append("text")
    .attr("x", 24)
    .attr("y", 17)
    .attr("font-size", 1.4 * fontSize)
    .attr("font-family", "sans-serif")
    .text("Day");

  legend
    .append("rect")
    .attr("x", 72)
    .attr("rx", 5)
    .attr("width", 1.4 * fontSize)
    .attr("height", 1.4 * fontSize)
    .attr("fill", colors.night);

  legend
    .append("text")
    .attr("x", 96)
    .attr("y", 17)
    .attr("font-size", 1.4 * fontSize)
    .attr("font-family", "sans-serif")
    .text("Night");

  /* Time and date controls */

  const dateLine = root.append("g");

  const updateControlPositions = () => {
    dateLine
      .select("line")
      .attr("x1", xScale(0))
      .attr("y1", yScale(date))
      .attr("x2", xScale(24))
      .attr("y2", yScale(date));

    dateLine
      .select("rect")
      .attr("x", xScale(0))
      .attr("y", yScale(date) - 4);

    root
      .select("#time-control")
      .attr("cx", xScale(hour))
      .attr("cy", yScale(date));
  };

  const dispatchDateHourChange = () => {
    const detail = { date, hour };
    const changeEvent = new CustomEvent(EventType.DateHourChange, {
      detail,
      bubbles: true
    });
    root.node().dispatchEvent(changeEvent);
  };

  const handleDateLineDrag = ({ y }) => {
    date = yScale.invert(y);
    updateControlPositions();
    dispatchDateHourChange();
  };

  const handleTimeCircleDrag = ({ x }) => {
    hour = xScale.invert(x);
    updateControlPositions();
    dispatchDateHourChange();
  };

  dateLine.append("line").attr("stroke-width", 4).attr("stroke", "red");

  dateLine
    .append("rect")
    .attr("width", chartWidth)
    .attr("height", 8)
    .attr("fill", "rgba(0, 0, 0, 0)")
    .style("cursor", "row-resize")
    .call(d3.drag().on("drag", handleDateLineDrag));

  root
    .append("circle")
    .attr("id", "time-control")
    .attr("r", 12)
    .attr("fill", "red")
    .attr("stroke-width", .6)
    .attr("stroke", "black")
    .style("cursor", "pointer")
    .call(d3.drag().on("drag", handleTimeCircleDrag));

  updateControlPositions();
}
```

```{ojs}
fontSize = 14;
```

```{ojs}
getSolarAngle = (date) => (dayOfYear(date) + 10) / 365 * Math.PI * 2 - Math.PI / 2;
```

```{ojs}
/*
 * Formulas uses the CBM model as reviewed here:
 * https://www.ikhebeenvraag.be/mediastorage/FSDocument/171/Forsythe+-+A+model+comparison+for+daylength+as+a+function+of+latitude+and+day+of+year+-+1995.pdf
 */
dayLength = (date, latitude) => {
  const yearStart = new Date(date.getFullYear(), 0, 1);
  const dayOfYear = Math.floor((date.getTime() - yearStart.getTime())/86400000) + 1;
  const revAngle = 0.2163108 + 2 * Math.atan(0.9671396 * Math.tan(0.00860 * (dayOfYear - 186)));
  const decAngle = Math.asin(0.39795 * Math.cos(revAngle));
  
  /* daylight coefficient selected for apparent sunrise/sunset */
  const p = 0.8333

  const intResult =
    (Math.sin((p * Math.PI) / 180) +
      Math.sin((latitude * Math.PI) / 180) * Math.sin(decAngle)) /
    (Math.cos((latitude * Math.PI) / 180) * Math.cos(decAngle));
  
  if (intResult >= 1) return 24;
  if (intResult <= -1) return 0;
    
  return 24 - 24 * Math.acos(intResult) / Math.PI;
}
```

```{ojs}
yearDates = (year) => {
  const startDate = new Date(year, 0, 1+60);
  const endDate = new Date(year + 1, 0, 1+60);
  
  return d3.timeDay.range(startDate, endDate);
}
```

```{ojs}
height = 0.65 * width;
```

```{ojs}
EventType = ({
  LocationChange: "LOCATION_CHANGE",
  DateHourChange: "DATE_HOUR_CHANGE"
})
```

```{ojs}
colors = ({
  night: "#719fb6",
  day: "#ffe438",
  grid: "#4b6a79",
  ocean: "#adeeff",
  land: "#f5f1dc",
  sun: "#ffe438"
})
```

```{ojs}
toRadians = (val) => val * Math.PI / 180
```

```{ojs}
toDegrees = (val) => val * 180 / Math.PI;
```

```{ojs}
land = topojson.feature(world, world.objects.land);
```

```{ojs}
d3 = require("d3@7", "d3-geo-projection@3")
```

```{ojs}
function input(config) {
  let {
    form,
    type = "text",
    attributes = {},
    action,
    getValue,
    title,
    description,
    format,
    display,
    submit,
    options
  } = config;
  const wrapper = html`<div></div>`;
  if (!form)
    form = html`<form>
	<input name=input type=${type} />
  </form>`;
  Object.keys(attributes).forEach(key => {
    const val = attributes[key];
    if (val != null) form.input.setAttribute(key, val);
  });
  if (submit)
    form.append(
      html`<input name=submit type=submit style="margin: 0 0.75em" value="${
        typeof submit == "string" ? submit : "Submit"
      }" />`
    );
  form.append(
    html`<output name=output style="font: 14px Menlo, Consolas, monospace; margin-left: 0.1em; text-align:center;"></output>`
  );
  if (title)
    form.prepend(
      html`<div style="font: 700 0.9rem sans-serif; margin-bottom: 3px;">${title}</div>`
    );
  if (description)
    form.append(
      html`<div style="font-size: 0.85rem; font-style: italic; margin-top: 3px;">${description}</div>`
    );
  if (format)
    format = typeof format === "function" ? format : d3format.format(format);
  if (action) {
    action(form);
  } else {
    const verb = submit
      ? "onsubmit"
      : type == "button"
      ? "onclick"
      : type == "checkbox" || type == "radio"
      ? "onchange"
      : "oninput";
    form[verb] = e => {
      e && e.preventDefault();
      const value = getValue ? getValue(form.input) : form.input.value;
      if (form.output) {
        const out = display ? display(value) : format ? format(value) : value;
        if (out instanceof window.Element) {
          while (form.output.hasChildNodes()) {
            form.output.removeChild(form.output.lastChild);
          }
          form.output.append(out);
        } else {
          form.output.value = out;
        }
      }
      form.value = value;
      if (verb !== "oninput")
        form.dispatchEvent(new CustomEvent("input", { bubbles: true }));
    };
    if (verb !== "oninput")
      wrapper.oninput = e => e && e.stopPropagation() && e.preventDefault();
    if (verb !== "onsubmit") form.onsubmit = e => e && e.preventDefault();
    form[verb]();
  }
  while (form.childNodes.length) {
    wrapper.appendChild(form.childNodes[0]);
  }
  form.append(wrapper);
  return form;
}
```

```{ojs}
d3format = require("d3-format@1")
```

```{ojs}
// https://observablehq.com/@enjalot/draggable-world-map-coordinates-input
function worldMapCoordinates(config = {}, dimensions) {
  const {
    value = [], title, description, width = dimensions[0]
  } = Array.isArray(config) ? {value: config} : config;
  const height = dimensions[1];
  let [lon, lat] = value;
  lon = lon != null ? lon : null;
  lat = lat != null ? lat : null;
  const formEl = html`<form style="width: ${width}px;"></form>`;
  const context = DOM.context2d(width, height-width/11.5);
  const canvas = context.canvas;
  canvas.style.margin = `-21px 0 ${width < 400 ? -48 : width < 800 ? -86 : -90}px`;
  const projection = d3
    .geoEquirectangular()
    .precision(0.1)
    .fitSize([width, height], { type: "Sphere" }).rotate([-153, 0]);
  const path = d3.geoPath(projection, context).pointRadius(2.5);
  formEl.append(canvas);

  function draw() {
    context.fillStyle = "#fff";
    context.fillRect(0, 0, width, height);
    context.beginPath(); path({type: "Sphere"});
    context.fillStyle = colors.ocean; context.fill();
    context.beginPath();
    path(graticule);
    context.lineWidth = 0.95;
    context.strokeStyle = `#aaa`;
    context.stroke();
    context.beginPath();
    path(land);
    context.fillStyle = colors.land;
    context.fill();
    context.beginPath();
    path(countries);
    context.lineWidth = .95;
    context.strokeStyle = `#000`;
    context.stroke();
    context.fillStyle = `#000`;
    context.font = width < 760 ? "12px serif" : width < 990 ? "11.6px serif" : "18px serif";
    d3.range(-1.5, 342 + 1, 36).map(x =>  context.fillText(long2zone(x), ...projection([x, 84.5 - (width < 400) * 3.6])));
    d3.range(-1.5, 342 + 1, 36).map(x =>  context.fillText(long2zone(x), ...projection([x, -62])));
    context.beginPath(), path(night), context.fillStyle = "rgba(0,0,255,0.1)", context.fill();
    context.beginPath(); path.pointRadius(17); path({type: "Point", coordinates: sun}); context.strokeStyle = "#0008"; context.fillStyle = "#ff08"; context.lineWidth = 1; context.stroke(); context.fill();
    if (lon != null && lat != null) {
      path.pointRadius(17); context.strokeStyle = "black";
      context.beginPath(); path({type: "Point", coordinates: [lon, lat]}); context.lineWidth = 1; context.stroke();
      context.lineWidth = 6; 
      path.pointRadius(14); context.strokeStyle = "red";
      context.beginPath(); path({type: "Point", coordinates: [lon, lat]}); context.stroke();
    }
  }

  let drag = d3.drag()
    .on("drag", (event) => {
      let coords = projection.invert([event.x, event.y]);
      lon = +coords[0].toFixed(2);
      lat = +coords[1].toFixed(2);
      draw();
      canvas.dispatchEvent(new CustomEvent("input", { bubbles: true }));
    })

  d3.select(canvas).call(drag)

  canvas.onclick = function(ev) {
    const { offsetX, offsetY } = ev;
    let coords = projection.invert([offsetX, offsetY]);
    lon = +coords[0].toFixed(2);
    lat = +coords[1].toFixed(2);
    draw();
    canvas.dispatchEvent(new CustomEvent("input", { bubbles: true }));
  };

  draw();

  const form = input({
    type: "worldMapCoordinates",
    title,
    description,
    display: v => (width > 400) ? html`<div style="width: ${width}px; white-space: nowrap; color: #444; text-align: center; font: 18px monospace; position: relative; top: 3.5em;  margin-bottom: 2.6em;">
            <span style="color: #000;">Zone:</span> ${lon != null ? long2zone(lon) : ""}
            &nbsp; &nbsp; 
            <span style="color: #000;">Longitude:</span> ${lon != null ? (long2turn(lon)).toFixed(0) : ""}
            &nbsp; &nbsp; 
            <span style="color: #000;">Latitude:</span> ${lat != null ? ((lati2turn1(lat))).toFixed(0) : ""} 
          </div>` : '',
    getValue: () => [lon != null ? lon : null, lat != null ? lat : null],
    form: formEl
  });
  return form;
}
```

```{ojs}
sun = {
  const now = new Date;
  const day = new Date(+now).setUTCHours(0, 0, 0, 0);
  const t = solar.century(now);
  const longitude = (day - now) / 864e5 * 360 - 180;
  return [longitude - solar.equationOfTime(t) / 4, solar.declination(t)];
}
```

```{ojs}
night = d3.geoCircle()
    .radius(90)
    .center(antipode(sun))
  ()
```

```{ojs}
antipode = ([longitude, latitude]) => [longitude + 180, -latitude]
```

```{ojs}
solar = require("solar-calculator@0.3/dist/solar-calculator.min.js")
```

```{ojs}
// https://observablehq.com/@mbostock/scrubber
function Scrubber(values, {
  format = value => value,
  initial = 0,
  direction = 1,
  delay = null,
  autoplay = true,
  loop = true,
  loopDelay = null,
  alternate = false,
  inputStyle = ""
} = {}) {
  values = Array.from(values);
  const form = html`<form style="font: 18px var(--monospace); font-variant-numeric: tabular-nums; display: flex; height: 33px; align-items: center;">
  <button name=b type=button style="margin-right: 0.4em; width: 5em;"></button>
  <label style="display: flex; align-items: center;">
    <input name=i type=range min=0 max=${values.length - 1} value=${initial} step=1 style=${inputStyle}>
    <output name=o style="margin-left: 0.4em;"></output>
  </label>
</form>`;
  let frame = null;
  let timer = null;
  let interval = null;
  function start() {
    form.b.textContent = "Pause";
    if (delay === null) frame = requestAnimationFrame(tick);
    else interval = setInterval(tick, delay);
  }
  function stop() {
    form.b.textContent = "Play";
    if (frame !== null) cancelAnimationFrame(frame), frame = null;
    if (timer !== null) clearTimeout(timer), timer = null;
    if (interval !== null) clearInterval(interval), interval = null;
  }
  function running() {
    return frame !== null || timer !== null || interval !== null;
  }
  function tick() {
    if (form.i.valueAsNumber === (direction > 0 ? values.length - 1 : direction < 0 ? 0 : NaN)) {
      if (!loop) return stop();
      if (alternate) direction = -direction;
      if (loopDelay !== null) {
        if (frame !== null) cancelAnimationFrame(frame), frame = null;
        if (interval !== null) clearInterval(interval), interval = null;
        timer = setTimeout(() => (step(), start()), loopDelay);
        return;
      }
    }
    if (delay === null) frame = requestAnimationFrame(tick);
    step();
  }
  function step() {
    form.i.valueAsNumber = (form.i.valueAsNumber + direction + values.length) % values.length;
    form.i.dispatchEvent(new CustomEvent("input", {bubbles: true}));
  }
  form.i.oninput = event => {
    if (event && event.isTrusted && running()) stop();
    form.value = values[form.i.valueAsNumber];
    form.o.value = format(form.value, form.i.valueAsNumber, values);
  };
  form.b.onclick = () => {
    if (running()) return stop();
    direction = alternate && form.i.valueAsNumber === values.length - 1 ? -1 : 1;
    form.i.valueAsNumber = (form.i.valueAsNumber + direction) % values.length;
    form.i.dispatchEvent(new CustomEvent("input", {bubbles: true}));
    start();
  };
  form.i.oninput();
  if (autoplay) start();
  else stop();
  Inputs.disposal(form).then(stop);
  return form;
}
```

