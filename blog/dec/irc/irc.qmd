---
title: 'Dec graticules'
author: 'Martin Laptev'
format: html
echo: false
observable: 'https://observablehq.com/@dec/irc'
---

```{ojs}
md`# Dec graticules

The [solar terminator](https://en.wikipedia.org/wiki/Terminator_%28solar%29#:~:text=a%20moving%20line%20that%20divides%20the%20daylit%20side%20and%20the%20dark%20night%20side%20of%20a%20planetary%20body) map below shows how Dec divides the world up with 10 [meridians](https://en.wikipedia.org/wiki/Meridian_%28geography%29#:~:text=the%20locus%20connecting%20points%20of%20equal%20longitude) and 5 [parallels](https://en.wikipedia.org/wiki/Circle_of_latitude#:~:text=an%20abstract%20east%E2%80%93west%20small%20circle%20connecting%20all%20locations%20around%20Earth%20%28ignoring%20elevation%29%20at%20a%20given%20latitude%20coordinate%20line), each spaced 1 deciturn (10% of a turn) apart.
Dec is a [measurement system](https://en.wikipedia.org/wiki/System_of_units_of_measurement#:~:text=a%20collection%20of%20units%20of%20measurement%20and%20rules%20relating%20them%20to%20each%20other) that [I](https://maptv.github.io) created to measure⏳time,📍position,🧭orientation,📐angles, and🔄cycles in [turns](https://en.wikipedia.org/wiki/Turn_%28angle%29#:~:text=a%20unit%20of%20plane%20angle%20measurement%20equal%20to%202%CF%80%C2%A0radians%2C%20360%C2%A0degrees) ([${tex`\tau`}](https://en.wikipedia.org/wiki/Turn_%28angle%29#:~:text=the%20Greek%20letter,to%20one%20turn)) instead of months, weeks, hours, minutes, seconds, and degrees. For time measurement, Dec uses days and years, which are turns of a [celestial body](https://en.wikipedia.org/wiki/Astronomical_object#:~:text=a%20single%2C%20tightly%20bound%2C%20contiguous%20entity) on [its axis](https://en.wikipedia.org/wiki/Axial_tilt#:~:text=the%20imaginary%20line%20that%20passes%20through%20both%20the%20north%20pole%20and%20south%20pole) and around [the point it orbits](https://en.wikipedia.org/wiki/Barycenter_%28astronomy%29#:~:text=the%20point%20about%20which%20the%20bodies%20orbit), respectively.`
```

```{ojs}
viewof choice = Inputs.select(
  projections, {label: "Projection:", format: x => x.name, value: projections.find(t => t.name === "Equirectangular")})
```

```{ojs}
map = html`<svg width=${width} height=${height} viewBox="0 0 ${width} ${height}" style="display:block;">
  <path d="${path(graticule)}" stroke="#ccc" fill="none"></path>
  <path d="${path(land)}" fill="#333f"></path>
  <path d="${path(night)}" fill="rgba(0,0,255,0.3)"></path>
  <path d="${path(outline)}" stroke="#000" fill="none"></path>
  <path d="${path(borders)}" stroke="#fff" fill="none"></path>
  <circle cx="${path({type: "Point", coordinates: [sun[0]+360, sun[1]]}).slice(1).split(",")[0]}" cy="${projection(sun)[1]}" r="17" stroke-width=".5" stroke="#0008" fill="#ff0a" />
  <g font-size="18" font-family="sans-serif">
    ${d3.range(-18, 336 + 1, 36).map(x => svg` // Longitude
    <text text-anchor="middle" transform="translate(${projection([x, 90]) + ""})" y="-6">${formatLongitude(x)}</text>
    <text text-anchor="middle" transform="translate(${projection([x, -90]) + ""})" dy="0.71em" y="6">${formatLongitude(x)}</text>`)}
    ${d3.range(-72, 80 + 1, 36).map(y => svg` // Latitude
    <text text-anchor="start" transform="translate(${projection([180 + 152, y]) + ""})" dy="0.35em" x="6">${formatLatitude(y)}</text>
    <text text-anchor="end" transform="translate(${projection([-180 + 154, y]) + ""})" dy="0.35em" x="-6">${formatLatitude(y)}</text>`)}
  </g>
</svg>`
```

```{ojs}
md`The map above shows how [Meridian 0](https://en.wikipedia.org/wiki/126th_meridian_west#:~:text=a%20line%20of%20longitude%20that%20extends%20from%20the%20North%20Pole%20across%20the%20Arctic%20Ocean%2C%20North%20America%2C%20the%20Pacific%20Ocean%2C%20the%20Southern%20Ocean%2C%20and%20Antarctica%20to%20the%20South%20Pole), the Dec [International Date Line](https://en.wikipedia.org/wiki/International_Date_Line#:~:text=the%20line%20between%20the%20South%20and%20North%20Poles%20that%20is%20the%20boundary%20between%20one%20calendar%20day%20and%20the%20next) and [prime meridian](https://en.wikipedia.org/wiki/Prime_meridian#:~:text=an%20arbitrarily%2Dchosen%20meridian%20%28a%20line%20of%20longitude%29%20in%20a%20geographic%20coordinate%20system%20at%20which%20longitude%20is%20defined%20to%20be%200%C2%B0), cuts across the Atlantic Ocean just West of Africa and marks the start of Zone 0, the leftmost Dec time zone on the map. Dec has 10 time zones which are each 1 deciturn (10% of a turn) wide and are numbered 0 through 9, like the [meridians](https://en.wikipedia.org/wiki/Meridian_%28geography%29#:~:text=words%2C%20it%20is-,a%20line%20of%20longitude,-.%20The%20position%20of) that separate them. For more Dec maps, check out these notebooks:
- [Decalendar](/@dec/al)
- [Decalc](/@dec/alc)
- [Decaliper](/@dec/ali)
- [Declock](/@dec/loc)
- [Solar terminator](/@dec/solar-terminator)
- [The Sun's view of the Earth](/@dec/the-suns-view-of-the-earth)`
```

```{ojs}
projections = [
   {name: "CylindricalEqualArea", value: d3.geoCylindricalEqualArea},
   {name: "CylindricalStereographic", value: d3.geoCylindricalStereographic},
   {name: "Eckert1", value: d3.geoEckert1},
   {name: "Eckert2", value: d3.geoEckert2},
   {name: "Eckert3", value: d3.geoEckert3},
   {name: "Eckert4", value: d3.geoEckert4},
   {name: "Eckert5", value: d3.geoEckert5},
   {name: "Eckert6", value: d3.geoEckert6},
   {name: "Equirectangular", value: d3.geoEquirectangular},
   {name: "Hufnagel", value: d3.geoHufnagel},
   {name: "Kavrayskiy7", value: d3.geoKavrayskiy7},
   {name: "Miller", value: d3.geoMiller},
   {name: "MtFlatPolarParabolic", value: d3.geoMtFlatPolarParabolic},
   {name: "MtFlatPolarQuartic", value: d3.geoMtFlatPolarQuartic},
   {name: "MtFlatPolarSinusodial", value: d3.geoMtFlatPolarSinusoidal},
   {name: "NaturalEarth1", value: d3.geoNaturalEarth1},
   {name: "NaturalEarth2", value: d3.geoNaturalEarth2},
   {name: "NellHammer", value: d3.geoNellHammer},
   {name: "Patterson", value: d3.geoPatterson},
   {name: "Robinson", value: d3.geoRobinson},
   {name: "Times", value: d3.geoTimes},
   {name: "Wagner4", value: d3.geoWagner4},
   {name: "Wagner6", value: d3.geoWagner6},
   {name: "Winkel3", value: d3.geoWinkel3},
]
```

```{ojs}
projection = choice.value().rotate([-153, 0])
```

```{ojs}
choice
```

```{ojs}
sun = {
  const now = new Date;
  const day = new Date(+now).setUTCHours(0, 0, 0, 0);
  const t = solar.century(now);
  const longitude = (day - now) / 864e5 * 360 - 180;
  return [longitude - solar.equationOfTime(t) / 4, solar.declination(t)];
}
```

```{ojs}
night = d3.geoCircle()
    .radius(90)
    .center(antipode(sun))
  ()
```

```{ojs}
antipode = ([longitude, latitude]) => [longitude + 180, -latitude]
```

```{ojs}
solar = require("solar-calculator@0.3/dist/solar-calculator.min.js")
```

```{ojs}
countries = fetch("https://cdn.jsdelivr.net/npm/world-atlas@2/countries-50m.json").then(response => response.json())
```

```{ojs}
borders = topojson.mesh(countries, countries.objects.countries, (a, b) => a !== b)
```

```{ojs}
formatLatitude = y => `${y / 36}`
```

```{ojs}
// formatLongitude = x => `${Math.abs(x)}°${x < 0 ? "W" : "E"}`
formatLongitude = x => `${(x+18) / 36}`
```

```{ojs}
path = d3.geoPath(projection)
```

```{ojs}
margin = ({top: 30, right: 40, bottom: 30, left: 40})
```

```{ojs}
height = {
  const [[x0, y0], [x1, y1]] = d3.geoPath(projection.fitWidth(width, outline)).bounds(outline);
  const dx = x1 - x0;
  const k = (dx - margin.left - margin.right) / dx;
  const dy = (y1 - y0) * k + margin.bottom + margin.top;
  projection.scale(projection.scale() * k);
  projection.translate([(dx + margin.left - margin.right) / 2, (dy + margin.top - margin.bottom) / 2]);
  projection.precision(0.2);
  return Math.round(dy);
}
```

```{ojs}
outline = ({type: "Sphere"})
```

```{ojs}
md`Need to provide my own coordinates to graticule: [
  [
    [-180, -89.999999],
    [-180, 9.999999974752427e-7],
    [-180, 89.999999]
  ],
  …
]`
```

```{ojs}
graticule = d3.geoGraticule().stepMinor([36,36]).stepMajor([36,36])()
```

```{ojs}
graticule.coordinates = graticule.coordinates.map(
  i => i.map(j => j.map((k, index, arr) => i.length === 3 && index === 0 ? k - 18 : k))
)
```

```{ojs}
graticule.coordinates
```

```{ojs}
land = topojson.feature(world, world.objects.land)
```

```{ojs}
world = FileAttachment("land-50m.json").json()
```

```{ojs}
topojson = require("topojson-client@3")
```

```{ojs}
d3 = require("d3-array@2", "d3-geo@2", "d3-geo-projection@3")
```

