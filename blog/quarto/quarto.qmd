---
title: Quarto
author:
  - name: Martin Laptev
    url: https://maptv.github.io
date: now
image: horst_many-qmd-to-output.png
categories:
  - decüóìÔ∏èüïì
  - quarto
  - web dev
format:
  html:
    mermaid:
      theme: default
    code-tools: true
    link-external-icon: true
filters:
  - ../date.lua
  - include-code-files
comments:
  giscus:
    repo: maptv/maptv.github.io
---

[Quarto](https://quarto.org/#:~:text=An%20open%2Dsource%20scientific%20and%20technical%20publishing%20system) is an [open-source software](https://en.wikipedia.org/wiki/Open-source_software#:~:text=Open%2Dsource%20software%20(OSS)%20is%20computer%20software%20that%20is%20released%20under%20a%20license%20in%20which%20the%20copyright%20holder%20grants%20users%20the%20rights%20to%20use%2C%20study%2C%20change%2C%20and%20distribute%20the%20software%20and%20its%20source%20code%20to%20anyone%20and%20for%20any%20purpose.) system for creating articles, books, blogs, dashboards, presentations, reports, websites, and other kinds of outputs from simple plain-text source files. [Announced](https://posit.co/blog/announcing-quarto-a-new-scientific-and-technical-publishing-system) on [`2022+149`](#){data-bs-toggle="tooltip" data-bs-title="2022-07-28"} by [Posit](https://posit.co) CEO [JJ Allaire](https://www.rstudio.com/authors/j.j.-allaire/), Quarto is already taking the worldüåêby storm‚õàÔ∏è!

I strongly believe that everyone, regardless of their background and current technical skill level, can learn and benefit from Quarto. [Getting start with Quarto](https://quarto.org/docs/get-started/) is easy thanks to its [excellent documentation](https://quarto.org/docs/guide/) and vibrant community of enthusiastic users and developers.

Rather than repeat the basic information already available elsewhere, I will share some advanced techniques along with the fundamental knowledge needed to understand how they work. The topics I cover are very technical, but my goal is to make the content on [my blog](../blog.qmd) as accessible as possible.

The first topic I will delve into is creating and publishing a website with Quarto. To follow the Quarto documentation on creating a [website](https://quarto.org/docs/websites/), you will need [Visual Studio Code (VCSode)](https://code.visualstudio.com), [RStudio](https://posit.co/download/rstudio-desktop), or a [terminal](https://en.wikipedia.org/wiki/Terminal_emulator).

# Setup

If you use [macOS](https://en.wikipedia.org/wiki/MacOS#:~:text=macOS%20(/%CB%8Cm%C3%A6ko%CA%8A%CB%88%C9%9Bs/%3B%5B6%5D%20previously%20OS%C2%A0X%20and%20originally%20Mac%C2%A0OS%C2%A0X)%20is%20an%20operating%20system%20developed%20and%20marketed%20by%20Apple%20Inc.%20since%202001.), [Linux](https://en.wikipedia.org/wiki/Linux#:~:text=Linux%20(/%CB%88l%C9%AAn%CA%8Aks/%20LIN%2Duuks)%5B11%5D%20is%20a%20family%20of%20open%2Dsource%20Unix%2Dlike%20operating%20systems), or the [Windows Subsystem for Linux (WSL)](https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux#:~:text=Windows%20Subsystem%20for%20Linux%20(WSL)%20is%20a%20feature%20of%20Windows%20that%20allows%20developers%20to%20run%20a%20Linux%20environment%20without%20the%20need%20for%20a%20separate%20virtual%20machine%20or%20dual%20booting.), you can install all of the aforementioned tools with the [Homebrew](https://brew.sh) package manager. To install everything you will need to follow along with this blog post, you can run `brew` `bundle` in a directory that contains the [Brewfile](https://homebrew-file.readthedocs.io/en/latest/usage.html) in @exm-brew.

::: {#exm-brew}
```{.ruby filename="Brewfile"}
brew "gh"
brew "git"
brew "glab"
cask "github"
cask "quarto"
cask "rstudio"
cask "vscodium"
cask "visual-studio-code"
vscode "quarto.quarto"
vscode "REditorSupport.r"
```
:::

You can of course install whatever you want without Homebrew, but using a package manager like Homebrew to install all the requirements with a single [shell](https://en.wikipedia.org/wiki/Unix_shell#:~:text=A%20Unix%20shell%20is%20a%20command%2Dline%20interpreter%20or%20shell%20that%20provides%20a%20command%20line%20user%20interface%20for%20Unix%2Dlike%20operating%20systems.) command like `brew` `bundle` is the fastest and easiest way to set up your computer. If you are curious, you can take a look at my personal Brewfile and other configuration files in my `setup` [repository (repo)](https://en.wikipedia.org/wiki/Repository_(version_control)#:~:text=In%20version%20control%20systems%2C%20a%20repository%20is%20a%20data%20structure%20that%20stores%20metadata%20for%20a%20set%20of%20files%20or%20directory%20structure.) on [GitHub](https://github.com/maptv/setup) and [GitHub](https://gitlab.com/maptv/setup).

# Publishing a Quarto site

Once you are done setting up your computer and creating the [Quarto website template](https://quarto.org/docs/websites/#quick-start:~:text=This%20will%20create%20the%20scaffolding%20for%20a%20simple%20website%20in%20the%20mysite%20sub%2Ddirectory.), you can make your site publicly available using one of the many available [publishing services](https://quarto.org/docs/publishing/#getting-started). To explore and assess different publishing workflows and free website hosting options, I set up my personal website on four different hosts: [Quarto Pub](https://maptv.quarto.pub), [Netlify](https://maptv.netlify.app), [GitHub Pages](https://maptv.github.io), and [GitLab Pages](https://maptv.gitlab.io).

The main method to deploy Quarto sites is the [`quarto` `publish`](https://quarto.org/docs/output-formats/html-publishing.html#publish-command) [shell](https://en.wikipedia.org/wiki/Unix_shell#:~:text=A%20Unix%20shell%20is%20a%20command%2Dline%20interpreter%20or%20shell%20that%20provides%20a%20command%20line%20user%20interface%20for%20Unix%2Dlike%20operating%20systems.) command, which can render and deploy your site in one fell swoop and then open it a browser so you can view the latest version. If you do not plan to use the [Git](https://en.wikipedia.org/wiki/Git#:~:text=Git%20(/%C9%A1%C9%AAt/)%5B8%5D%20is%20a%20distributed%20version%20control%20system%5B9%5D%20that%20tracks%20changes%20in%20any%20set%20of%20computer%20files%2C%20usually%20used%20for%20coordinating%20work%20among%20programmers%20who%20are%20collaboratively%20developing%20source%20code%20during%20software%20development.) version control system or the advanced features offered by [GitHub](https://github.com), [GitLab](https://gitlab.com), or [Netlify](https://netlify.com), then I recommend deploying your site to [Quarto Pub](https://quarto.pub) by running [`quarto` `publish` `quarto-pub`](https://quarto.org/docs/publishing/quarto-pub.html#publish-command).

Similarly, publishing to Netlify with [`quarto` `publish` `netlify`](https://quarto.org/docs/publishing/netlify.html#publish-command) is easy and does not require Git. In contrast, deploying a site to GitHub or GitLab Pages with [`quarto` `publish` `gh-pages`](https://quarto.org/docs/publishing/github-pages.html#publish-command) requires Git and much more configuration than Netlify or Quarto Pub.

Before you can publish your site on GitHub or GitLab Pages, you need a [GitHub](https://github.com/signup) or [GitLab](https://gitlab.com/users/sign_up) account and a repo like my [`maptv.github.io`](https://github.com/maptv/maptv.github.io) and [`maptv.gitlab.io`](https://gitlab.com/maptv/maptv.gitlab.io) repos. Each of these repos has a default [branch](https://en.wikipedia.org/wiki/Branching_(version_control)#:~:text=Branching%2C%20in%20version%20control%20and%20software%20configuration%20management%2C%20is%20the%20duplication%20of%20an%20object%20under%20version%20control), which by default is called `main`, and another branch that must be called `gh-pages`.

You can create the repo and the `gh-pages` branch using the web interface of <https://github.com> or <https://gitlab.com> in your browser, but the easiest way is certainly using the [command line interface (CLI)](https://en.wikipedia.org/wiki/Command-line_interface#:~:text=A%20command%2Dline%20interface%20(CLI)%20is%20a%20means%20of%20interacting%20with%20a%20computer%20program%20by%20inputting%20lines%20of%20text%20called%20command%2Dlines.) for [GitHub](https://cli.github.com) or [GitLab](https://docs.gitlab.com/ee/editor_extensions/gitlab_cli/) in your [terminal](https://en.wikipedia.org/wiki/Terminal_emulator). First, run `gh auth login` or `glab auth login` and follow the prompts to authenticate via your browser, then run `gh repo create SITENAME --add-readme --clone --public` or `glab repo create SITENAME --readme`.


Next, clone the repo you created using the shell commands like [git clone](https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository#_git_cloning), [`gh` `repo` `clone`](https://cli.github.com/manual/gh_repo_clone), or [`glab` `repo` `clone`](https://docs.gitlab.com/ee/editor_extensions/gitlab_cli/), a Git [graphical user interface (GUI)](https://git-scm.com/downloads/guis) like [GitHub Desktop](https://desktop.github.com/), or the Git interface of a code editor such as [Visual Studio Code](https://quarto.org/docs/tools/vscode.html) or [RStudio](https://quarto.org/docs/tools/rstudio.html).

Cloning an empty repo may seem odd, but in my experience this is the easiest way to set up a repo. Inside your cloned repo, you can run `quarto` `create` `project` `website` to generate the starter template and then immediately run `quarto` `publish` `gh-pages`.

You can also publish your site on Quarto Pub with [GitHub Actions](https://quarto.org/docs/publishing/quarto-pub.html#github-action), but that requires a great deal more configuration that I will cover later in this post.

When I run `quarto` `publish` `--no-prompt` `--no-browser` `gh-pages`, Quarto renders my site into my output directory (`docs`), copies the output directory contents to the `gh-pages` [branch](https://en.wikipedia.org/wiki/Branching_(version_control)#:~:text=Branching%2C%20in%20version%20control%20and%20software%20configuration%20management%2C%20is%20the%20duplication%20of%20an%20object%20under%20version%20control)of my local [repository](https://en.wikipedia.org/wiki/Repository_(version_control)#:~:text=In%20version%20control%20systems%2C%20a%20repository%20is%20a%20data%20structure%20that%20stores%20metadata%20for%20a%20set%20of%20files%20or%20directory%20structure.) (repo), and then [commits](https://git-scm.com/docs/git-commit) and [pushes](https://git-scm.com/docs/git-push) the changes to my remote repositories (repos) on [GitHub](https://github.com/maptv/maptv.github.io) and [GitLab](https://gitlab.com/maptv/maptv.gitlab.io).

To get `quarto` `publish` `gh-pages` to work with both GitHub Pages and GitLab Pages, I followed the Quarto documentation on [publishing to GitHub Pages](https://quarto.org/docs/publishing/github-pages.html#publish-command), added a second `origin` [URL](https://en.wikipedia.org/wiki/URL#:~:text=A%20Uniform%20Resource%20Locator%20(URL)%2C%20colloquially%20known%20as%20an%20address%20on%20the%20Web) to my local repo using the [`git` `remote`](https://git-scm.com/docs/git-remote) shell commands, created a GitLab repo called `maptv.gitlab.io` with a `gh-pages` branch, created a `.gitlab-ci.yml` file, and modified my `_quarto.yml`, as shown in @exm-remote.

::: {#exm-remote}
```{.sh}
git remote add lab git@gitlab.com:maptv/maptv.gitlab.io
git remote add hub git@github.com:maptv/maptv.github.io
git remote set-url --add origin $(git remote get-url lab)
```

```{.yaml include="../../.gitlab-ci.yml"}
```

```{.yaml include="../../_quarto.yml" start-line=1 end-line=4}
```
:::

::: {.callout-warning}
If you run `quarto` `publish` `gh-pages` while on the `gh-pages` branch, you will get an error: `fatal:` `'gh-pages'` `is` `already` `checked` `out` `at...`.
:::

You can also configure Netlify to deploy your site based on the latest [commit](https://en.wikipedia.org/wiki/Commit_(version_control)#:~:text=In%20version%20control%20systems%2C%20a%20commit%20is%20an%20operation%20which%20sends%20the%20latest%20changes%20of%20the%20source%20code%20to%20the%20repository%2C%20making%20these%20changes%20part%20of%20the%20head%20revision%20of%20the%20repository.) in your repo on either GitHub or GitLab, by selecting `Site` `configuration`, `Build` `&` `deploy`, `Link` `repository`, choosing between `Deploy` `with` `GitHub` or `Deploy` `with` `GitLab`, and then specifying the repo and branch. This approach works similar to [`quarto` `publish` `netlify`](https://quarto.org/docs/publishing/netlify.html#publish-command) but has the added benefit of using the [Git](https://en.wikipedia.org/wiki/Git#:~:text=Git%20(/%C9%A1%C9%AAt/)%5B8%5D%20is%20a%20distributed%20version%20control%20system%5B9%5D%20that%20tracks%20changes%20in%20any%20set%20of%20computer%20files%2C%20usually%20used%20for%20coordinating%20work%20among%20programmers%20who%20are%20collaboratively%20developing%20source%20code%20during%20software%20development.) version control system behind the scenes to track changes in the content.

With the settings described above, running `quarto` `publish` `gh-pages` updates my site on GitHub, GitLab, and Netlify. To also deploy to my site to Quarto Pub, I still need to run `quarto` `publish` `quarto-pub`.

If your deployment workflow includes multiple steps, you can use a shell [alias](https://en.wikipedia.org/wiki/Alias_(command)#:~:text=In%20computing%2C%20alias%20is%20a%20command%20in%20various%20command%2Dline%20interpreters%20(shells)%2C%20which%20enables%20a%20replacement%20of%20a%20word%20by%20another%20string.) to combine all of the steps into one. @exm-qp shows a shell alias called `qp` that deploys a site first to GitHub Pages and then to Quarto Pub.

::: {#exm-qp}
```{.sh}
alias qp='(
quarto publish --no-prompt --no-browser gh-pages;
quarto publish --no-prompt --no-browser --no-render quarto-pub;
)'
```
:::



Of these four options, only GitLab Pages is not supported by the command and only Quarto Pub is not compatible with the
If you do not plan to use Git, I recommend deploying your site to [Quarto Pubs](https://quarto.org/docs/publishing/quarto-pub.html) with the `quarto` `publish` command. On the other hand, if you are going to use Git to push your content to a GitHub or GitLab Pages-enabled [repository](https://en.wikipedia.org/wiki/Repository_(version_control)#:~:text=In%20version%20control%20systems%2C%20a%20repository%20is%20a%20data%20structure%20that%20stores%20metadata%20for%20a%20set%20of%20files%20or%20directory%20structure.), you have no need for the `quarto` `publish`.

does not have a gives you no control over the [commit](https://en.wikipedia.org/wiki/Commit_(version_control)#:~:text=In%20version%20control%20systems%2C%20a%20commit%20is%20an%20operation%20which%20sends%20the%20latest%20changes%20of%20the%20source%20code%20to%20the%20repository%2C%20making%20these%20changes%20part%20of%20the%20head%20revision%20of%20the%20repository.) message for each update, no commit messages If you use `quarto` `publish` with GitHub Pages, the only disadvantages are that you must select your source branch to be `gh-pages`

 and/or the [Git](https://en.wikipedia.org/wiki/Git#:~:text=Git%20(/%C9%A1%C9%AAt/)%5B8%5D%20is%20a%20distributed%20version%20control%20system%5B9%5D%20that%20tracks%20changes%20in%20any%20set%20of%20computer%20files%2C%20usually%20used%20for%20coordinating%20work%20among%20programmers%20who%20are%20collaboratively%20developing%20source%20code%20during%20software%20development.) version control workflow shown in @fig-git.

```{mermaid fig-align="center"}
%%| label: fig-git
%%| fig-cap: Quarto workflow
%%| fig-align: center
%%| fig-width: 9
flowchart LR
   A[working<br/>directory]-.git<br/>add.->B[/staging<br/>area/]-.git<br/>commit.->C(local<br/>repo)-.git<br/>push.->D(remote<br/>repo)
```

Netlify git workflow setup: Site configuration > Build & deploy > Link repository > Deploy with GitHub|GitLab, and then select the repo and branch.
GitLab Pages git workflow setup:
  - add `.gitlab-ci.yml` to root of your git repo and push
  - uncheck **Use unique domain** under `Deploy > Pages` in the GitLab sidebar to have a shorter [URL](https://en.wikipedia.org/wiki/URL#:~:text=A%20Uniform%20Resource%20Locator%20(URL)%2C%20colloquially%20known%20as%20an%20address%20on%20the%20Web).

control system, you may prefer to host your site on [Quarto Pubs](https://quarto.org/docs/publishing/quarto-pub.html) or [Netlify](https://quarto.org/docs/publishing/netlify.html). On the other hand, if you are are already using `git` and hosting your site on GitHub or GitLab Pages, you have no need for the `quarto` `publish`.

[Quarto publishing documentation](https://quarto.org/docs/publishing/) 

In my experience, the `quarto` `publish` works Publishing to [GitHub Pages](https://maptv.github.io) with `quarto` `publish` requires setting up your site to be built from a `gh-pages` branch instead of `main`, which for me was a dealbreaker.



 If you want to host your site on [Quarto Pub](https://quartopub.com), [Netlify](https://www.netlify.com), or [GitHub Pages](https://pages.github.com), the Quarto [publishing documentation](https://quarto.org/docs/publishing/#getting-started) is all you need.
::: {.callout-warning}
The rest of this section focuses on GitLab Pages. Quarto does not officially supported by GitLab Pages, so if you are just starting out, you should choose one of the other options and skip down to @sec-nav.
:::

The Quarto documentation does not discuss [GitLab Pages](https://docs.gitlab.com/ee/user/project/pages/), but you can follow the [GitHub Pages instructions](https://quarto.org/docs/publishing/github-pages.html) and then add a `.gitlab-ci.yml` file, like the one below, to the [Git](https://en.wikipedia.org/wiki/Git#:~:text=Git%20(/%C9%A1%C9%AAt/)%5B8%5D%20is%20a%20distributed%20version%20control%20system%5B9%5D%20that%20tracks%20changes%20in%20any%20set%20of%20computer%20files%2C%20usually%20used%20for%20coordinating%20work%20among%20programmers%20who%20are%20collaboratively%20developing%20source%20code%20during%20software%20development.) (repo) containing your Quarto-rendered site. After pushing to a GitLab remote repo,

```{.yaml include="../../.gitlab-ci.yml"}
```

If your site is published on [Quarto Pub](https://quarto.org/docs/publishing/netlify.html#publish-command), [Netlify](https://quarto.org/docs/publishing/quarto-pub.html#publish-command), or [GitHub Pages](https://quarto.org/docs/publishing/github-pages.html#publish-command), you can use the [`quarto` `publish`](https://quarto.org/docs/output-formats/html-publishing.html#publish-command) command to update it. The `quarto` `publish` command does not work for GitLab Pages, but GitHub and GitLab Pages-hosted sites can be updated using the standard Git workflow shown in @fig-git.



To make it easier to maintain my site on both GitHub and GitLab Pages, I set up my local repo cloned to have two `origin` remote URLs using the code in @exm-remote. Now, whenever I run [`git` `push`](https://git-scm.com/docs/git-push) in my local repo, Git pushes my updates to both GitHub and GitLab.

::: {#exm-remote}
```{.sh}
git remote add lab git@gitlab.com:maptv/maptv.gitlab.io
git remote add hub git@github.com:maptv/maptv.github.io
git remote set-url --add origin $(git remote get-url lab)
```
:::

To make the `git` workflow displayed in @fig-git easier, I use the [alias](https://en.wikipedia.org/wiki/Alias_(command)#:~:text=In%20computing%2C%20alias%20is%20a%20command%20in%20various%20command%2Dline%20interpreters%20(shells)%2C%20which%20enables%20a%20replacement%20of%20a%20word%20by%20another%20string.) shown in @exm-aacmp to combine the `git` [`add`](https://git-scm.com/docs/git-add), [`commit`](https://git-scm.com/docs/git-commit), and `push` commands into one step. This alias allows me to provide a that describes each update directly on the

::: {#exm-aacmp}
```{.sh}
alias aacmp='(
    "func() { git add --all && git commit --message
    \"$(echo '${*:-Changed files: $(echo $(git status --porcelain
    | grep -v "?" | cut -c4- | tr "\n" " "))}')\"
    && git push; }; func"
)'
```
:::

::: {.callout-warning}
Un-escaped special characters in the commit message following the `aacmp` alias will be interpreted as shell command operators! If you don't know what this means, I advise against trying to use this alias!
:::

@exm-qp contains an analogous shell alias for `quarto` `publish` that updates site content on Quarto Pub, Netlify, and GitHub Pages. For more shell aliases, check out my [`.zshrc`](https://github.com/maptv/setup/blob/main/.zshrc#L85) in my [setup repo](https://github.com/maptv/setup#this-repo-contains-my-setup-files-for-mac-local-and-linux-remote).

For more information on the git, the tool used by 93% of software developers worldwide, according to [survey results](https://stackoverflow.blog/2023/01/09/beyond-git-the-other-version-control-systems-developers-use/#:~:text=Our%20developer%20survey%20found%2093%25%20of%20developers%20use%20Git.) published by [StackOverflow](https://stackoverflow.com/tour) on [`2022+314`](#){data-bs-toggle="tooltip" data-bs-title="2023-01-09"}, take a look at the ["GitHub for supporting, reusing, contributing, and failing safely"](https://openscapes.org/blog/2022-05-27-github-illustrated-series/) post by [Allison Horst](https://allisonhorst.com) and [Julie Lowndes](https://jules32.github.io) on the [Openscapes](https://openscapes.org/) [blog](https://openscapes.org/blog). If you are just getting started with Git, I suggest using a standalone 

# Customizing site navigation {#sec-nav}

Once your site is [built](https://quarto.org/docs/websites/website-blog.html#quick-start) and [published](https://quarto.org/docs/websites/website-blog.html#publishing), you can make it easier to navigate with a customized navigation bar (navbar) and sidebar, as described in the [Quarto documentation](https://quarto.org/docs/websites/website-navigation.html). Check out the `_quarto.yml` files for [my site](https://github.com/maptv/maptv.github.io/blob/main/_quarto.yml) and the Quarto [documentation site](https://github.com/quarto-dev/quarto-web/blob/main/_quarto.yml) to see how the navigation components are set up.

In my navbar, I added a toggle buttons for [reader mode](https://quarto.org/docs/websites/website-navigation.html#reader-mode) and [dark mode](https://quarto.org/docs/output-formats/html-themes.html#dark-mode). The other icons on right side of the navbar are spelled out in the sidebar.

My navbar also provides the current date and time in `Dec` ordinal (`deco`) format, which counts the [years since 1 BC](https://en.wikipedia.org/wiki/ISO_8601#:~:text=year%200000%20being%20equal%20to%201%20BC) and the days since March 1. `Dec` is a calendar and time system that I created and use throughout my blog.

To add a custom [timestamp](https://en.wikipedia.org/wiki/Timestamp#:~:text=A%20timestamp%20is%20a%20sequence%20of%20characters%20or%20encoded%20information%20identifying%20when%20a%20certain%20event%20occurred%2C%20usually%20giving%20date%20and%20time%20of%20day%2C%20sometimes%20accurate%20to%20a%20small%20fraction%20of%20a%20second.) to the navbar, I put a `<script>` [element](https://en.wikipedia.org/wiki/HTML_element#:~:text=An%20HTML%20element%20is%20a%20type%20of%20HTML%20(HyperText%20Markup%20Language)%20document%20component) that runs `time.js` in an [HTML](https://en.wikipedia.org/wiki/HTML#:~:text=The%20HyperText%20Markup%20Language%20or%20HTML%20is%20the%20standard%20markup%20language%20for%20documents%20designed%20to%20be%20displayed%20in%20a%20web%20browser.) [block](https://quarto.org/docs/authoring/tables.html#html-tables) in every Quarto markdown (`.qmd`) file, as shown in @exm-html. [Mine √áetinkaya-Rundel](https://mine-cr.com/) wrote about [HTML blocks](https://mine-cetinkaya-rundel.github.io/quarto-tip-a-day/posts/12-html-block/) as part of her [A Quarto tip a day](https://mine-cetinkaya-rundel.github.io/quarto-tip-a-day/about.html) project.

::: {#exm-html}

::: panel-tabset

#### `*.qmd`

```` html
```{=html}
<script src="time.js"></script>
```
````

#### `time.js`
```{.javascript include="../../time.js"}
```
:::
:::

HTML blocks are useful for running [JavaScript](https://en.wikipedia.org/wiki/JavaScript#:~:text=JavaScript%20(/%CB%88d%CA%92%C9%91%CB%90v%C9%99skr%C9%AApt/)%2C%20often%20abbreviated%20as%20JS%2C%20is%20a%20programming%20language%20that%20is%20one%20of%20the%20core%20technologies%20of%20the%20World%20Wide%20Web%2C%20alongside%20HTML%20and%20CSS) code in the context of a single page on your site without affecting the others. The main way to modify a page on your site is through the YAML frontmatter at the top of the `.qmd` file, but Other ways to modify a single at a 

Importantly, JavaScript can override the default styling provided by Quarto by modifying `style` attributes, which have the highest [specificity](https://en.wikipedia.org/wiki/CSS#Specificity:~:text=Specificity%20refers%20to%20the%20relative%20weights%20of%20various%20rules.) in [CSS](https://en.wikipedia.org/wiki/CSS#:~:text=Cascading%20Style%20Sheets%20(CSS)%20is%20a%20style%20sheet%20language%20used%20for%20describing%20the%20presentation%20of%20a%20document%20written%20in%20a%20markup%20language%20such%20as%20HTML). If I cannot get a [CSS rule](https://en.wikipedia.org/wiki/CSS#:~:text=Each%20rule%20or%20rule%2Dset%20consists%20of%20one%20or%20more%20selectors%2C%20and%20a%20declaration%20block.) to work in the [`styles.css`](https://quarto.org/docs/visual-editor/content.html#defining-styles) in the root of my site repo, my last resort is to replace the CSS [selector](https://en.wikipedia.org/wiki/CSS#Selector) with JavaScript code that obtains the target element and applies the CSS rule [declarations](https://en.wikipedia.org/wiki/CSS#Declaration) as a `style` attribute.

You can use HTML blocks to modify protect raw HTML from being processed by Pandoc.

To add a custom timestamp to the navbar, I used ) in an HTML block.


[Python](https://en.wikipedia.org/wiki/Python_(programming_language)#:~:text=Python%20is%20a%20high%2Dlevel%2C%20general%2Dpurpose%20programming%20language.) to customize the date format in the my blog's [listing page](https://maptv.github.io/blog), and [Lua](https://en.wikipedia.org/wiki/Lua_(programming_language)#:~:text=Lua%20(/%CB%88lu%CB%90%C9%99/%20LOO%2D%C9%99%3B%20from%20Portuguese%3A%20lua%20%5B%CB%88lu(w)%C9%90%5D%20meaning%20moon)%20is%20a%20lightweight%2C%20high%2Dlevel%2C%20multi%2Dparadigm%20programming%20language%20designed%20primarily%20for%20embedded%20use%20in%20applications.) to customize the date format in every blog post.


JavaScript, Python, and Lua are programming languages that have all have interesting name origins. JavaScript is named after the Java‚òïprogramming language, Pythonüêçis named after the [Monty Python](https://en.wikipedia.org/wiki/Monty_Python#:~:text=Monty%20Python%20(also%20collectively%20known%20as%20the%20Pythons)%5B2%5D%5B3%5D%20were%20a%20British%20comedy%20troupe%20formed%20in%201969) comedy troupe, and Lua is the Portugueseüáµüáπword for moonüåï.

[Pandoc](https://pandoc.org/) is a program that converts documents into practically any format. The pan in Pandoc comes from the Ancient Greek word for [*all*](https://en.wiktionary.org/wiki/pan-#:~:text=pan%2D-,all,-Usage%20notes%5B). Pandoc strives to convert *all* document formats, just like [Pangea](https://en.wikipedia.org/wiki/Pangaea#:~:text=Pangaea%20or%20Pangea%20(/p%C3%A6n%CB%88d%CA%92i%CB%90.%C9%99/)%5B1%5D%20was%20a%20supercontinent%20that%20existed%20during%20the%20late%20Paleozoic%20and%20early%20Mesozoic%20eras.) contained *all* the land and a [panacea](https://en.wiktionary.org/wiki/panacea#English:~:text=A%20solution%20to%20all%20problems.) solves *all* problems.

Quarto uses Pandoc to convert markdown files into target format(s) like `html` or `pdf`. If the source files contain executable code, Quarto executes the code via one of two computational engines: [Jupyter](https://jupyter.org/#:~:text=Free%20software%2C%20open%20standards%2C%20and%20web%20services%20for%20interactive%20computing%20across%20all%20programming%20languages) or [Knitr](https://yihui.org/knitr/#:~:text=the%20knitr%20package%20was%20designed%20to%20be%20a%20transparent%20engine%20for%20dynamic%20report%20generation%20with%20R). @fig-render shows the Quarto workflow.

```{mermaid fig-align="center"}
%%| label: fig-render
%%| fig-cap: Quarto workflow
%%| fig-align: center
%%| fig-width: 9
flowchart LR
   A[qmd<br/>ipynb]-.Knitr<br/>Jupyter.->B((md))-.Pandoc with<br/>Lua filters.->C(html<br/>pdf<br/>docx<br/>etc.)
```

Mine √áetinkaya-Rundel's Quarto tip series includes a similar [Quarto workflow mermaid diagram](https://mine-cetinkaya-rundel.github.io/quarto-tip-a-day/posts/21-diagrams/#fig-mermaid) and her ["Hello, Quarto!"](https://mine.quarto.pub/hello-quarto) rstudio::conf(2022) keynote with [Julia Stewart Lowndes](https://jules32.github.io) contains truly beautiful Quarto workflow images by [Allison Horst](https://allisonhorst.com): [1](https://mine.quarto.pub/hello-quarto/#/publishing-system-2), [2](https://mine.quarto.pub/hello-quarto/#/quarto-flattens-the-learning-curve), [3](https://mine.quarto.pub/hello-quarto/#/quarto-can-grow-with-learners-in-a-profound-way), and [4](https://mine.quarto.pub/hello-quarto/#/quarto-cli-orchestrates-each-step-of-rendering).

Quarto controls Pandoc, Jupyter, and Knitr in two ways: 1) with arguments passed to the [Quarto CLI](https://en.wikipedia.org/wiki/Command-line_interface#:~:text=A%20command%2Dline%20interface%20(CLI)%20is%20a%20means%20of%20interacting%20with%20a%20computer%20program%20by%20inputting%20lines%20of%20text%20called%20command%2Dlines.) commands and 2) with [YAML](https://yaml.org/) key-value pairs in `.qmd`, `.ipynb`, or `.yml` files.

Normally, [formatting dates in Quarto](https://quarto.org/docs/reference/dates#using-a-date-format) is as easy as setting the `date-format` YAML property. In my case it was more difficult, because I wanted dates based on `Dec`, a calendar and time system I created, instead of the ubiquitous [Gregorian calendar](https://en.wikipedia.org/wiki/Gregorian_calendar#:~:text=The%20Gregorian%20calendar%20is%20the%20calendar%20used%20in%20most%20parts%20of%20the%20world.).

As shown in @exm-date, I set `date-format` to `x` in `_metadata.yml`, which converts the date of each blog post to millisecond [UNIX time](https://en.wikipedia.org/wiki/Unix_time#:~:text=Unix%20time%5Ba%5D%20is%20a%20date%20and%20time%20representation%20widely%20used%20in%20computing.). I wanted to calculate the `Dec` calendar (`Decalendar`) dates from UNIX time, so that I could work with a single number and not have to deal with Gregorian calendar date formats or time zones.

The `Decalendar` dates in my blog are called `Decalendar` ordinal (`deco`) dates, because they are similar to [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#:~:text=ISO%208601%20is%20an%20international%20standard%20covering%20the%20worldwide%20exchange%20and%20communication%20of%20date%20and%20time%2Drelated%20data.) [ordinal](https://en.wikipedia.org/wiki/ISO_8601#Ordinal_dates) (`isoo`) dates. Like `isoo` dates, `deco` dates consist of a year and a day-of-the-year (`doty`).

`Doty` values (`doties`) in `Decalendar` dates count the number of days that have passed since March 1, which is `Day` `0` in `Decalendar`, and can optionally include a `Dec` clock (`Declock`) time. The timestamp in the navbar of my blog is an example of a `Decalendar` date combined with a `Declock` time.

The navbar timestamp is also derived from millisecond UNIX time, which I obtained in `time.js` by calling `Date.now()`. In essence, all three of the scripts in @exm-date convert millisecond UNIX time into a `deco` date or timestamp.

While `time.js` is sourced by Quarto when it reads the HTML block in each of my blog `.qmd` files, `date.lua` is run as a [Pandoc filter](https://quarto.org/docs/extensions/filters.html) during the creation of the output `.html` files, and `date.py` is executed as a [post-render script](https://quarto.org/docs/projects/scripts.html#pre-and-post-render). @exm-date speaks to the power and versatility of Quarto.

Coming up next on my blog is [a post](../observable/observable.qmd) that introduces `Dec` with [Observable](https://observablehq.com/) graphics. Get ready for an animated and interactive data visualization extravaganza!

::: {#exm-date}
::: panel-tabset
#### `*.qmd`

```` html
```{=html}
<script src="time.js"></script>
```
````

#### `_metadata.yml`

``` yaml
date: now
date-format: x
filters: date.lua
```

#### `_quarto.yml`

``` yaml
project:
  type: website
  output-dir: docs
  post-render: date.py
```

#### `time.js`

``` javascript
// https://howardhinnant.github.io/date_algorithms.html#days_from_civil
function dote2doty(days = 719468) {
    const era = Math.floor((days >= 0 ? days : days - 146096) / 146097),
        dotc = days - era * 146097,
        yotc = Math.floor((dotc - Math.floor(dotc / 1460)
        + Math.floor(dotc / 36524) - Math.floor(dotc / 146096)) / 365);
    return [yotc + era * 400, dotc + Math.floor(yotc / 100)
        - yotc * 365 - Math.floor(yotc / 4)];
};
function unix2doty(ms = 0) { return dote2doty(ms / 86400000 + 719468) };
function doty2deco(year = 1969, doty = 306, zone = 0) {
    [date, time] = doty.toString().split(".")
    return `${year}+${date.toString().padStart(3, "0")}.${
    time.toString().slice(0, 5).padStart(5, "0")}`;
};
function unix2deco(ms = 0) { return doty2deco(...unix2doty(ms)) };
const nbc = document.getElementsByClassName("navbar-brand-container");
const div = document.createElement("div");
const cal = document.createElement("i");
cal.classList.add("bi", "bi-calendar");
cal.setAttribute("role", "img");
const tik = document.createElement("i");
tik.classList.add("bi", "bi-clock");
tik.setAttribute("role", "img");
div.setAttribute("id", "deco");
nbc[0].appendChild(cal);
nbc[0].appendChild(div);
nbc[0].appendChild(tik);
setInterval(() => document.getElementById("deco").innerText =
  unix2deco(Date.now()).slice(0, 14), 8.64);
```

#### `date.py`

``` python
import bs4

def unix2doty(ms=0):
    days = ms / 86400000 + 719468
    dote = days - (era := (days if days >= 0 else days - 146096) // 146097) * 146097
    year = int((dote - dote / 1460 + dote / 36524 - dote / 146096) // 365 + era * 400)
    return year, days - (year * 365 + year / 4 - year / 100 + year / 400).__floor__()

with open("docs/blog.html") as infile:
    txt = infile.read()
    soup = bs4.BeautifulSoup(txt, features="html.parser")
for div in soup.find_all("div", {"class": "listing-date"}):
    if "+" not in div.text:
        y, d = unix2doty(int(div.text))
        div.string.replace_with(f"{y:>04}+{d.__floor__():>03}")
for p in soup.find_all("p", {"class": "date"}):
    if "+" not in p.text:
        y, d = unix2doty(int(p.text))
        p.string.replace_with(f"{y:>04}+{d.__floor__():>03}")

with open("docs/blog.html", "w") as outfile:
    outfile.write(str(soup))
```

#### `date.lua`

``` lua
local function unix2deco(ms)
    local days = ms / 86400000 + 719468
    local era = (days >= 0 and days or days - 146096) // 146097
    local doe = days - era * 146097
    local year = math.floor((doe - doe / 1460 + doe / 36524 - doe / 146096) / 365) + era * 400
    local doty = days - math.floor(year * 365 + year / 4 - year / 100 + year / 400)
    return string.format("%s+%s", math.floor(year), math.floor(doty))
end

local function to_decalendar(date)
  local date = pandoc.utils.stringify(date)
  local unix = date:match("(%d+)")
  return date:gsub(unix, unix2deco(unix))
end

function Meta(m)
  m.date = to_decalendar(m.date)
  return m
end
```
:::
:::

```{=html}
<script src="../../time.js"></script>
<script>
const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))
</script>
<style>
#title-block-header > div.quarto-title-banner.page-columns.page-full {
  margin: 0px;
  padding: 0px;
}
#title-block-header { margin: 0px; }
figcaption { text-align: center; }
#fig-1 > figure > figcaption.figure { text-align: center; }
#fig-1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca { text-align: center; }
ul.navbar-nav.navbar-nav-scroll { -webkit-flex-direction: row !important; }
</style>
```
