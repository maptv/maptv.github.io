[
  {
    "objectID": "software/observable/index.html",
    "href": "software/observable/index.html",
    "title": "Observable",
    "section": "",
    "text": "The goal of this blog post, the fourth in my Tools blog post series, is to set up the Visual Studio Code (VSCode) source-code editor to run in the remote development environments provided by the Codespaces and GitPod computing platforms. To accomplish this goal, we will use VSCode to edit a setup script and configuration files in a Git repository (repo) named dotfiles.\n\n\n\n\n\n\n\nflowchart TB\n   A[Git]--&gt;B[VSCode]--&gt;C[Quarto]\n   C--&gt;D[Observable]\n   C--&gt;E[Jupyter]\n   C--&gt;F[Knitr]\n   click A \"../git\"\n   click B \"../vscode\"\n   click C \"../quarto\"\n   click D \"../observable\"\n   click E \"../jupyter\"\n   click F \"../knitr\"\n   style D stroke:#99f,stroke-width:5px\n\n\n\n\nFigure¬†1: Tools series navigation chart",
    "crumbs": [
      "Software",
      "Observable"
    ]
  },
  {
    "objectID": "software/observable/index.html#tldr",
    "href": "software/observable/index.html#tldr",
    "title": "Observable",
    "section": "",
    "text": "The goal of this blog post, the fourth in my Tools blog post series, is to set up the Visual Studio Code (VSCode) source-code editor to run in the remote development environments provided by the Codespaces and GitPod computing platforms. To accomplish this goal, we will use VSCode to edit a setup script and configuration files in a Git repository (repo) named dotfiles.\n\n\n\n\n\n\n\nflowchart TB\n   A[Git]--&gt;B[VSCode]--&gt;C[Quarto]\n   C--&gt;D[Observable]\n   C--&gt;E[Jupyter]\n   C--&gt;F[Knitr]\n   click A \"../git\"\n   click B \"../vscode\"\n   click C \"../quarto\"\n   click D \"../observable\"\n   click E \"../jupyter\"\n   click F \"../knitr\"\n   style D stroke:#99f,stroke-width:5px\n\n\n\n\nFigure¬†1: Tools series navigation chart",
    "crumbs": [
      "Software",
      "Observable"
    ]
  },
  {
    "objectID": "software/observable/index.html#sec-intro",
    "href": "software/observable/index.html#sec-intro",
    "title": "Observable",
    "section": "Introduction",
    "text": "Introduction\nIf you do not have such a repo, you can create one by following along with the previous post in my tools blog post series, which is shown in Figure¬†1.",
    "crumbs": [
      "Software",
      "Observable"
    ]
  },
  {
    "objectID": "software/observable/index.html#sec-intro-doty",
    "href": "software/observable/index.html#sec-intro-doty",
    "title": "Observable",
    "section": "Day-of-the-year",
    "text": "Day-of-the-year\nDecalendar1 is a decimal calendarüóìÔ∏èsystem and Declock2 is a decimal timekeeping‚è≥system. Instead of months, weeks, hours, minutes, and seconds, Decalendar and Declock use a number called the day-of-the-year (doty)3. Figure¬†2 displays the current doty () as a bar chart. The integer part of the doty is the Decalendar date4 () and the fractional part is the Declock time5 ().\nThe top two bars in Figure¬†2 (Êó¨ and Êó•) show the two components of the Decalendar date (): the dek6 () and the day-of-the-dek7 (). A dek is a group of 10 days that fulfills the role of months and weeks in Decalendar. Therefore, the dek and the day-of-the-dek (dotd) in Decalendar dates are analogous to the month and day-of-the-month (dotm) in calendar dates (mm-dd) and the week and day-of-the-week (dotw) in week dates (Www-d).\nThe bottom three bars in Figure¬†2 (%, ‚Ä∞, and ‚ô´) show components of the Declock time (): cents8 (), mils9 (), and beats10 (). A cent is 1% of the day, which is a little less than a quarter hour. A mil (‚Ä∞) is a tenth of a cent, which is close to a minute and a half. A beat is 1% of a mil, which is almost as long as a second, and can be thought of as a heart‚ù§Ô∏èbeat or musicalüéµbeat with a constant rate or tempo of 69.4ÃÖ beats per minute. In addition to displaying time on clocksüï∞Ô∏èand‚åöÔ∏èwatches, beats can be used to measure durations, such as the time since this webpage was loaded: .\n\n// https://observablehq.com/@fheyen/barchart-clock\n{\nconst W = width &gt; 1250 ? width * 2 / 3 : width &gt; 1150 ? width * 3 / 4 : width &gt; 1050 ? width * 4 / 5 : width &gt; 950 ? width * 5 / 6 : width &gt; 850 ? width : width &gt; 750 ? width * 1.02 : width &gt; 650 ? width * 1.06 : width &gt; 550 ? width * 1.1 : width &gt; 450 ? width * 1.14 : width * 1.18;\n  const H = 156;\n  const barX = 1;\n  const firstBarY = 1;\n  const svg = d3\n    .create(\"svg\")\n    .attr(\"width\", W)\n    .attr(\"viewBox\", [0, 0, W, H]);\n  const xRange = [0, W - 100];\n  const scaleM = d3.scaleLinear()\n    .domain([0, 10])\n    .range(xRange);\n  const scaleCandB = d3.scaleLinear()\n    .domain([0, 100])\n    .range(xRange);\n  const scaleDek = d3.scaleLinear()\n    .domain([0, 37])\n    .range(xRange);\n  // Background bars to show where 100% lies\n  svg.selectAll('.background')\n    .data(['dek', 'dotd', 'cents', \"mils\", 'beats'])\n    .enter()\n    .append('rect')\n    .attr('class', 'background timeBar')\n    .attr('width', W-100)\n    .attr('y', (d,i)=&gt;i*30+firstBarY)\n  // Dek/Dotd\n  svg\n    .append('rect')\n    .attr('class', 'timeBar')\n    .attr('y', firstBarY)\n    .attr('width', d =&gt; scaleDek(Number(dotyDek)+Number(dotyDotd)/10+Number(barCents)/1000))\n  svg\n    .append('rect')\n    .attr('class', 'timeBarFull')\n    .attr('y', firstBarY)\n    .attr('width', d =&gt; scaleDek(dotyDek))\n  svg\n    .append('rect')\n    .attr('class', 'timeBar')\n    .attr('y', firstBarY+30)\n    .attr('width', d =&gt; scaleM(Number(dotyDotd)+Number(barCents)/100+Number(barMils)/1000))\n  svg\n    .append('rect')\n    .attr('class', 'timeBarFull')\n    .attr('y', firstBarY+30)\n    .attr('width', d =&gt; scaleM(dotyDotd))\n  svg.selectAll('.tickDek')\n    .data(d3.range(width &gt; 500 ? 4: 6, 37))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickDek')\n    .attr('x', d=&gt;scaleDek(d)+barX)\n    .attr('y', firstBarY)\n    .attr('height', d=&gt;d%(width &gt; 500 ? 2 : 3)===0? 6:4)\n  // Cent ticks\n  svg.selectAll('.tickDotd')\n    .data(d3.range(width &gt; 500 ? 1: 2, 10))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickDotd')\n    .attr('x', d=&gt;scaleM(d)+barX)\n    .attr('y', firstBarY+49)\n    .attr('height', 6)\n  svg.selectAll('.tickLabel')\n    .data(d3.range(width &gt; 500 ? 4: 6, width &gt; 500 ? 37: 35, width &gt; 500 ? 2: 3))\n    .enter()\n    .append('text')\n    .attr('class', 'tickLabel')\n    .attr('x', d=&gt;scaleDek(d)+barX+.5)\n    .attr('y', firstBarY+22)\n    .text(d=&gt;d)\n  // Cents/Mils\n  svg\n    .append('rect')\n    .attr('class', 'timeBar')\n    .attr('y', firstBarY+60)\n    .attr('width', d =&gt; scaleCandB(Number(barCents)+Number(barMils)/10+Number(barBeats)/1000))\n  svg\n    .append('rect')\n    .attr('class', 'timeBarFull')\n    .attr('y', firstBarY+60)\n    .attr('width', d =&gt; scaleCandB(barCents))\n  svg\n    .append('rect')\n    .attr('class', 'timeBar')\n    .attr('y', firstBarY+90)\n    .attr('width', d =&gt; scaleM(Number(barMils)+Number(barBeats)/100+Number(barMb)/100000))\n  svg\n    .append('rect')\n    .attr('class', 'timeBarFull')\n    .attr('y', firstBarY+90)\n    .attr('width', d =&gt; scaleM(barMils))\n  // Cent ticks\n  svg.selectAll('.tickC')\n    .data(d3.range(width &gt; 500 ? 10 : 20, 100))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickC')\n    .attr('x', d=&gt;scaleM(d/10)+barX)\n    .attr('y', firstBarY+60)\n    .attr('height', d=&gt;d%2===0? 8:5)\n  svg.selectAll('.tickC1')\n    .data(d3.range(width &gt; 500 ? 10 : 20, 100))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickC1')\n    .attr('x', d=&gt;scaleM(d/10)+barX)\n    .attr('y', d=&gt;d%2===0? firstBarY+77:firstBarY+80)\n    .attr('height', d=&gt;d%2===0? 8:5)\n  // Mil ticks\n  svg.selectAll('.tickM')\n    .data(d3.range(width &gt; 500 ? 1 : 2, 10))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickM')\n    .attr('x', d=&gt;scaleM(d)+barX)\n    .attr('y', firstBarY+90)\n    .attr('height', 6)\n  svg.selectAll('.tickM1')\n    .data(d3.range(width &gt; 500 ? 1 : 2, 10))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickM1')\n    .attr('x', d=&gt;scaleM(d)+barX)\n    .attr('y', firstBarY+92.5)\n    .attr('height', 2.5)\n  svg.selectAll('.tickLabel1')\n    .data(d3.range(width &gt; 500 ? 1 : 2, 10))\n    .enter()\n    .append('text')\n    .attr('class', 'tickLabel1')\n    .attr('x', d=&gt;scaleM(d)+barX+.5)\n    .attr('y', firstBarY+47)\n    .text(d=&gt;d)\n  svg.selectAll('.tickLabel2')\n    .data(d3.range(width &gt; 500 ? 1 : 2, 10))\n    .enter()\n    .append('text')\n    .attr('class', 'tickLabel2')\n    .attr('x', d=&gt;scaleM(d)+barX+.5)\n    .attr('y', firstBarY+112)\n    .text(d=&gt;d)\n  // Beats\n  svg\n    .append('rect')\n    .attr('class', 'timeBar')\n    .attr('y', firstBarY+120)\n    .attr('width', d =&gt; scaleCandB(Number(barBeats)+Number(barMb)/1000))\n  svg\n    .append('rect')\n    .attr('class', 'timeBarFull')\n    .attr('y', firstBarY+120)\n    .attr('width', d =&gt; scaleCandB(barBeats))\n  // Beat ticks\n  svg.selectAll('.tickB')\n    .data(d3.range(width &gt; 500 ? 10 : 20, 100))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickB')\n    .attr('x', d=&gt;scaleM(d/10)+barX)\n    .attr('y', firstBarY+120)\n    .attr('height', d=&gt;d%2===0? 9:6)\n  // Labels\n  svg.selectAll('.timeLabel')\n    .data([`${dotyDek}Êó¨`, `${dotyDotd}Êó•`, `${barCents}%`, `${barMils}‚Ä∞`, `${barBeats}‚ô´`])\n    .enter()\n    .append('text')\n    .attr('class', 'timeLabel')\n    .attr('x', barX+2)\n    .attr('y', (d,i)=&gt;i*30+firstBarY+20)\n    .text(d=&gt;d)\n  return svg.node();\n}\n\n\n\n\n\n\n\n\nFigure¬†2: Doty bar chart\n\n\n\n\n\nhtml`&lt;style&gt;\n  .tickLabel, .tickLabel1, .tickLabel2, .timeLabel {\n    fill: #000;\n    font-family: sans-serif;\n    font-size: 20px;\n    text-anchor: middle;\n  }\n  .timeLabel {\n    text-anchor: start;\n  }\n  .timeBar, .timeBarFull {\n    x: 1px;\n    height: 25px;\n    rx: 5px;\n    stroke: #aaa;\n  }\n  .timeBar {\n    fill: #e8e8e8;\n  }\n  .timeBarFull {\n    fill: #ccffff;\n  }\n  .background {\n    fill: white;\n  }\n  .tickDek, .tickDotd, .tickDotd1, .tickC, .tickC1, .tickM, .tickM1, .tickB {\n    stroke: none;\n    fill: #666;\n    width: 1px;\n  }\n&lt;/style&gt;`\n\n\n\n\n\n\nAs an alternative to doty dates, Decalendar can express dates in fractional years, which are similar to the fractional days used in doty times. Fractional year dates11 can be combined with years into one number and are useful for marking periods of 73 days in the Decalendar year. Every 73 days, the Decalendar fractional year date increases by .2 (‚Öï). The current Decalendar fractional year date is .\nNow it‚Äôs your turn! Move the slidersüéöÔ∏èin Example¬†1 to adjust the doty, fractional year, month, and dotm values and see the corresponding 1) Northern Hemisphere season, 2) Southern Hemisphere season, and 3) Zodiac sign in ../../List¬†1. Try selecting a special date, like your birthdayüéÇ! You can also press the Play‚ñ∂Ô∏èbutton and then sit back and watch the sliders cycleüîÑback and forth from the start to the end of the Decalendar year. The sliders cycle through an entire year in 36.5 beats, a million times fasterüèéÔ∏èthan the actual speed of time!\n\nExample 1 ¬†\n\n\n\nviewof inputDoty = Inputs.range([0, 365], {value: 306, step: 1, label: \"doty\"});\n\nviewof year = transformInput(\n    Inputs.range([0, .999], {step: .001, label: \"year\"}),\n    {bind: viewof inputDoty, transform: (x =&gt; x / 365), invert: (x =&gt; x * 365)}\n);\n\nviewof monthInput = transformInput(\n    Inputs.range([1, 12], {step: 1, label: \"month\"}),\n    {bind: viewof inputDoty, transform: doty2month, invert: month2doty}\n);\n\nviewof dotmInput = transformInput(\n    Inputs.range([1, 31], {step: 1, label: \"dotm\"}),\n    {bind: viewof inputDoty, transform: doty2dotm, invert: (x =&gt; Math.floor(( 153 * (\n        viewof monthInput.value &gt; 2\n        ? viewof monthInput.value - 3\n        : viewof monthInput.value + 9) + 2\n    ) / 5 + x - 1\n))});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nviewof scrubberDoty = Scrubber(numbers, {autoplay: false, alternate: true, delay: 86.4, loopDelay: 864})\n\n\n\n\n\n\n\n\n\n\n\n\n\n../../List¬†1: Date to season conversion",
    "crumbs": [
      "Software",
      "Observable"
    ]
  },
  {
    "objectID": "software/observable/index.html#sec-intro-year",
    "href": "software/observable/index.html#sec-intro-year",
    "title": "Observable",
    "section": "Year",
    "text": "Year\nDoty dates (day) and timestamps (day.stamp) do not include years and thus can be reused from year to year. When a doty is combined with a year, it forms a Decalendar ordinal12 (deco) and represents a specific date (year+day) or time (year+day.stamp) in a specific year, instead of a date (day) or time (day.stamp) that occurs every year or every leap year. Using the Observable datetime input in Example¬†2, you can select a year, month, dotm, hour, and minute to see the equivalent 1) deco timestamp (year+day.clock) and 2) year date (year.yyy) in ../../List¬†2. For comparison, the current deco timestamp is .\n\nExample 2 ¬†\n\n\n\nviewof inputDatetime = Inputs.datetime({label: \"date\", value: \"1970-01-01T00:00\"})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n../../List¬†2: Date and time conversion\n\n\n\n\nIn Example¬†3, you can enter numeric year and doty values or type in a free-form deco to see the resulting 1) ISO 8601 timestamp (year-mm-ddThh:mm:ss) and 2) year date in ../../List¬†3. Example¬†3 also has a Play‚ñ∂Ô∏èbutton in that cycles from Day 0 to Day 365 of Year 1969. The cycle goes up to Day 0 of Year 1970, because Year 1969 is a common year and does not have a Day 365.\nInteracting with the number inputs in Example¬†3, standardizes the deco in the text input to ensure years are integers and doty values are positive numbers below 366. Nevertheless, all of the inputs in Example¬†3 support negative and fractional year and doty values. Negative doty values shift dates backward in time from the start of a given year into a previous year. Similarly, negative years shift dates backward starting from Year 0, which is 1 BCE (Before the Common Era).\n\nExample 3 ¬†\n\n\n\nviewof yd = Inputs.form([\n  Inputs.number({label: \"year\", value: \"1969\"}),\n  Inputs.number({label: \"doty\", value: \"306\"})\n])\n\n\n\n\n\n\n\nviewof decoOutput = transformInput(\n  Inputs.text({label: \"deco\", placeholder: \"year+day.ddd\", value: \"1969+306\"}),\n  {bind: viewof yd, transform: doty2deco, invert: deco2doty});\n\n\n\n\n\n\n\n\n\n\n\n\n\nviewof scrubberDeco = Scrubber(numbers, {autoplay: false, alternate: true, delay: 86.4, loopDelay: 864})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n../../List¬†3: Deco timestamp conversion",
    "crumbs": [
      "Software",
      "Observable"
    ]
  },
  {
    "objectID": "software/observable/index.html#sec-intro-dek",
    "href": "software/observable/index.html#sec-intro-dek",
    "title": "Observable",
    "section": "Dek",
    "text": "Dek\nAs mentioned in Section¬†0.3, deks function as both months and weeks in Decalendar. A dek consists of 2 groups of 5 days called pents13. Each pent can follow a sequence of workdays and restdays called a pently schedule14. fig-schedules compares the typical weekly schedule and the Schedule 3 pently schedule. Like other pently schedules, Schedule 3 is named after the number of workdays it contains. The 3 workdays in Schedule 3 are followed by a 2-day pentend, the Decalender equivalent of a weekend.\nUnlike Schedule 3 and the other pently schedules, the weekly schedule is asymmetric and divides up workdays into proportions that are easier to express as fractions: 3/8 (.375), 1/3 (.3ÃÖ), and 7/24 (0.2916ÃÖ). In contrast, pently schedules divides each workday into simple, symmetrical proportions that are never repeating decimal numbers. The Schedule 3 workday is longer the typical 9-to-5, but the longer workday is compensated by more frequent restdays.\nExample¬†4 provides the opportunity to explore all four of the pently schedules. Schedule 3 is the default pently schedule, and should be followed unless there is a compelling reason to do otherwise. Despite having different numbers of workdays, all pently schedules keep the amount of spent at work constant at 1.2 days (120 cents) per pent. Every pently schedule also splits up workdays symmetrically so that the time before work is equal to the time after work. You can select which schedule to view in Example¬†4 using the Observable radio inputs.\nYou can also use the interval sliders to create a custom schedule and the Download‚¨áÔ∏èbutton to obtain the schedule data. Each interval is summarized by a Declock slice shown next to its slider. Decalendar and Declock slices are inspired by array slicing in computer programming and are used to represent date and time intervals. The slice that summarizes the Schedule 3 workday is .3:.7, where .3 (7.2 hours) is the start and .7 (16.8 hours) is the stop.\n\nExample 4 ¬†\n\n\n\nviewof intervals = Inputs.form([\n  interval([0, 1], {step: .01, value: [.3, .7], label: '0 or 5', width: 250, format: ([start, end]) =&gt; start === end ? \"\" : `${formatDecimal(start)}:${formatDecimal(end)}`}),\n  interval([0, 1], {step: .01, value: [.3, .7], label: '1 or 6', width: 250, format: ([start, end]) =&gt; start === end ? \"\" : `${formatDecimal(start)}:${formatDecimal(end)}`}),\n  interval([0, 1], {step: .01, value: [.3, .7], label: '2 or 7', width: 250, format: ([start, end]) =&gt; start === end ? \"\" : `${formatDecimal(start)}:${formatDecimal(end)}`}),\n  interval([0, 1], {step: .01, value: [0, 0], label: '3 or 8', width: 250, format: ([start, end]) =&gt; start === end ? \"\" : `${formatDecimal(start)}:${formatDecimal(end)}`}),\n  interval([0, 1], {step: .01, value: [0, 0], label: '4 or 9', width: 250, format: ([start, end]) =&gt; start === end ? \"\" : `${formatDecimal(start)}:${formatDecimal(end)}`}),\n])\n\n\n\n\n\n\n\n\n\nviewof schedule = Inputs.radio([2, 3, 4, 5], {label: \"sched.\", value: 3})\n\nviewof filename = Inputs.text({label: \"name\", placeholder: \"Enter the filename\", value: `schedule${schedule}.csv`})\n\nbutton(durations, filename)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// https://observablehq.com/@dec/pent\nPlot.plot({\n  className: \"schedule-explorer\",\n  x: {label: null},\n  color: {scheme: \"Set1\", legend: \"swatches\", reverse: true},\n  y: {label: null, domain: [1, 0]},\n  marks: [\n  Plot.barY(durations, {x: \"label\", y: \"duration\", fill: \"group\"}),\n  Plot.textY(\n      durations,\n      Plot.stackY(\n        Plot.groupX(\n          { y: \"first\", text: \"first\" },\n          {\n            x: \"label\",\n            z: \"group\",\n            y: \"duration\",\n            text: (d) =&gt; (d.duration &lt; .0001 ? null : formatDecimal(d.duration)),\n            fill: \"white\",\n            stroke: \"black\",\n            fontSize: 36,\n          }\n        )\n      )\n    ),\n  ]})\n\n\n\n\n\n\n\n\nFigure¬†3: Pently schedule explorer\n\n\n\n\n\nSlices can be used to select Declock time intervals, as in Example¬†4 above, or Decalendar date intervals, as in Example¬†5 below. Decalendar date intervals can represent events take place over multiple days. In addition to slices, Decalendar and Declock intervals can also be chosen using spreads. Use the Observable button and checkbox inputs in Example¬†5 to display different dotd combinations in Figure¬†4. Figure¬†4 shows dates selected by a slice in blue, dates selected by a spread in orange, dates selected by both in green, and dates selected by neither in gray.\nThe Example¬†5 button and checkbox inputs will modify the associated slice and spread text and numeric inputs as needed to select the desired days-of-the-dek. The numeric inputs for slices are the startüé¨index, the stopüõëindex, and the stepüë£size, which are separated by colons (start:stop:step) when combined into a slice. Similarly, the numeric inputs for spreads are the startüé¨orüõëstop index, the spanü™Ωsize, the split size, and the space size, which are typically delimited by greater-than signs (start&gt;span&gt;split&gt;space) or a mix of greater-than and less-than signs (stop&lt;span&gt;split&gt;space).\nThe numeric inputs in Example¬†5 cannot capture the full power of spreads and slices, because slices can have any number of steps and, likewise, spreads can have any number of alternating split and space sizes. We can select all even or odd days-of-the-dek using a slice with a single step (::2 or 1::2) or a spread with one split-space pair (&gt;&gt;&gt;1 or 1&gt;&gt;&gt;1). More complex patterns, such as prime or composite days-of-the-dek, require multiple step sizes for slices (2:::2:2:5 or 4::2:2::5) or multiple split-space pairs (2&gt;&gt;2&gt;1&gt;&gt;1&gt;&gt;4 or 4&gt;&gt;&gt;1&gt;&gt;1&gt;2&gt;4).\n\nExample 5 ¬†\n\nviewof sliceDotd = Inputs.checkbox([...Array(10).keys()], {label: \"slice\", value: [1, 6]})\n\n\n\n\n\n\n\nviewof spreadDotd = Inputs.checkbox([...Array(10).keys()], {label: \"spread\", value: [1, 6]})\n\n\n\n\n\n\n\nviewof togglePlot = Inputs.button([\n  [invertDotd ? \"None\" : \"All\", value =&gt; [...Array(10).keys()]],\n  [invertDotd ? \"Even\" : \"Odd\", value =&gt; [1, 3, 5, 7, 9]],\n  [invertDotd ? html`&lt;s&gt;Prime&lt;/s&gt;` : \"Prime\", value =&gt; [2, 3, 5, 7]],\n  [invertDotd ? html`&lt;s&gt;Composite&lt;/s&gt;` : \"Composite\", value =&gt; [4, 6, 8, 9]],\n  [invertDotd ? html`&lt;s&gt;Schedule2&lt;/s&gt;` : \"Schedule2\", value =&gt; [0, 1, 5, 6]],\n  [invertDotd ? html`&lt;s&gt;Schedule3&lt;/s&gt;` : \"Schedule3\", value =&gt; [0, 1, 2, 5, 6, 7]],\n  [invertDotd ? html`&lt;s&gt;Schedule4&lt;/s&gt;` : \"Schedule4\", value =&gt; [0, 1, 2, 3, 5, 6, 7, 8]],\n], {value: [], label: \"select\"})\n\n\n\n\n\n\n\n\n\nviewof invertDotd = Inputs.toggle({label: \"invert\"})\nviewof sliceOrSpread = toggleSwitch({textOn: invertDotd ? \"Spread\" : 'Slice' , textOff: invertDotd ? \"Slice\" : 'Spread'})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nviewof sliceInputs = Inputs.form([\n    Inputs.number([-366, 366], {step: 1, label: \"start\", value: 1, placeholder: \"Enter start index\"}),\n    Inputs.number([-366, 366], {step: 1, label: \"stop\", value: 366, placeholder: \"Enter stop index\"}),\n    Inputs.number([-366, 366], {step: 1, label: \"step\", value: 5, placeholder: \"Enter step size\"}),\n])\nviewof sliceString = transformInput(\n  Inputs.text({label: \"slice\", placeholder: \"Enter slice string\", value: \"0:366\"}),\n{bind: viewof sliceInputs, transform: encodeSlice, invert: decodeSlice});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nviewof spreadInputs = Inputs.form([\n    Inputs.number([-366, 366], {step: 1, label: \"start\", value: 0, placeholder: \"Enter start index\"}),\n    Inputs.number([-366, 366], {step: 1, label: \"span\", value: 366, placeholder: \"Enter span size\"}),\n    Inputs.number([-366, 366], {step: 1, label: \"split\", value: 3, placeholder: \"Enter split size\"}),\n    Inputs.number([-366, 366], {step: 1, label: \"space\", value: 2, placeholder: \"Enter space size\"}),\n])\nviewof spreadString = transformInput(\n  Inputs.text({label: \"spread\", placeholder: \"Enter spread string\", value: \"0&gt;366&gt;3&gt;2\"}),\n{bind: viewof spreadInputs, transform: encodeSpread, invert: decodeSpread});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// https://observablehq.com/@dec/dotd\nPlot.plot({\n  className: \"date-selector\",\n  padding: 0,\n  x: {axis: \"top\", label: null, type: \"band\"},\n  y: {label: null, type: \"band\"},\n  marks: [\n    Plot.cell(dates, {x: d =&gt; d[2], y: d =&gt; d.slice(0, 2), fill: d =&gt;\n      sliceArray.includes(d) && spreadArray.includes(d) ? \"green\" :\n      sliceArray.includes(d) && !spreadArray.includes(d) ? \"blue\" :\n      !sliceArray.includes(d) && spreadArray.includes(d) ? \"orange\" : \"grey\",\n      inset: 0.5}),\n    Plot.text(dates, {\n    x: d =&gt; d[2],\n    y: d =&gt; d.slice(0, 2),\n    fill: \"white\",\n    stroke: \"black\",\n    fontSize: 20})\n  ]\n})\n\n\n\n\n\n\n\n\nFigure¬†4: Decalendar date selector",
    "crumbs": [
      "Software",
      "Observable"
    ]
  },
  {
    "objectID": "software/observable/index.html#footnotes",
    "href": "software/observable/index.html#footnotes",
    "title": "Observable",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nDecalendar: a calendar system that uses deks instead of months and weeks‚Ü©Ô∏é\nDeclock: a timekeeping system that uses fractional days instead of hours, minutes, and seconds‚Ü©Ô∏é\ndoty: day-of-the-year; an alternative to months, weeks, hours, minutes, and seconds‚Ü©Ô∏é\ndoty date: the integer part of the doty; an alternate to calendar dates and week dates‚Ü©Ô∏é\ndoty time: the fractional part of the doty; an alternate to hours, minutes and seconds‚Ü©Ô∏é\ndek: a group of 10 days; the first two digits of the Decalendar date; an alternate to month and weeks‚Ü©Ô∏é\ndotd: one of the 10 days in a dek; the last digit of the Decalendar date; an alternate to the day-of-the-month and day-of-the-week‚Ü©Ô∏é\ncent: a hundredth (\\(10^{-2}\\)) of a day; the first 2 digits of the doty time; an alternate to quarter hours‚Ü©Ô∏é\nmil: a thousandth (\\(10^{-3}\\)) of a day; the first 3 digits of the doty time; an alternate to minutes‚Ü©Ô∏é\nbeat: a hundred thousandth (\\(10^{-5}\\)) of a day; the first 5 digits of the doty time; an alternate to seconds‚Ü©Ô∏é\nfractional year date: a year and the proportion of that year that has passed; an alternative to Decalendar dates‚Ü©Ô∏é\ndeco: a date and time format consisting of a year and a doty; analogous to ISO 8601 dates‚Ü©Ô∏é\npent: a group of 5 days; half of a dek‚Ü©Ô∏é\npently schedule: one of a set of workday and restday schedules for the 5 days of the pent‚Ü©Ô∏é",
    "crumbs": [
      "Software",
      "Observable"
    ]
  },
  {
    "objectID": "iso/date/index.html",
    "href": "iso/date/index.html",
    "title": "Date",
    "section": "",
    "text": "My website serves as a demonstration of both the Quarto publishing system and the Dec measurement system. I use several clever hacks to get Quarto to display all of the dates on my website in the Dec year+day format. Knowing the basics of Dec dates will help you to understand the Quarto filter, render script, and include file examples in my Quarto article.\nThe year+day format is based on the Dec date equation: \\(\\lfloor\\colorbox{yellow}{y}\\rfloor{+}\\colorbox{cyan}{d}{\\div}\\colorbox{orange}{n}{=}\\colorbox{yellow}{y}\\), where \\(\\lfloor\\colorbox{yellow}{y}\\rfloor{+}\\colorbox{cyan}{d}\\) is the Dec date, \\(\\lfloor\\colorbox{yellow}{y}\\rfloor\\) is the year obtained by flooring \\(\\colorbox{yellow}{y}\\), the decimal years that have passed since the Dec epoch (Year 0 Day 0 Dot 0), \\(\\colorbox{cyan}{d}\\) is the zero-based day of the year, and \\(\\colorbox{orange}{n}\\) is the number of days in \\(\\lfloor\\colorbox{yellow}{y}\\rfloor\\). The Dec date equation for today is .\nDec dates only include the first two terms from the left-hand side of the Dec date equation: \\(\\lfloor\\colorbox{yellow}{y}\\rfloor\\) and \\(\\colorbox{cyan}{d}\\). The right-hand side of the equation, \\(\\colorbox{yellow}{y}\\), can also be used as a date. We need \\(\\colorbox{orange}{n}\\) to calculate \\(\\colorbox{yellow}{y}\\) via the Dec date equation above and to obtain \\(\\colorbox{cyan}{d}\\) using the Dec day of the year equation: \\(\\colorbox{cyan}{d}{=}\\colorbox{yellow}{y}\\vcenter{\\text{\\%}}1{\\times}\\colorbox{orange}{n}\\). In simple terms, \\(\\colorbox{cyan}{d}\\) is the decimal part of \\(\\colorbox{yellow}{y}\\) multiplied by \\(\\colorbox{orange}{n}\\).\nTo find \\(\\colorbox{orange}{n}\\), we plug \\(\\lfloor\\colorbox{yellow}{y}\\rfloor\\) into the Dec year length equation below, where \\(\\vcenter{\\text\\%}\\) is the modulo operator, \\(\\land\\) is the logical conjunction operator (and), and \\(\\lor\\) is the logical disjunction operator (or). According to this equation, \\(\\colorbox{orange}{n}\\) is 366 if the subsequent year (Year \\(\\lfloor\\colorbox{yellow}{y}\\rfloor{+}1\\)) is a Gregorian calendar leap year and 365 if Year \\(\\lfloor\\colorbox{yellow}{y}\\rfloor{+}1\\) is a Gregorian calendar common year.\n\\[\\colorbox{orange}{n}=\\begin{cases}\n  366&{\\begin{align}\\text{if } (\\lfloor \\colorbox{yellow}{y}\\rfloor+1)\\vcenter{\\text{ \\% }}4=0\\\\\n  \\land(\\lfloor \\colorbox{yellow}{y}\\rfloor+1)\\vcenter{\\text{ \\% }}100\\neq0\\\\\n  \\lor(\\lfloor \\colorbox{yellow}{y}\\rfloor+1)\\vcenter{\\text{ \\% }}400=0\\end{align}}\\\\\\\\\n  365&{\\text{otherwise.}}\\end{cases}\\]\nIn addition to calculating \\(\\colorbox{yellow}{y}\\), \\(\\colorbox{orange}{n}\\) is needed to convert between year+day and year-day Dec dates. The year-day version of the Dec date equation is \\(\\lfloor\\colorbox{yellow}{y}\\rfloor{+}1{-}(\\colorbox{orange}{n}{-}\\colorbox{cyan}{d}){\\div}\\colorbox{orange}{n}{=}\\colorbox{yellow}{y}\\). In essence, \\(\\colorbox{orange}{n}{-}\\colorbox{cyan}{d}\\) is a ‚ÄúT-minus‚Äù countdown of the days until the start of Year \\(\\lfloor\\colorbox{yellow}{y}\\rfloor{+}1\\). The current year-day date, , tells us that Year  will begin in  days.\nThe difference between \\(\\colorbox{cyan}{d}\\) and \\(\\colorbox{orange}{n}{-}\\colorbox{cyan}{d}\\) can also be explained in terms of computer programming. If we think of years as arrays, \\(\\colorbox{cyan}{d}\\) and \\(\\colorbox{orange}{n}{-}\\colorbox{cyan}{d}\\) are like array indexes that can be used to identify array elements or combine them via slicing. In this analogy, \\(\\colorbox{cyan}{d}\\) is a positive index with a range of \\(0\\) to \\(\\colorbox{orange}{n}{-}1\\) and \\(\\colorbox{orange}{n}{-}\\colorbox{cyan}{d}\\) is a negative index that ranges from \\({-}\\colorbox{orange}{n}\\) to \\({-}1\\).\nTo extend the array index analogy, imagine that we can use a single number to look up all of the required information for any day in the current year.\nThe Play‚ñ∂Ô∏èbutton below cyclesüîÑthe range inputs beneath it through every day of the year (doty), month, and day of the month. The calendar plot beneath the range inputs highlights the doty in the top range input with a red box, distinguishes months with color, and shows the days of the week and ISO week numbers of the current year on its x- and y-axes, respectively.\n\nviewof dotyInput = Inputs.range([0, 364 + leapInput], {value: 306, step: 1, label: \"Day of the year\"});\nviewof monthInput = transformInput(\n  Inputs.range([1, 12], {step: 1, label: \"Month\"}),\n  {bind: viewof dotyInput, transform: doty2month, invert: month2doty}\n);\nviewof dotyInput1 = transformInput(\n  Inputs.range([-365 - leapInput, -1], {step: 1, label: \"Day of the year\"}),\n  {bind: viewof dotyInput, transform: subN, invert: addN}\n);\nviewof dotmInput = transformInput(\n  Inputs.range([1, 31], {step: 1, label: \"Day of the month\"}),\n  {bind: viewof dotyInput, transform: doty2dotm, invert: (x =&gt; Math.floor(( 153 * (\n    viewof monthInput.value &gt; 2\n    ? viewof monthInput.value - 3\n    : viewof monthInput.value + 9) + 2\n  ) / 5 + x - 1\n))});\nviewof leapscrub = Inputs.form([\n  Scrubber(numbers, {autoplay: false, alternate: true, delay: 86.4, loopDelay: 864, format: y =&gt; \"\", inputStyle: \"display:none;\"}),\n  Inputs.toggle({label: \"Leap year\", value: false}),\n])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFirst day of the week of the year\n\nviewof dotwInput = Inputs.radio([\n  \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\",\n  ], {value: \"Sunday\"})\n\n\n\n\n\n\n\ncalPlot0 = Plot.plot({\n  padding: 0,\n  width: 1000,\n  height: 300,\n  className: \"calplot\",\n  marginBottom: 36,\n  marginLeft: 48,\n  y: {tickFormat: Plot.formatWeekday(\"en\", \"short\"), tickSize: 0,\n      domain: [-1, 0, 1, 2, 3, 4, 5, 6],\n      ticks: [0, 1, 2, 3, 4, 5, 6],\n      tickPadding: 2,\n  },\n  x: {interval: 1, label: \"Week\", type: \"band\", tickSize: 0, tickPadding: 2, labelOffset: 36},\n  //fx: {tickFormat: \"\"},\n  style: { fontSize: \"22px\" },\n  color: {\n    range: d3.schemePastel1.concat(d3.schemePastel2),\n    domain: months,\n    className: \"cal\",\n  },\n  marks: [\n    Plot.cell(datesCal0, {\n      x: d =&gt; d3.utcWeek.count(d3.utcYear(d), d),\n      y: d =&gt; d.getUTCDay(),\n      //fx: d =&gt; d.getUTCFullYear(),\n      fill: d =&gt; months[d.getUTCMonth()],\n      stroke: d =&gt; Math.floor(unix2doty(d.getTime())) === dotyInput ? \"red\" : \"none\",\n      strokeWidth: 3,\n      inset: 0.5,\n    }),\n    Plot.text(datesCal0, {\n    x: d =&gt; d3.utcWeek.count(d3.utcYear(d), d),\n    y: d =&gt; d.getUTCDay(),\n    //fx: d =&gt; d.getUTCFullYear(),\n    text: d =&gt; d.getUTCDate() === 8 ? months[d.getUTCMonth()] : \"\",\n      y: -1,\n      frameAnchor: \"left\",\n    monospace: true,\n    fontSize: \"22px\"}),\n    Plot.text(datesCal0, {\n    x: d =&gt; d3.utcWeek.count(d3.utcYear(d), d),\n    y: d =&gt; d.getUTCDay(),\n    //fx: d =&gt; d.getUTCFullYear(),\n    fill: \"black\",\n    //stroke: \"white\",\n    text: d =&gt; d.getUTCDate(), //Math.floor(unix2doty(d.getTime())).toString().padStart(3, \"0\"),\n    monospace: true,\n    fontSize: \"22px\"})\n  ]\n})\n\n\n\n\n\n\n\ncalPlot1 = Plot.plot({\n  padding: 0,\n  width: 1000,\n  height: 300,\n  className: \"calplot\",\n  marginBottom: 36,\n  marginLeft: 48,\n  y: {tickFormat: Plot.formatWeekday(\"en\", \"short\"), tickSize: 0,\n      domain: [-1, 0, 1, 2, 3, 4, 5, 6],\n      ticks: [0, 1, 2, 3, 4, 5, 6],\n      tickPadding: 2,\n  },\n  x: {interval: 1, label: \"Week\", type: \"band\", tickSize: 0, tickPadding: 2, labelOffset: 36},\n  //fx: {tickFormat: \"\"},\n  style: { fontSize: \"22px\" },\n  color: {\n    range: d3.schemePastel1.concat(d3.schemePastel2),\n    domain: months,\n    className: \"cal\",\n  },\n  marks: [\n    Plot.cell(datesCal1, {\n      x: d =&gt; d3.utcWeek.count(d3.utcYear(d), d),\n      y: d =&gt; d.getUTCDay(),\n      //fx: d =&gt; d.getUTCFullYear(),\n      fill: d =&gt; months[d.getUTCMonth()],\n      stroke: d =&gt; Math.floor(unix2doty(d.getTime())) === dotyInput ? \"red\" : \"none\",\n      strokeWidth: 3,\n      inset: 0.5,\n    }),\n    Plot.text(datesCal1, {\n    x: d =&gt; d3.utcWeek.count(d3.utcYear(d), d),\n    y: d =&gt; d.getUTCDay(),\n    //fx: d =&gt; d.getUTCFullYear(),\n    text: d =&gt; d.getUTCDate() === 8 ? months[d.getUTCMonth()] : \"\",\n      y: -1,\n      frameAnchor: \"left\",\n    monospace: true,\n    fontSize: \"22px\"}),\n    Plot.text(datesCal1, {\n    x: d =&gt; d3.utcWeek.count(d3.utcYear(d), d),\n    y: d =&gt; d.getUTCDay(),\n    //fx: d =&gt; d.getUTCFullYear(),\n    fill: \"black\",\n    //stroke: \"white\",\n    text: d =&gt; d.getUTCDate(), //Math.floor(unix2doty(d.getTime())).toString().padStart(3, \"0\"),\n    monospace: true,\n    fontSize: \"22px\"})\n  ]\n})\n\n\n\n\n\n\nDec dates and slices are similar to, but immeasurably more useful than, ISO 8601 ordinal dates and time intervals.\nBoth Dec and ISO ordinal dates consist of a year and a day of the year separated by a delimiter. ISO dates use Dec dates differ from ISO ordinal dates in their first day of the year value (0 versus 1), epoch (0000+000 versus 00-1+306), and method for determining the length of a year (applying the Gregorian calendar leap year rule to the subsequent year versus the given year).\nThe Dec epoch and year length determination method allow Dec days of the year to function as the equivalent of months and days of the month. Notably, Dec days of the year can represent annual events, such as birthdays. In contrast, ISO 8601 does not allow the year to be omitted and thus clumsily expresses annual events as intervals that include the full start date.\nEven though some its features are incompatible with ISO 8601, Dec supports round-trip conversion to all three ISO 8601 date formats. The Mermaid flowchart below shows how the Dec date 2029+226 can be converted into many different formats. You can jump to the section dedicated to a given format by clicking on its corresponding rectangle in the flowchart.\n\n\n\n\n\nflowchart LR\n   A[UNIX time\\n1890000000]&lt;--&gt;B[dote\\n741343]\n   C[Rata Die\\n741038]&lt;--&gt;B\n   D[Julian date\\n2462462.5]&lt;--&gt;B\n   subgraph ana[dote analogs]\n   A\n   C\n   D\n   end\n   subgraph decalendar[Dec]\n   B&lt;--&gt;E[date\\n2029+266]\n   H\n   I\n   end\n   E&lt;--&gt;F[month date\\n2029-11-22]\n   E&lt;--&gt;G[ordinal date\\n2029-326]\n   B~~~H((leap\\n0)):::empty--&gt;B\n   H---G\n   B~~~I((dotw\\n4)):::empty--&gt;B\n   I--&gt;J[week date\\n2029-W47-4]\n   subgraph iso[ISO 8601]\n   F\n   G\n   J\n   end\n   classDef empty stroke:none,fill:none;\n   %% B--&gt;H[HH:MM:SS\\n00:00:00]\n   style decalendar y:50px,x:190px,width:270px,height:250px;\n   click A \"#unix-time\"\n   click B \"#dote\"\n   click C \"#rata-die\"\n   click D \"#julian-date\"\n   click E \"#date\"\n   click F \"#month\"\n   click G \"#ordinal\"\n   click J \"#week\"\n\n\n\n\n\n\nIt is easy to convert a dote into a day of the week (dotw), UNIX timestamp, Julian date, or Rata Die fractional day.\nEach of the Dec and ISO 8601 subsections showcases a function that converts one of three possible inputs, typically dote, Dec date, or ISO month date, into its eponymous format using algorithms developed by Howard Hinnant. Dote analogs, like UNIX time and Julian dates, do not have their own function because they can be created from dotes via simple arithmetic.\nDote analogs\nUNIX time\nUNIX time is the number of seconds since the UNIX epoch. Dec uses days instead of seconds and has a different epoch. To work with UNIX timestamps, Dec converts them into days of the era (dotes) by first turning seconds into days and then shifting the epoch to 0000+000. The reverse conversion first shifts the epoch to 1969+306 and then turns days into seconds.\n\\[\\text{dote} = \\text{UNIX} \\div 86400 + 719468\\]\n\\[\\text{UNIX} = (\\text{dote} - 719468) \\times 86400\\]\nRata Die\nRata Die (RD) fractional days are almost identical to dotes. The only difference is that the RD epoch, 0000+305, is 305 days after the Dec epoch, 0000+000. Therefore, conversion between dotes and RD fractional days is as simple as adding or subtracting 305. For more information on RD fractional days, take a look at the book entitled ‚ÄúCalendrical Calculations‚Äù.\n\\[\\text{RD} = \\text{dote} - 305\\]\n\\[\\text{dote} = \\text{RD} + 305\\]\nJulian date\nA Julian date is a continuous count of days since -4713+298.5. Julian dates are commonly used in astronomy. To convert a dote to a Julian date, we add 1721119.5 days to the dote to shift the epoch to Year -4713 Day 298 Dot 5. To convert a dote to a Julian date, we subtract 1721119.5 days from the Julian date to shift the epoch to Year 0 Day 0 Dot 0.\n\\[\\text{JD} = \\text{dote} + 1721119.5\\]\n\\[\\text{dote} = \\text{JD} - 1721119.5\\]\nDec\nDote\nDec days of the era (dotes) are useful for calendrical calculations such as obtaining the number of days in between two dates. To create a dote from a UNIX timestamp, Dec date, or ISO month date, we can use the dote function shown below. Unlike the dote function, the isow2dote and isoo2dote functions can create dotes from ISO week and ordinal dates, respectively.\nDate\nAs shown in the code above and the equations below, the date function uses a dote to determine the cycle of the era (cote). The cote is used to calculated the day of the cycle (dotc), year of the cycle (yotc), year, and day of the year (doty). Head to the month and ordinal sections to see how the year and doty can be used to obtain ISO month and ordinal dates.\n\\[\\text{cote} = \\Biggl \\lfloor \\frac{\\begin{cases}\\text{dote}&{\\text{if } \\text{dote} \\geq 0;}\\\\\\text{dote}-146096&{\\text{otherwise.}}\\end{cases}}{146097} \\Biggr \\rfloor\\]\n\\[\\text{dotc} = \\text{dote} - \\text{cote} \\cdot 146097\\]\n\\[\\text{yotc} = \\biggl \\lfloor \\frac{\\text{dotc} - \\lfloor \\text{dotc}{\\div}{1460} \\rfloor + \\lfloor \\text{dotc}{\\div}{36524} \\rfloor - \\lfloor \\text{dotc}{\\div}{146096} \\rfloor}{365} \\biggr \\rfloor\\]\n\\[\\text{year} = \\text{yotc} + \\text{cote} * 400\\]\n\\[\\text{doty} = \\text{dotc} - (365 \\cdot \\text{yotc} + \\lfloor \\text{yotc}{\\div}{4} \\rfloor - \\lfloor \\text{yotc}{\\div}{100} \\rfloor + \\lfloor \\text{yotc}{\\div}{400} \\rfloor)\\]\nISO 8601\nOrdinal\nOn the surface, the only difference between Dec and ISO ordinal dates appears to be their delimiters (+ versus -), but they also have different first day of the year values ([0 versus 1](https://en.wikipedia.org/wiki/Zero-based_numbering#:~:h\nWeek\nIn addition to calculating \\(\\colorbox{orange}{n}\\), Dec uses the Gregorian calendar leap year rule to convert Dec dates to and from ordinal dates, as shown in the code below.\nDec dates can also be easily converted to and from ISO 8601 month dates.\n\nWeek and dotw values vary from year to year in a pattern called the solar cycle. Dec has no need for weeks, but uses solar cycles to convert Dec dates into days of the era (dotes). A day of the era (dote) is a continuous count of days since the Dec epoch which can be used for calendrical calculations or converted into a dotw or an ISO 8601 week date as shown below.\n\n\nJavaScript\nJulia\nLua\nPython\nR\n\n\n\n\n\nfunction unix2date(unix) {\n  const dote = unix / 86400 + 719468,\n    socy = Math.floor((\n      dote &gt;= 0 ? dote\n      : dote - 146096\n    ) / 146097),\n  dotc = dote - socy * 146097,\n  yotc = Math.floor((dotc\n    - Math.floor(dotc / 1460)\n    + Math.floor(dotc / 36524)\n    - Math.floor(dotc / 146096)\n  ) / 365);\n  return [\n    yotc + socy * 400,\n    dotc - (yotc * 365\n      + Math.floor(yotc / 4)\n      - Math.floor(yotc / 100)\n  )]}\nunix2date(1728000000)\nunix2date(1890000000)\n\n\n\n\n\n\nfunction unix2date(unix)\n    dote = unix / 86400 + 719468\n    socy = (\n        dote &gt;= 0 ? dote\n        : dote - 146096\n        ) √∑ 146097\n    dotc = dote - socy * 146097\n    yotc = (\n        dotc - dotc √∑ 1460\n        + dotc √∑ 36524\n        - dotc √∑ 146096\n    ) √∑ 365\n    return Int(\n        yotc + socy * 400),\n    dotc - (yotc * 365\n        + yotc √∑ 4\n        - yotc √∑ 100)\nend\nunix2date(1728000000)\nunix2date(1890000000)\n\n(2029, 266.0)\n\n\n\n\n\n\n\nfunction unix2date(unix)\n  local dote = unix / 86400 + 719468\n  local socy = (\n    dote &gt;= 0 and dote\n    or dote - 146096\n  ) // 146097\n  local dotc = dote - socy * 146097\n  local yotc = (\n    dotc - dotc // 1460\n    + dotc // 36524\n    - dotc // 146096\n  ) // 365\n  return {\n    math.floor(yotc + socy * 400),\n    dotc - (yotc * 365\n      + yotc // 4\n      - yotc // 100\n  )}\nend\nunix2date(1728000000)\nunix2date(1890000000)\n\n\n\n\n\n\ndef unix2date(unix):\n    dote = unix / 86400 + 719468\n    socy = (\n        dote if dote &gt;= 0\n        else dote - 146096\n    ) // 146097\n    dotc = dote - socy * 146097\n    yotc = (dotc\n        - dotc // 1460\n        + dotc // 36524\n        - dotc // 146096\n    ) // 365\n    return [\n        int(yotc + socy * 400),\n        dotc - (yotc * 365\n            + yotc // 4\n            - yotc // 100\n    )]\nunix2date(1728000000)\nunix2date(1890000000)\n\n\n\n\n\n\nunix2date &lt;- function(unix) {\n  dote = unix / 86400 + 719468\n  socy = ifelse(\n    dote &gt;= 0, dote,\n    dote - 146096\n  ) %/% 146097\n  dotc = dote - socy * 146097\n  yotc = (\n    dotc - dotc %/% 1460\n    + dotc %/% 36524\n    - dotc %/% 146096\n  ) %/% 365\n  c(\n    yotc + socy * 400,\n    dotc - (yotc * 365\n      + yotc %/% 4\n      - yotc %/% 100\n))}\nunix2date(1728000000)\nunix2date(1890000000)\n\n\n\n\n\nIf we ever need to convert between a doty and a Gregorian calendar month and day of the month without any conversion tools, we can use the Dec finger mnemonic, which is similar to the knuckle mnemonic. The numbers above the fingers in the image below indicate the doty of the last day of each Gregorian calendar month. The thumb, middle finger, and pinky represent months with 31 days, whereas the index and ring fingers stand for 30-day months.\n\n\nDec finger mnemonic\n\nThe southward equinox falls on Day 205 in Year 2024, 2025, 2028, and 2029. We can determine that Day 205 is September 22 by subtracting the Dec date of the last day of August (Day 183), the month preceding September, from the southward equinox doty: \\(205{-}183{=}22\\). To convert in the other direction, we would sum the doty and the day of the month: \\(183{+}22{=}205\\).\nThe finger mnemonic highlights a major difference between Dec and the Gregorian calendar: the Dec year starts on Day 0 just like the Roman calendar, the predecessor of the Gregorian and Julian calendars. For this reason, the Latin numeral prefixes in the names of the months of September, October, November, and December match their one-based indexes (7, 8, 9, and 10) in Dec and the Roman calendar, but not in the Julian or Gregorian calendars.\nThe knuckle and finger mnemonics attempt to make sense of the irregular pattern of month lengths in the Gregorian calendar. Rather than replace variable-length months with fixed-length months, Dec forgoes the use of months entirely and instead uses groups of ten days called deks.\nI generate all of the dates on my site from UNIX time using calculations that I adapted from the civil_from_days function in Howard Hinnant‚Äôs date library. Each tab in the tabset panel below shows a different implementation of a function called unix2date which converts UNIX time into year+day dates.\nIn this function, socy is an abbreviation for solar cycle and dote, dotc, and yotc are acronyms for ‚Äúday of the era‚Äù, ‚Äúday of the cycle‚Äù, and ‚Äúday of the cycle‚Äù, respectively. A solar cycle in the Gregorian calendar is 400 years. A calendar era is the time that has passed since a starting point called a calendar epoch. The Dec epoch is Year 0 Day 0.\nI use different programming languages to convert UNIX time in various places on my site. More specifically, I use a Python post-render script (date.py) for the dates on the page that lists all of the articles on my site, a Lua filter (date.lua) for the PUBLISHED date at the top of each article, and an include-after-body file that sources a JavaScript file (stamp.js) for the date in the above. citation information at the bottom of each article.\n\nunix = {\n  while(true) {\n    yield Date.now();\n  }\n}\n// http://howardhinnant.github.io/date_algorithms.html#civil_from_days\nfunction unix2dote(unix, zone) {\n  return [\n    (unix ?? Date.now()) / 86400000\n    + (zone = zone ?? (\n      10 - Math.round((new Date)\n        .getTimezoneOffset() / 144)\n    ) % 10) / 10 + 719468, zone]}\nfunction dote2doty(dote, zone = 0) {\n  const socy = Math.floor((\n      dote &gt;= 0 ? dote\n      : dote - 146096\n    ) / 146097),\n  dotc = dote - socy * 146097,\n  yotc = Math.floor((dotc\n    - Math.floor(dotc / 1460)\n    + Math.floor(dotc / 36524)\n    - Math.floor(dotc / 146096)\n  ) / 365);\n  return [\n    yotc + socy * 400,\n    dotc - (yotc * 365\n      + Math.floor(yotc / 4)\n      - Math.floor(yotc / 100)\n  ), zone]}\nfunction doty2deco0(year = 1969, doty = 306, zone = 0) {\n  return `${year.toString().padStart(4, \"0\")}+${Math.floor(doty).toString().padStart(3, \"0\")}${String(doty % 1 * 10).slice(0, 6)}-${zone}`\n}\nydz = dote2doty(...unix2dote(unix))\ndeco = doty2deco0(...ydz)\n// https://observablehq.com/@observablehq/text-color-annotations-in-markdown#textcolor\nfunction setStyle(content, style = {}) {\n  function yiq(color) {\n    const {r, g, b} = d3.rgb(color);\n    return (r * 299 + g * 587 + b * 114) / 1000 / 255; // returns values between 0 and 1\n  }\n  const {\n    background,\n    color = yiq(background) &gt;= 0.6 ? \"#111\" : \"white\",\n    padding = \"0 1px\",\n    borderRadius = \"4px\",\n    fontWeight = 900,\n    fontSize = \"1em\",\n    ...rest\n  } = typeof style === \"string\" ? {background: style} : style;\n  return htl.html`&lt;span style=${{\n    background,\n    color,\n    padding,\n    borderRadius,\n    fontWeight,\n    ...rest\n  }}&gt;${content}&lt;/span&gt;`;\n}\nfunction year2leap(year = 1970) {\n    return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;\n}\ndecoYear = deco.slice(0, 4)\nnextYear = parseInt(decoYear) + 1\ndecoDoty = deco.slice(5, 8)\nnDaysInYear = 365 + year2leap(ydz[0] + 1)\nTminus = nDaysInYear - decoDoty\nfracYear = (ydz[0] + (ydz[1] - ydz[2]) / nDaysInYear).toFixed(3)\nstyledDecoYear = setStyle(decoYear, d3.schemePaired[10])\nstyledNextYear = setStyle(nextYear, d3.schemePaired[10])\nstyledFracYear = setStyle(fracYear, d3.schemePaired[10])\nstyledDecoDoty = setStyle(decoDoty, d3.color(\"cyan\").formatHex())\nstyledDecoDoty1 = setStyle(decoDoty, d3.color(\"cyan\").formatHex())\nstyledDecoTminus = setStyle(Tminus, d3.color(\"pink\").formatHex())\nstyledDecoDek = setStyle(decoDoty.slice(0, 2), d3.color(\"cyan\").formatHex())\nstyledDecoDotd = setStyle(decoDoty[2], d3.color(\"cyan\").formatHex())\nstyledNdays = setStyle(nDaysInYear, d3.schemePaired[6])\nstyledNdays1 = setStyle(nDaysInYear, d3.schemePaired[6])\n// https://observablehq.com/@juang1744/transform-input/1\ntransformInput = function(target, {bind: source, transform = identity, involutory = false, invert = involutory ? transform : inverse(transform)} = {}){\n  if (source === undefined) {\n    source = target;\n    target = html`&lt;div&gt;${source}&lt;/div&gt;`;\n  }\n  function sourceInputHandler() {\n    target.removeEventListener(\"input\", targetInputHandler);\n    setTransform(target).to(transform(source.value)).andDispatchEvent();\n    target.addEventListener(\"input\", targetInputHandler);\n  }\n  function targetInputHandler() {\n    source.removeEventListener(\"input\", sourceInputHandler);\n    setTransform(source).to(invert(target.value)).andDispatchEvent();\n    source.addEventListener(\"input\", sourceInputHandler);\n  }\n  source.addEventListener(\"input\", sourceInputHandler);\n  target.addEventListener(\"input\", targetInputHandler);\n  invalidation.then(() =&gt; {\n    source.removeEventListener(\"input\", sourceInputHandler);\n    target.removeEventListener(\"input\", targetInputHandler);\n  });\n  sourceInputHandler();\n  return target;\n}\nsetTransform = (input) =&gt; ({to: (value) =&gt; (input.value = value, {andDispatchEvent: (event = new Event(\"input\")) =&gt; input.dispatchEvent(event)})});\nfunction inverse(f) {\n  switch (f) {\n    case identity:  return identity;\n    case Math.sqrt: return square;\n    case Math.log:  return Math.exp;\n    case Math.exp:  return Math.log;\n    default:        return (x =&gt; solve(f, x, x));\n  }\n  function solve(f, y, x = 0) {\n    const dx = 1e-6;\n    let steps = 100, deltax, fx, dfx;\n    do {\n      fx = f(x)\n      dfx = (f(x + dx) - fx) || dx;\n      deltax = dx * (fx - y)/dfx\n      x -= deltax;\n    } while (Math.abs(deltax) &gt; dx && --steps &gt; 0);\n    return steps === 0 ? NaN : x;\n  }\nfunction square(x) {\n    return x * x;\n  }\n}\nfunction identity(x) {\n  return x;\n}\nfunction doty2month(doty = 0) {\n    const m = Math.floor((5 * doty + 2) / 153);\n    return Math.floor(m &lt; 10 ? m + 3 : m - 9);\n}\nfunction month2doty(month = 1) {\n    return Math.floor(\n        (153 * (month &gt; 2 ? month - 3 : month + 9) + 2) / 5\n)}\nfunction doty2dotm(doty = 0) {\n    const m = Math.floor((5 * doty + 2) / 153);\n    return doty - Math.floor((153 * m + 2) / 5) + 1;\n}\nnumbers = Array.from({length: 366}, (_, i) =&gt; i)\nset(viewof dotyInput, leapscrub[1])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction set(input, value) {\n  input.value = value;\n  input.dispatchEvent(new Event(\"input\", {bubbles: true}));\n}\n// https://observablehq.com/@mbostock/scrubber\nfunction Scrubber(values, {\n  format = value =&gt; value,\n  initial = 0,\n  direction = 1,\n  delay = null,\n  autoplay = true,\n  loop = true,\n  loopDelay = null,\n  alternate = false,\n  inputStyle = \"\"\n} = {}) {\n  values = Array.from(values);\n  const form = html`&lt;form style=\"font: 18px var(--monospace); font-variant-numeric: tabular-nums; display: flex; height: 33px; align-items: center;\"&gt;\n  &lt;button name=b type=button style=\"margin-right: 0.4em; width: 5em;\"&gt;&lt;/button&gt;\n  &lt;label style=\"display: flex; align-items: center;\"&gt;\n    &lt;input name=i type=range min=0 max=${values.length - 1} value=${initial} step=1 style=${inputStyle}&gt;\n    &lt;output name=o style=\"margin-left: 0.4em;\"&gt;&lt;/output&gt;\n  &lt;/label&gt;\n&lt;/form&gt;`;\n  let frame = null;\n  let timer = null;\n  let interval = null;\n  function start() {\n    form.b.textContent = \"Stop\";\n    if (delay === null) frame = requestAnimationFrame(tick);\n    else interval = setInterval(tick, delay);\n  }\n  function stop() {\n    form.b.textContent = \"Play\";\n    if (frame !== null) cancelAnimationFrame(frame), frame = null;\n    if (timer !== null) clearTimeout(timer), timer = null;\n    if (interval !== null) clearInterval(interval), interval = null;\n  }\n  function running() {\n    return frame !== null || timer !== null || interval !== null;\n  }\n  function tick() {\n    if (form.i.valueAsNumber === (direction &gt; 0 ? values.length - 1 : direction &lt; 0 ? 0 : NaN)) {\n      if (!loop) return stop();\n      if (alternate) direction = -direction;\n      if (loopDelay !== null) {\n        if (frame !== null) cancelAnimationFrame(frame), frame = null;\n        if (interval !== null) clearInterval(interval), interval = null;\n        timer = setTimeout(() =&gt; (step(), start()), loopDelay);\n        return;\n      }\n    }\n    if (delay === null) frame = requestAnimationFrame(tick);\n    step();\n  }\n  function step() {\n    form.i.valueAsNumber = (form.i.valueAsNumber + direction + values.length) % values.length;\n    form.i.dispatchEvent(new CustomEvent(\"input\", {bubbles: true}));\n  }\n  form.i.oninput = event =&gt; {\n    if (event && event.isTrusted && running()) stop();\n    form.value = values[form.i.valueAsNumber];\n    form.o.value = format(form.value, form.i.valueAsNumber, values);\n  };\n  form.b.onclick = () =&gt; {\n    if (running()) return stop();\n    direction = alternate && form.i.valueAsNumber === values.length - 1 ? -1 : 1;\n    form.i.valueAsNumber = (form.i.valueAsNumber + direction) % values.length;\n    form.i.dispatchEvent(new CustomEvent(\"input\", {bubbles: true}));\n    start();\n  };\n  form.i.oninput();\n  if (autoplay) start();\n  else stop();\n  Inputs.disposal(form).then(stop);\n  return form;\n}\ncalYear = !leapInput && dotwInput == \"Monday\" ? 6 : !leapInput && dotwInput == \"Tuesday\" ? 7 : !leapInput && dotwInput == \"Wednesday\" ? 2 : !leapInput && dotwInput == \"Thursday\" ? 3 : !leapInput && dotwInput == \"Friday\" ? 9 : !leapInput && dotwInput == \"Saturday\" ? 10 : !leapInput && dotwInput == \"Sunday\" ? 11 : leapInput && dotwInput == \"Monday\" ? 12 : leapInput && dotwInput == \"Tuesday\" ? 24 : leapInput && dotwInput == \"Wednesday\" ? 8 : leapInput && dotwInput == \"Thursday\" ? 20 : leapInput && dotwInput == \"Friday\" ? 4 : leapInput && dotwInput == \"Saturday\" ? 16 : leapInput && dotwInput == \"Sunday\" ? 28 : 0;\nstartCal0 = new Date(calYear, 0, 0);\nstartCal1 = new Date(calYear, 6, 0);\nstartCal2 = new Date(calYear, 12, 0);\ndatesCal0 = d3.utcDays(startCal0, startCal1);\ndatesCal1 = d3.utcDays(startCal1, startCal2);\nmonths = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nfunction unix2doty(unix) {\n  const dote = (\n    unix ?? Date.now()\n  ) / 86400000 + 719468,\n    socy = Math.floor((\n      dote &gt;= 0 ? dote\n      : dote - 146096\n    ) / 146097),\n  dotc = dote - socy * 146097,\n  yotc = Math.floor((dotc\n    - Math.floor(dotc / 1460)\n    + Math.floor(dotc / 36524)\n    - Math.floor(dotc / 146096)\n  ) / 365);\n  return dotc - (yotc * 365\n      + Math.floor(yotc / 4)\n      - Math.floor(yotc / 100)\n  )}\n\nfunction doty2dote(year = 1969, doty = 0, zone = 0) {\n    const cycle = Math.floor((year &gt;= 0 ? year : year - 399) / 400),\n    yote = year - cycle * 400;\n    return cycle * 146097 + yote * 365 + Math.floor(yote / 4) - Math.floor(yote / 100) + doty - zone\n}\nfunction doty2deco(yearDoty = [1969, 306], zone = 0) {\n    const yd = dote2doty(doty2dote(yearDoty[0], Math.floor(yearDoty[1])));\n    return `${yd[0].toString().padStart(4, \"0\")}+${yd[1].toString().padStart(3, \"0\")}${\n        yearDoty[1].toString().includes(\".\") ? \".\" + (\n            (yearDoty[1] &gt; 0) ? (yearDoty[1] - zone).toString().split(\".\").pop()\n            : [...(yearDoty[1] - zone).toString().split(\".\").pop()].map(\n                (e, i, a) =&gt; (i + 1 === a.length) ? 10 - e : 9 - e\n            ).join(\"\")\n        ) : \"\"\n    }`\n}\nfunction deco2doty(timestamp = \"1969+306.00000Z\") {\n    const arr = timestamp.toString().split(/(?=[+-]|[a-zA-Z])/, 3);\n    switch (arr.length) {\n        case 1: return [unix2doty(Date.now())[0], parseFloat(arr[0]), 0];\n        case 2: return (/^[a-zA-Z]+$/.test(arr[1]))\n            ? [unix2doty(Date.now())[0], parseFloat(arr[0]), zone2hour(arr[1]) / 24]\n            : [parseFloat(arr[0]), parseFloat(arr[1]), 0];\n    };\n    return [parseFloat(arr[0]), parseFloat(arr[1]), /^[a-zA-Z]+$/.test(arr[2])\n        ? zone2hour(arr[2]) / 24\n        : parseFloat(arr[2].replace(/([+-])/, \"$1\\.\"))];\n}\nfunction zone2hour(zone = \"Z\") {\n    return (zone = zone.toUpperCase()) == \"Z\" ? 0\n        : zone &gt; \"@\" && zone &lt; \"J\" ? zone.charCodeAt() - 64\n        : zone &gt; \"J\" && zone &lt; \"N\" ? zone.charCodeAt() - 65\n        : zone &lt; \"Z\" && zone &gt; \"M\" ? -(zone.charCodeAt() - 77)\n        : zone;\n}\nfunction doty2unix(year = 1969, doty = 306, zone = 0) {\n    return (doty2dote(year, doty, zone) - 719468) * 86400000;\n}\nfunction doty2isoc(yd) {\n    return new Date(doty2unix(...yd))\n}\nfunction doty2greg(doty = 306) {\n    const m = Math.floor((5 * doty + 2) / 153);\n    return [\n      Math.floor(m &lt; 10 ? m + 3 : m - 9),\n      Math.floor(doty - (153 * m + 2) / 5 + 2)\n    ];\n}\nfunction greg2doty(month = 1, day = 1) {\n    return Math.floor(\n        (153 * (month &gt; 2 ? month - 3 : month + 9) + 2) / 5 + day - 1\n)}\nfunction greg2year(year = 1970, month = 1) { return year - (month &lt; 3) }\nfunction isoc2doty(isoc) {\n  return [greg2year(isoc.getFullYear(), isoc.getUTCMonth() + 1), greg2doty(isoc.getUTCMonth() + 1, isoc.getUTCDate())];\n}\nleapInput = leapscrub[0]\nfunction addN(d) { return d + 365 + leapInput }\nfunction subN(d) { return d - 365 - leapInput }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Back to topCitationBibTeX citation:@online{laptev2024,\n  author = {Laptev, Martin},\n  title = {Date},\n  date = {2024},\n  urldate = {2024},\n  url = {https://maptv.github.io/dec/date},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nLaptev, Martin. 2024. ‚ÄúDate.‚Äù 2024. https://maptv.github.io/dec/date.",
    "crumbs": [
      "Measurement",
      "ISO Date"
    ]
  },
  {
    "objectID": "dec/time/index.html",
    "href": "dec/time/index.html",
    "title": "Ordinal date",
    "section": "",
    "text": "My website serves as a demonstration of both the Quarto publishing system and the Dec measurement system. I use several clever hacks to get Quarto to display all of the dates on my website in the Dec year+day format. If you are not interested in Dec dates, you may want to skip to the section on Quarto filters, render scripts, and include files.\n\nDec dates\nThe year+day format of Dec dates is derived from the year of the era equation: \\(\\colorbox{yellow}{y}{=}\\lfloor\\colorbox{yellow}{y}\\rfloor{+}\\colorbox{cyan}{d}{\\div}\\colorbox{orange}{n}\\). In this equation, \\(\\colorbox{yellow}{y}\\) is the decimal years since the Dec epoch (Year 0 Day 0), \\(\\lfloor\\colorbox{yellow}{y}\\rfloor\\) is \\(\\colorbox{yellow}{y}\\) floored to obtain an integer year, \\(\\colorbox{cyan}{d}\\) is the zero-based day of the year, and \\(\\colorbox{orange}{n}\\) is the total number of days in the year. The current values in this equation are: \nDec dates only include the first two terms from the equation above (\\(\\colorbox{yellow}{y}\\) and \\(\\colorbox{cyan}{d}\\)), because \\(\\colorbox{orange}{n}\\) is not needed to identify a specific date in time, only has 2 possible values (365 or 366), remains constant for long periods of time (366, 1095, or 2920 days), and can be calculated using the Dec year length equation:\n\\[\\colorbox{orange}{n}=\\begin{cases}\n  366&{\\begin{align}\\text{if } (\\lfloor \\colorbox{yellow}{y}\\rfloor+1)\\text{ \\% }4=0\\\\\n  \\land(\\lfloor \\colorbox{yellow}{y}\\rfloor+1)\\text{ \\% }100\\neq0\\\\\n  \\lor(\\lfloor \\colorbox{yellow}{y}\\rfloor+1)\\text{ \\% }400=0\\end{align}}\\\\\\\\\n  365&{\\text{otherwise.}}\\end{cases}\\]\nIn the Dec year length equation, \\(\\text\\%\\) is the modulo operator, \\(\\land\\) is the logical conjunction operator, and \\(\\lor\\) is the logical disjunction operator. The easiest way to explain this equation is in terms of the Gregorian calendar: the length of a Dec year is 366 days if the subsequent year (\\(\\lfloor\\colorbox{yellow}{y}\\rfloor{+}1\\) ) is a Gregorian calendar leap year and 365 days otherwise.\nDec dates look almost identical to ISO 8601 ordinal dates. On the surface, it appears that the only difference is their delimiter (+ versus -), but they also have different starting values (0 versus 1), epochs (Year 0 Day 0 versus Year -1 Day 306), and year length equations (\\(\\lfloor\\colorbox{yellow}{y}\\rfloor{+}1\\) versus \\(\\lfloor\\colorbox{yellow}{y}\\rfloor\\)).\nUnlike ISO 8601 dates, Dec dates can omit the year and track annual events such as anniversaries. Use the sliders below to select a special date like your birthdayüéÇ! You can also press the Play‚ñ∂Ô∏èbutton below to make the sliders cycleüîÑback and forth through every day of the year and its corresponding month and day of the month.\n\nviewof scrubberDoty = Scrubber(numbers, {autoplay: false, alternate: true, delay: 86.4, loopDelay: 864, format: y =&gt; \"\", inputStyle: \"display:none;\"})\nviewof inputDoty = Inputs.range([0, 365], {value: 306, step: 1, label: \"day of the year\"});\nviewof monthInput = transformInput(\n    Inputs.range([1, 12], {step: 1, label: \"month\"}),\n    {bind: viewof inputDoty, transform: doty2month, invert: month2doty}\n);\nviewof dotmInput = transformInput(\n    Inputs.range([1, 31], {step: 1, label: \"day of the month\"}),\n    {bind: viewof inputDoty, transform: doty2dotm, invert: (x =&gt; Math.floor(( 153 * (\n        viewof monthInput.value &gt; 2\n        ? viewof monthInput.value - 3\n        : viewof monthInput.value + 9) + 2\n    ) / 5 + x - 1\n))});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nviewof yd = Inputs.form([\n  Inputs.number({label: \"year\", value: \"1969\"}),\n  Inputs.number({label: \"doty\", value: \"306\"})\n])\n\n\n\n\n\n\n\nviewof decoOutput = transformInput(\n  Inputs.text({label: \"deco\", placeholder: \"year+day.ddd\", value: \"1969+306\"}),\n  {bind: viewof yd, transform: doty2deco, invert: deco2doty});\n\n\n\n\n\n\n\n\n\n\n\nviewof inputDatetime = Inputs.datetime({label: \"date\", value: `${decoYear}-03-01T00:00`})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA Dec beat is a centimilliday (\\(10^{-5}\\) of a day), which can be thought of as a heart‚ù§Ô∏èbeat or musicalüéµbeat with a constant rate or tempo of \\(69.\\overline4\\) beats per minute.\nDec dates and times are measured in days. The subsequent article on my website covers Dec times. While Dec dates The units for both Dec dates and times are days, but on different scales. decidays (tenths of a day), and beats, respectively. An example of a duration is the time since this webpage was loaded: .\nDec does not use months or days of the month, but dates can be include a year can be entered using numeric or text inputs. Similarly, the second Play‚ñ∂Ô∏èbutton below will go through every day of the year in the current year. The day in year+day dates can therefore function independently to represent the date of an event that occurs on the same day of the year on an annual basis.\nThe animations above goes through an entire year in 36.5 beats, a million times fasterüèéÔ∏èthan the actual speed of time! A Dec beat is a centimilliday (1% of a milliday, \\(10^{-5}\\) of a day, or 86.4% of a second), which can be thought of as a heart‚ù§Ô∏èbeat or musicalüéµbeat with a constant rate or tempo of 69.4ÃÖ beats per minute. In addition to displaying time on clocksüï∞Ô∏èand‚åöÔ∏èwatches, beats can be used to measure durations, such as the time since this webpage was loaded: .\nUsing the Observable datetime input in ?@exm-intro-date, you can select a year, month, dotm, hour, and minute to see the equivalent 1) deco timestamp (year+day.clock) and 2) year date (year.yyy) in ?@lst-intro-date. For comparison, the current deco timestamp is .\nFor example, the current day of the year (doty) is Day .\n60-day shift\nAnimation\nConversion functions year to year, doty to month and dotm, and vice versa. Conclusion: it is easier to work with unix time.\nCan we also find the day of the week? First, use dote2dotw function. Conclusion: it is easier to work with deks instead of weeks.\ndays of the dek\nDec finger counting method svg\nThe Dec epoch, . This 60-day shift enables simplest way to describe Dec dates my website are based on the Gregorian calendar, but any calendar with fixed rules can be turned in a Dec calendar (Decalendar) by expressing its dates as zero-based moving its starting point ().\nwith simple arithmetic, Decalendar is perennial, meaning that its features remain the same every year. Any\nThis major Dec dates can be omit the year and still be unequivocally converted into a month and a day start counting days from zero and do not need omit the year .\nThe first of the Dec year, Day 0, corresponds to Day 59 or Day 60 have a different starting point while ISO 8601 ordinal dates start counting from one. Unlike ISO 8601 ordinal dates, Dec dates can omit the year and still be useful. are zero-based and can the ordinal day component of Dec dates can be unequivocally converted into Gregorian calendar dates Dec addresses the two major flaws of the by moving the start of the year to March 1. When Leap Day is the last day of the year, the day numbers (indexes) used by Decalendar remain constant year to year. Starting the year on March 1 also brings Decalendar in better alignment with the metereological seasons.\nDec dates overcome several major flaws with the Gregorian calendar. The day in year+day dates is referred to as the ‚Äúday of the year‚Äù or doty.\na single number that can identify specific days of the year (like months and days of the month) and coordinate schedules of work and rest days (like weeks and days of the week). Essentially, Dec greatly simplifies the Gregorian calendar by replacing months and weeks with units called deks.\nGregorian calendar dates are not aligned with the days of the week. In contrast, the day of the dek (dotd) is simply the last digit of the day number in the .y format.\nThe day in year+day dates is a single number that can identify specific days of the year (like months and days of the month) and coordinate schedules of work and rest days (like weeks and days of the week). Essentially, Dec greatly simplifies the Gregorian calendar by replacing months and weeks with units called deks.\nUnlike months and weeks, deks are 10 days long and thus work well with our decimal number system. The dek and day of the dek are provided by the first two digits and the last digit of the 3-digit day number in Dec dates, respectively. For example, the current dek is Dek  and the current day of the dek is Day .\nThe most prominent Dec date on my site is the one in the Dec timestamp in navigation bar (navbar) above: . In this article, I will focus only on Dec dates (), but I will discuss Dec times () in the next article in the Measurement section.\nI generate all of the dates on my site from UNIX time using calculations that I adapted from the civil_from_days function in Howard Hinnant‚Äôs date library. Each tab in the tabset panel below shows a different implementation of a function called unix2date which converts UNIX time into year+day dates.\nIn this function, socy is an abbreviation for solar cycle and dote, dotc, and yotc are acronyms for ‚Äúday of the era‚Äù, ‚Äúday of the cycle‚Äù, and ‚Äúday of the cycle‚Äù, respectively. A solar cycle in the Gregorian calendar is 400 years. A calendar era is the time that has passed since a starting point called a calendar epoch. The Dec epoch is Year 0 Day 0.\n\nunix = {\n  while(true) {\n    yield Date.now();\n  }\n}\ntick = {\n  let i = 0;\n  while (true) {\n    yield Promises.tick(864, ++i);\n  }\n}\ntickTime = tick % 1e5\n// http://howardhinnant.github.io/date_algorithms.html#civil_from_days\nfunction unix2dote(unix, zone) {\n  return [\n    (unix ?? Date.now()) / 86400000\n    + (zone = zone ?? (\n      10 - Math.round((new Date)\n        .getTimezoneOffset() / 144)\n    ) % 10) / 10 + 719468, zone]}\nfunction dote2doty(dote, zone = 0) {\n  const socy = Math.floor((\n      dote &gt;= 0 ? dote\n      : dote - 146096\n    ) / 146097),\n  dotc = dote - socy * 146097,\n  yotc = Math.floor((dotc\n    - Math.floor(dotc / 1460)\n    + Math.floor(dotc / 36524)\n    - Math.floor(dotc / 146096)\n  ) / 365);\n  return [\n    yotc + socy * 400,\n    dotc - (yotc * 365\n      + Math.floor(yotc / 4)\n      - Math.floor(yotc / 100)\n  ), zone]}\nfunction doty2deco(year = 1969, doty = 306, zone = 0) {\n  return `${year.toString().padStart(4, \"0\")}+${Math.floor(doty).toString().padStart(3, \"0\")}${String(doty % 1 * 10).slice(0, 6)}-${zone}`\n}\nydz = dote2doty(...unix2dote(unix))\ndeco = doty2deco(...ydz)\n// https://observablehq.com/@observablehq/text-color-annotations-in-markdown#textcolor\nfunction setStyle(content, style = {}) {\n  function yiq(color) {\n    const {r, g, b} = d3.rgb(color);\n    return (r * 299 + g * 587 + b * 114) / 1000 / 255; // returns values between 0 and 1\n  }\n  const {\n    background,\n    color = yiq(background) &gt;= 0.6 ? \"#111\" : \"white\",\n    padding = \"0 1px\",\n    borderRadius = \"4px\",\n    fontWeight = 900,\n    fontSize = \"1em\",\n    ...rest\n  } = typeof style === \"string\" ? {background: style} : style;\n  return htl.html`&lt;span style=${{\n    background,\n    color,\n    padding,\n    borderRadius,\n    fontWeight,\n    ...rest\n  }}&gt;${content}&lt;/span&gt;`;\n}\nfunction year2bool(year = 1970) {\n    return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;\n}\ndecoYear = deco.slice(0, 4)\ndecoDate = deco.slice(5, 8)\ndecoTime = deco.slice(8, 14)\ndecoTimeZone = deco[15]\nnDaysInYear = 365 + year2bool(ydz[0] + 1)\nfracYear = (ydz[0] + (ydz[1] - ydz[2]) / nDaysInYear).toFixed(8)\nstyledDecoYear0 = setStyle(decoYear, d3.schemePaired[10])\nstyledDecoYear1 = setStyle(decoYear, d3.schemePaired[10])\nstyledFracYear = setStyle(fracYear, d3.schemePaired[10])\nstyledDecoDate0 = setStyle(decoDate, d3.schemePaired[1])\nstyledDecoDate1 = setStyle(decoDate, d3.schemePaired[1])\nstyledNdays = setStyle(nDaysInYear * 10, d3.schemePaired[1])\nstyledDecoTime0 = setStyle(decoTime, d3.schemePaired[2])\nstyledDecoTime1 = setStyle(decoTime, d3.schemePaired[2])\nstyledDecoTime2 = setStyle(decoTime, d3.schemePaired[2])\nstyledTimeZone0 = setStyle(decoTimeZone, d3.schemePaired[3])\nstyledTimeZone1 = setStyle(decoTimeZone, d3.schemePaired[3])\nstyledTimeZone2 = setStyle(decoTimeZone, d3.schemePaired[3])\nstyledTickTime = setStyle(tickTime, d3.schemePastel2[0])\n// https://observablehq.com/@juang1744/transform-input/1\ntransformInput = function(target, {bind: source, transform = identity, involutory = false, invert = involutory ? transform : inverse(transform)} = {}){\n  if (source === undefined) {\n    source = target;\n    target = html`&lt;div&gt;${source}&lt;/div&gt;`;\n  }\n  function sourceInputHandler() {\n    target.removeEventListener(\"input\", targetInputHandler);\n    setTransform(target).to(transform(source.value)).andDispatchEvent();\n    target.addEventListener(\"input\", targetInputHandler);\n  }\n  function targetInputHandler() {\n    source.removeEventListener(\"input\", sourceInputHandler);\n    setTransform(source).to(invert(target.value)).andDispatchEvent();\n    source.addEventListener(\"input\", sourceInputHandler);\n  }\n  source.addEventListener(\"input\", sourceInputHandler);\n  target.addEventListener(\"input\", targetInputHandler);\n  invalidation.then(() =&gt; {\n    source.removeEventListener(\"input\", sourceInputHandler);\n    target.removeEventListener(\"input\", targetInputHandler);\n  });\n  sourceInputHandler();\n  return target;\n}\nsetTransform = (input) =&gt; ({to: (value) =&gt; (input.value = value, {andDispatchEvent: (event = new Event(\"input\")) =&gt; input.dispatchEvent(event)})});\nfunction inverse(f) {\n  switch (f) {\n    case identity:  return identity;\n    case Math.sqrt: return square;\n    case Math.log:  return Math.exp;\n    case Math.exp:  return Math.log;\n    default:        return (x =&gt; solve(f, x, x));\n  }\n  function solve(f, y, x = 0) {\n    const dx = 1e-6;\n    let steps = 100, deltax, fx, dfx;\n    do {\n      fx = f(x)\n      dfx = (f(x + dx) - fx) || dx;\n      deltax = dx * (fx - y)/dfx\n      x -= deltax;\n    } while (Math.abs(deltax) &gt; dx && --steps &gt; 0);\n    return steps === 0 ? NaN : x;\n  }\nfunction square(x) {\n    return x * x;\n  }\n}\nfunction identity(x) {\n  return x;\n}\nfunction doty2month(doty = 0) {\n    const m = Math.floor((5 * doty + 2) / 153);\n    return Math.floor(m &lt; 10 ? m + 3 : m - 9);\n}\nfunction month2doty(month = 1) {\n    return Math.floor(\n        (153 * (month &gt; 2 ? month - 3 : month + 9) + 2) / 5\n)}\nfunction doty2dotm(doty = 0) {\n    const m = Math.floor((5 * doty + 2) / 153);\n    return doty - Math.floor((153 * m + 2) / 5) + 1;\n}\nnumbers = Array.from({length: 366}, (_, i) =&gt; i)\nset(viewof inputDoty, scrubberDoty)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction set(input, value) {\n  input.value = value;\n  input.dispatchEvent(new Event(\"input\", {bubbles: true}));\n}\n// https://observablehq.com/@mbostock/scrubber\nfunction Scrubber(values, {\n  format = value =&gt; value,\n  initial = 0,\n  direction = 1,\n  delay = null,\n  autoplay = true,\n  loop = true,\n  loopDelay = null,\n  alternate = false,\n  inputStyle = \"\"\n} = {}) {\n  values = Array.from(values);\n  const form = html`&lt;form style=\"font: 18px var(--monospace); font-variant-numeric: tabular-nums; display: flex; height: 33px; align-items: center;\"&gt;\n  &lt;button name=b type=button style=\"margin-right: 0.4em; width: 5em;\"&gt;&lt;/button&gt;\n  &lt;label style=\"display: flex; align-items: center;\"&gt;\n    &lt;input name=i type=range min=0 max=${values.length - 1} value=${initial} step=1 style=${inputStyle}&gt;\n    &lt;output name=o style=\"margin-left: 0.4em;\"&gt;&lt;/output&gt;\n  &lt;/label&gt;\n&lt;/form&gt;`;\n  let frame = null;\n  let timer = null;\n  let interval = null;\n  function start() {\n    form.b.textContent = \"Pause\";\n    if (delay === null) frame = requestAnimationFrame(tick);\n    else interval = setInterval(tick, delay);\n  }\n  function stop() {\n    form.b.textContent = \"Play\";\n    if (frame !== null) cancelAnimationFrame(frame), frame = null;\n    if (timer !== null) clearTimeout(timer), timer = null;\n    if (interval !== null) clearInterval(interval), interval = null;\n  }\n  function running() {\n    return frame !== null || timer !== null || interval !== null;\n  }\n  function tick() {\n    if (form.i.valueAsNumber === (direction &gt; 0 ? values.length - 1 : direction &lt; 0 ? 0 : NaN)) {\n      if (!loop) return stop();\n      if (alternate) direction = -direction;\n      if (loopDelay !== null) {\n        if (frame !== null) cancelAnimationFrame(frame), frame = null;\n        if (interval !== null) clearInterval(interval), interval = null;\n        timer = setTimeout(() =&gt; (step(), start()), loopDelay);\n        return;\n      }\n    }\n    if (delay === null) frame = requestAnimationFrame(tick);\n    step();\n  }\n  function step() {\n    form.i.valueAsNumber = (form.i.valueAsNumber + direction + values.length) % values.length;\n    form.i.dispatchEvent(new CustomEvent(\"input\", {bubbles: true}));\n  }\n  form.i.oninput = event =&gt; {\n    if (event && event.isTrusted && running()) stop();\n    form.value = values[form.i.valueAsNumber];\n    form.o.value = format(form.value, form.i.valueAsNumber, values);\n  };\n  form.b.onclick = () =&gt; {\n    if (running()) return stop();\n    direction = alternate && form.i.valueAsNumber === values.length - 1 ? -1 : 1;\n    form.i.valueAsNumber = (form.i.valueAsNumber + direction) % values.length;\n    form.i.dispatchEvent(new CustomEvent(\"input\", {bubbles: true}));\n    start();\n  };\n  form.i.oninput();\n  if (autoplay) start();\n  else stop();\n  Inputs.disposal(form).then(stop);\n  return form;\n}\nfunction unix2deco(ms = 0) {\n    return doty2deco(unix2doty(ms));\n};\nfunction deco2doty(timestamp = \"1969+306.00000Z\") {\n    const arr = timestamp.toString().split(/(?=[+-]|[a-zA-Z])/, 3);\n    switch (arr.length) {\n        case 1: return [unix2doty(Date.now())[0], parseFloat(arr[0]), 0];\n        case 2: return (/^[a-zA-Z]+$/.test(arr[1]))\n            ? [unix2doty(Date.now())[0], parseFloat(arr[0]), zone2hour(arr[1]) / 24]\n            : [parseFloat(arr[0]), parseFloat(arr[1]), 0];\n    };\n    return [parseFloat(arr[0]), parseFloat(arr[1]), /^[a-zA-Z]+$/.test(arr[2])\n        ? zone2hour(arr[2]) / 24\n        : parseFloat(arr[2].replace(/([+-])/, \"$1\\.\"))];\n}\nfunction zone2hour(zone = \"Z\") {\n    return (zone = zone.toUpperCase()) == \"Z\" ? 0\n        : zone &gt; \"@\" && zone &lt; \"J\" ? zone.charCodeAt() - 64\n        : zone &gt; \"J\" && zone &lt; \"N\" ? zone.charCodeAt() - 65\n        : zone &lt; \"Z\" && zone &gt; \"M\" ? -(zone.charCodeAt() - 77)\n        : zone;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Back to topCitationBibTeX citation:@online{laptev2024,\n  author = {Laptev, Martin},\n  title = {Ordinal Date},\n  date = {2024},\n  urldate = {2024},\n  url = {https://maptv.github.io/dec/date},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nLaptev, Martin. 2024. ‚ÄúOrdinal Date.‚Äù 2024. https://maptv.github.io/dec/date.",
    "crumbs": [
      "Measurement",
      "Time"
    ]
  },
  {
    "objectID": "software/positron/index.html",
    "href": "software/positron/index.html",
    "title": "Positron",
    "section": "",
    "text": "The goal of this blog post, the second in the Tools blog post series summarized by Figure¬†1, is to set up the Visual Studio Code (VSCode) source-code editor to run in the remote development environments provided by the Codespaces and GitPod computing platforms. To accomplish this goal, we will use VSCode to edit a setup script and configuration files in a Git repository (repo) named dotfiles.\n\n\n\n\n\n\n\nflowchart TB\n   A[Git]--&gt;B[VSCode]--&gt;C[Quarto]\n   C--&gt;D[Observable]\n   C--&gt;E[Jupyter]\n   C--&gt;F[Knitr]\n   click A \"../git\"\n   click B \"../vscode\"\n   click C \"../quarto\"\n   click D \"../observable\"\n   click E \"../knitr\"\n   click F \"../jupyter\"\n   style B stroke:#99f,stroke-width:5px\n\n\n\n\nFigure¬†1: Tools series navigation chart",
    "crumbs": [
      "Software",
      "Positron"
    ]
  },
  {
    "objectID": "software/positron/index.html#tldr",
    "href": "software/positron/index.html#tldr",
    "title": "Positron",
    "section": "",
    "text": "The goal of this blog post, the second in the Tools blog post series summarized by Figure¬†1, is to set up the Visual Studio Code (VSCode) source-code editor to run in the remote development environments provided by the Codespaces and GitPod computing platforms. To accomplish this goal, we will use VSCode to edit a setup script and configuration files in a Git repository (repo) named dotfiles.\n\n\n\n\n\n\n\nflowchart TB\n   A[Git]--&gt;B[VSCode]--&gt;C[Quarto]\n   C--&gt;D[Observable]\n   C--&gt;E[Jupyter]\n   C--&gt;F[Knitr]\n   click A \"../git\"\n   click B \"../vscode\"\n   click C \"../quarto\"\n   click D \"../observable\"\n   click E \"../knitr\"\n   click F \"../jupyter\"\n   style B stroke:#99f,stroke-width:5px\n\n\n\n\nFigure¬†1: Tools series navigation chart",
    "crumbs": [
      "Software",
      "Positron"
    ]
  },
  {
    "objectID": "software/positron/index.html#sec-intro",
    "href": "software/positron/index.html#sec-intro",
    "title": "Positron",
    "section": "Introduction",
    "text": "Introduction\nEven more Web-based editors can even run code and build software if equipped with computational resources via a service such as GitHub Codespaces and GitPod. have free tiers that should be sufficient for most . in cloud-based environments, which facilitates reproducibility. Notably,\nLike vscode.dev, these web-based editors provide access to the Visual Studio Code (VSCode) source-code editor via a web browser, but distinguish themselves from editors that instead of the local file system. from other services that such as by\nIf you do not have such a repo, you can create one by following along with the previous post in my tools blog post series, which is shown in Figure¬†1.",
    "crumbs": [
      "Software",
      "Positron"
    ]
  },
  {
    "objectID": "software/positron/index.html#sec-setup",
    "href": "software/positron/index.html#sec-setup",
    "title": "Positron",
    "section": "Setup",
    "text": "Setup\n\nHomebrew\nLinux, macOS, or Windows Subsystem for Linux (WSL) users can use Homebrew to install everything needed to follow along with this blog post. First, install Homebrew with the latest .pkg installer for macOS or by running the Example¬†1 Unix shell code in your terminal.\n\nExample 1 ¬†\n/bin/bash -c \"$(curl -fsSL https://raw.github\\\nusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\nIf you are not completely satisfied with the integrated terminal built into your preferred source-code editor or the standalone terminal that comes with your operating system (OS), you can use Homebrew to install a new one. The standalone terminal I use most often is iTerm2, which is only for macOS, but I also have the following multi-OS terminals: Alacritty, Hyper, Kitty, and Tabby.\nAfter installing Homebrew, you can run brew doctor in your terminal to confirm that everything is set up correctly. If the brew command is not available, you need to follow the instructions provided after installation to add brew to your PATH variable.\nOnce Homebrew is ready, you can run the shell code in Example¬†2 to create a file called Brewfile with the echo shell command and install everything listed in this newly created Brewfile with the brew bundle shell command.\n\nExample 2 ¬†\necho 'brew \"gh\"\\nbrew \"git\"\\nbrew \"glab\"\ncask \"github\"\\ncask \"rstudio\"\\ncask \"vscodium\"\ncask \"visual-studio-code\"' &gt; Brewfile\nbrew bundle\n\nThe Brewfile created by the shell code in Example¬†2 installs:\n\nGit,\nthe command line interfaces (CLIs) for\n\nGitHub and\nGitLab,\n\nthe GitHub Desktop Git Graphical User Interface (GUI), and\nthree source-code editors:\n\nVisual Studio Code (VSCode),\nVSCodium, and\nRStudio.\n\n\nIf you are curious about how I set up my computer, you can take a look at my Brewfile and other configuration files in my setup repo on GitHub and GitLab. I will highlight a few configuration files in Section¬†4.\n\n\nCodespaces\nAs an alternative to installing tools on your computer, you can use GitHub Codespaces to perform all development tasks remotely. To get a feel for Codespaces, I recommend you first try the github.dev editor.\nBoth Codespaces and github.dev allow you to edit files in any GitHub repository via VSCode in your browser and load your VSCode settings automatically via Settings Sync, but github.dev can be started by going to any repo on GitHub and pressing . or changing the .com in the URL to .dev, e.g. https://github.com/maptv/maptv.github.io to https://github.dev/maptv/maptv.github.io. The github.dev editor starts up fast and is completely free, but comes with restrictions that prevent us from running code, building software, accessing the integrated terminal, or using non-web extensions.\nIn addition to being free of these restrictions, Codespaces allows us to use JupyterLab as the web interface instead of VSCode by appending /?editor=jupyter to the Codespaces URL. If you use a JetBrains integrated development environmentproducts, such as PyCharm (IDE), you can also try appending /?editor=jetbrains to the Codespaces URL and accessing Codespaces via JetBrains Gateway.\nEvery Codespaces instance (codespace) is pre-equipped with commonly used tools. If you want your codespaces to start with additional tools or settings for any tools other than VSCode, you will need to create a repo called dotfiles and enable automatic installation of your configuration files into every codespace you create.\n‚ÄúDotfiles‚Äù is a general term for files that contain user settings. The term ‚Äúdotfiles‚Äù is derived from hidden files in Unix and Unix-like environments, which have names that start with a dot (.). Despite the origin of the term, not all dotfiles are hidden files.\nIn fact, there is a new convention that places non-hidden configuration files in a hidden directory called .config. Despite the growing popularity of this new convention, many dotfiles are still stored according to the old convention, i.e. as hidden files in the home directory.\nExample¬†3 shows how the Vim and Neovim text editors differ in their approach to dotfile storage. The Vim configuration file ~/.vimrc follows the old convention, while the Neovim configuration file (~/.config/nvim/init.vim) follows the new convention, where ~ represents the home directory and / is directory delimiter used in Unix paths.\n\nExample 3 ¬†\n~\n‚îú‚îÄ‚îÄ .config\n‚îÇ¬†¬† ‚îî‚îÄ‚îÄ nvim\n‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ init.vim\n‚îî‚îÄ‚îÄ .vimrc\n\nIf do not have configuration files for any tool other than VSCode and do not need to install anything as part of Codespaces setup, you can forego creating a dotfiles repo and simply enable Settings Sync.\nyou can simply include all of your configuration files in your dotfiles repo with the desired directory structure, e.g.¬†as in Example¬†3. This way, whenever a codespace is created, its home directory (/home/codespace) will be set up to match your dotfiles repo using symbolic links.\nWhile this automatic dotfile setup approach does not allow you to install any additional tools, it is simple and avoids any installation steps that can significantly slow down build times. Importantly, if GitHub determines that your dotfiles repo contains a setup script based on its naming convention, it will not run the setup script and ignore any other files in the repo, because of the expectation that users with setup scripts will want to organize their configuration files themselves.\nFor more information on dotfiles, check out the resources at https://dotfiles.github.io. Regardless o you do have way to configure VSCode, you do not have to set up Codespaces. Instead you can any of the steps below https://docs.github.com/en/codespaces/setting-your-user-preferences/personalizing-github-codespaces-for-your-account#settings-sync\nThe setup script can install\nRegardless of whether you have a dotfiles repo, you can use Settings Sync to maintain consistency between your local and remote development environments. keep all of your configuration files in a repo called dotfiles. Instead\nbut we can add anything that may be missing with a Brewfile and a setup script.\nIn other words, we have the option to simply put configuration files in our dotfiles repo and not install anything.\nMy configuration files have dependencies that are not included in the default Codespaces image, so the configuration-files-only approach would not work for me. Codespaces of the expectation\nI chose setup.sh as the name of my setup script because it was shortest name that followed the naming convention set by GitHub and had the .sh filename extension.\nFor my configurationI need at very least convenient feature is disabled when we include a setup script in our dotfiles repo, because\nThe tools listed in the Brewfile can be installed with a shell script that GitHub will run when building the Codespace.\nIt is essential that your setup script be added to Git as an executable script! I only needed to run the shell code in Example¬†4 once for Git to change the mode of setup.sh and remember forever that its access permissions include execution (x).\n\nExample 4 ¬†\ngit add setup.sh --chmod=+x\n\nMaintaining local and remote settings may be challenging, but Homebrew makes it easier with the $HOMEBREW_PREFIX environment variable. This variable contains the Homebrew installation path that matches your computer hardware and OS.\nBefore you can use $HOMEBREW_PREFIX, the brew command needs to be added to your PATH. To ensure Codespaces setup, I added the code in Example¬†5 to my .zshrc.\n\nExample 5 ¬†\n\n\n.zshrc\n\nif [[ \"$(uname)\" == 'Linux' ]]; then\n    eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"\nfi\n\n\nTo prevent conflicts with web browser keybindings, you can install Codespaces as a Progressive Web App (PWA) by clicking on the ‚ÄúInstall Codespaces‚Äù icon at the end of the URL bar in Chrome or any Chromium-based web browser. When running as a PWA, Codespaces behaves like a desktop application and can thus provide a familiar user experience on any computer!\nOn macOS, the PWA installation location is ~/Applications/Chrome Apps.localized.\n\n\nRepository\nBefore you can benefit from everything GitHub and GitLab have to offer, you will need a GitHub and/or GitLab account and an SSH key. Even though there are other authentication methods, SSH keys are still the easiest way to authenticate to GitHub and GitLab.\nYou can create a repo using the web interface of https://github.com or https://gitlab.com in your browser, but the best way to start a new project is using the CLI for GitHub or GitLab in your terminal. First, run gh auth login or glab auth login and follow the prompts to authenticate via your web browser or with an authentication token.\nThe GitHub CLI allows you to add an SSH key to your account during or after authentication. The GitLab CLI does not handle SSH keys during authentication, but has a similar command for adding an SSH key to your GitLab account.\nAfter authentication and SSH key setup, you can run the code in either of the code chunks in Example¬†6 to set up your local and remote repos and create a Quarto website project in the local repo. You can create shell alias that combine all of the repo creation steps like I did in my .zshrc.\n\nExample 6 ¬†\n\nGitHubGitLab\n\n\ncd # start in home directory\nmkdir USERNAME\ncd USERNAME\ngh repo create REPONAME --add-readme --clone --public\ncd REPONAME\n\n\ncd # start in home directory\nmkdir USERNAME\ncd USERNAME\nglab repo create REPONAME --readme --defaultBranch main --public\ncd REPONAME\ngit pull origin main\ngit branch --set-upstream-to=origin/main main\n\n\n\n\nTo make it easier to backup my repos on both GitHub and GitLab, I set up each local repo to have two origin remote URLs using the code as shown in Example¬†7. With this setting, running git push in my local repo updates my remote repos on both GitHub and GitLab.\n\nExample 7 ¬†\ngit remote add lab git@gitlab.com:maptv/maptv.gitlab.io\ngit remote add hub git@github.com:maptv/maptv.github.io\ngit remote set-url --add origin $(git remote get-url lab)",
    "crumbs": [
      "Software",
      "Positron"
    ]
  },
  {
    "objectID": "software/positron/index.html#sec-workflow",
    "href": "software/positron/index.html#sec-workflow",
    "title": "Positron",
    "section": "Git workflow",
    "text": "Git workflow\nWhen I want to add or update the content on my site, I go through the steps in the standard Git workflow shown in Figure¬†2. Every time I ‚Äúpush‚Äù a collection of changes called a commit to my maptv.github.io repo on GitHub, a continuous integration (CI) system called GitHub Actions automatically completes the steps required to build and publish my website.\n\n\n\n\n\n\nflowchart LR\n   A[working&lt;br/&gt;directory]-.git&lt;br/&gt;add.-&gt;B{{staging&lt;br/&gt;area}}-.git&lt;br/&gt;commit.-&gt;C([local&lt;br/&gt;repo])-.git&lt;br/&gt;push.-&gt;D(remote&lt;br/&gt;repo)\n\n\n\n\nFigure¬†2: Git workflow\n\n\n\n\n\n\nShell aliases\nTo make it easier to make incremental changes to my website and frequently release new content, I combined all of the git shell commands in Figure¬†2 into shell aliases. You can add shell aliases to a shell configuration file like .bashrc or .zshrc on your computer to shorten one or more commands and any associated command arguments.\nThe git commit aliases in the .zshrc file in my setup repo on GitHub and GitLab target different groups of files for inclusion in the next commit. For example, cmp targets staged files, camp targets tracked files, a.cmp targets files in the current directory, and aacmp targets files in the repo.\nExample¬†8 shows the aacmp alias as an example of the shell alias syntax. The mnemonic device for this alias is add all, commit with a message, and push.\n\nExample 8 ¬†\n\n\n.zshrc\n\nalias aacmp=\"func() { git add --all && git commit --message \\\n    \\\"$(echo '${*:-$(echo $(git diff --name-status --cached \\\n    | tr \"[:space:]\" \" \"))}')\\\" && git push; }; func\"\n\n\nAliases like aacmp allow me to enter free-form commit messages directly on the command line without quotes, e.g.¬†aacmp edit first post. If you decide to try one of these aliases, please exercise extreme caution as any un-escaped or un-quoted metacharacters may yield surprising effects instead of being included verbatim in the commit message, e.g.¬†* is replaced by all of the file and directory names in the current directory!\nIf no commit message is provided after the aliases, a generic commit message is created that includes the change type and name of each changed file. In Section¬†4.2, I describe how I used this generic commit message approach to further simplify the Git workflow.\n\n\nKeybindings\nAn alternative to a shell alias that combines git commands is to use a keyboard shortcut in a Git Graphical User Interface (GUI) such as GitHub Desktop or the Git interface in a code editor like VSCode, VSCodium, or RStudio. I use keyboard shortcuts in VSCode and VSCodium to send shell commands to the integrated terminal without moving my focus away from the files I am editing.\nI created different shortcuts to control which files are included in each commit: ‚å•‚áßF for the current file only, ‚å•‚áßS for already staged files, ‚å•‚áßT for all tracked files, and ‚å•‚áßU for all files including untracked files. I also have keyboard shortcuts that affect a specific directory (and all of its subdirectories): ‚å•‚áßD for the current file‚Äôs directory, ‚å•‚áß. for shell‚Äôs current directory, ‚å•‚áßC for the current working directory according to VSCode/VSCodium, ‚å•‚áßW for the Workspace directory.\nExample¬†9 displays the ‚å•‚áßF shortcut as an example of the VSCode/VSCodium shortcut syntax. This shortcut uses the escape code for the return key (\\u000D) to run several git commands and predefined variables to insert the absolute (${file}) and relative (${relativeFile}) path to the currently open file.\n\nExample 9 ¬†\n\n\nkeybindings.json\n\n{\n  \"key\": \"shift+alt+f\",\n  \"command\": \"workbench.action.terminal.sendSequence\", \"args\": { \"text\":\n    \"git add ${file} && git commit -m \\\"M ${relativeFile}\\\" && git push\\u000D\" },\n  \"when\": \"terminalIsOpen\"\n}\n\n\nIf you want to set up similar shortcuts for yourself, take a look at my keybindings.json in my setup repo on GitHub and GitLab. As you create keyboard shortcuts, please be mindful of keybinding conflicts that may arise.\nTo set up a keyboard shortcut that runs a series of steps rather than a single line of shell code, I suggest you use the VSCode/VSCodium Tasks mechanism, a system designed to automate software build tasks. The default keyboard shortcut to run all tasks in a local or global task.json file is ‚åÉ‚áßB on Linux/Windows or ‚åò‚áßB on Mac (mnemonic: B is for Build), but you can bind other shortcuts to specific tasks.\nIf you use a text editor like Vim or Emacs, you can create keybindings for Vim plugins like fugitive or Emacs packages like magit that run through the entire Git workflow. Example¬†10 shows the Vim+fugitive equivalent of my ‚å•‚áßF VSCode/VSCodium keybinding.\n\nExample 10 ¬†\n\n\n.vimrc\n\nnnoremap &lt;A-S-f&gt; :Gw&lt;bar&gt;G! commit -m \"M \"%&lt;bar&gt;G! push&lt;CR&gt;\n\n\nThe drawback of my keyboard shortcut approach for the Git workflow is that it produces generic commit messages that are no very informative. Anyone reading the messages will not be able to tell what changes were made and more importantly why the changes were made.\nTo automatically generate commit messages based on the currently staged changes, we can use a Large Language Model (LLM). Generative artificial intelligence models like LLMs tend to be large in size and have atypical computational requirements, so I will save my adventures with LLMs for a different post.\nI really enjoy using Git, especially with shell aliases in my terminal and keyboard shortcuts in my favorite text editors. If we ever collaborate on a project together, you can be sure that I will insist on using Git!",
    "crumbs": [
      "Software",
      "Positron"
    ]
  },
  {
    "objectID": "software/knitr/index.html",
    "href": "software/knitr/index.html",
    "title": "Knitr",
    "section": "",
    "text": "The goal of this blog post, the last (index: -1) in my Tools blog post series, is to\n\n\n\n\n\n\n\nflowchart TB\n   A[Git]--&gt;B[VSCode]--&gt;C[Quarto]\n   C--&gt;D[Observable]\n   C--&gt;E[Jupyter]\n   C--&gt;F[Knitr]\n   click A \"../git\"\n   click B \"../vscode\"\n   click C \"../quarto\"\n   click D \"../observable\"\n   click E \"../jupyter\"\n   click F \"../knitr\"\n   style F stroke:#99f,stroke-width:5px\n\n\n\n\nFigure¬†1: Tools series navigation chart"
  },
  {
    "objectID": "software/knitr/index.html#tldr",
    "href": "software/knitr/index.html#tldr",
    "title": "Knitr",
    "section": "",
    "text": "The goal of this blog post, the last (index: -1) in my Tools blog post series, is to\n\n\n\n\n\n\n\nflowchart TB\n   A[Git]--&gt;B[VSCode]--&gt;C[Quarto]\n   C--&gt;D[Observable]\n   C--&gt;E[Jupyter]\n   C--&gt;F[Knitr]\n   click A \"../git\"\n   click B \"../vscode\"\n   click C \"../quarto\"\n   click D \"../observable\"\n   click E \"../jupyter\"\n   click F \"../knitr\"\n   style F stroke:#99f,stroke-width:5px\n\n\n\n\nFigure¬†1: Tools series navigation chart"
  },
  {
    "objectID": "software/knitr/index.html#sec-intro",
    "href": "software/knitr/index.html#sec-intro",
    "title": "Knitr",
    "section": "Introduction",
    "text": "Introduction"
  },
  {
    "objectID": "dec/span/index.html",
    "href": "dec/span/index.html",
    "title": "The Dec measurement system",
    "section": "",
    "text": "This section of my blog focuses on Dec, a measurement system that I created to measure‚è≥time,üìçposition,üß≠orientation,üìêangles, andüîÑcycles in turns (\\(\\tau\\)) instead of months, weeks, hours, minutes, seconds, and degrees. For time measurement, Dec uses days and years, which are turns of a celestial body on its axis and around the point it orbits, respectively.\n\nTimestamps\nThe numbers in the top left of the navigation bar (navbar) are components of a Dec timestamp that shows the current time: .\nDec timestamps are inspired by this equation: \\(\\texttt{y=\\lfloor{y}\\rfloor+}\\frac{\\texttt{d-z}}{\\texttt{n}}\\), where \\(\\texttt{y}\\) is decimal years (), \\(\\texttt{\\lfloor{y}\\rfloor}\\) is floored years (), \\(\\texttt{d}\\) is decidays (), \\(\\texttt{z}\\) is the Dec time zone (), and \\(\\texttt{n}\\) is the total number of decidays in the year ().\nIn addition to time, Dec also measuresgeographic andcelestial coordinates: longitude , latitude, azimuth, altitude, etc.\nImportantly, Dec time zones are derived from floored decidays of longitude (\\(\\texttt{z=\\lfloor{Œª}\\rfloor}\\)) and can be appended to the time of day (), but not to durations, e.g.¬†the centimillidays since this webpage was loaded: .\n\nunix = {\n  while(true) {\n    yield Date.now();\n  }\n}\ntick = {\n  let i = 0;\n  while (true) {\n    yield Promises.tick(864, ++i);\n  }\n}\ntickTime = tick % 1e5\n// http://howardhinnant.github.io/date_algorithms.html#civil_from_days\nfunction unix2dote(unix, zone, offset = 719468) {\n  return [\n    (unix ?? Date.now()) / 86400000\n    + (zone = zone ?? (10 - Math.round(\n        (new Date).getTimezoneOffset() / 144)) % 10\n      ) / 10 + offset, zone]\n}\nfunction dote2doty(days = 719468, zone = 0) {\n  const era = Math.floor((days &gt;= 0 ? days : days - 146096) / 146097), dotc = days - era * 146097,\n      yotc = Math.floor((dotc - Math.floor(dotc / 1460) + Math.floor(dotc / 36524) - Math.floor(dotc / 146096)) / 365);\n  return [yotc + era * 400, dotc + Math.floor(yotc / 100) - yotc * 365 - Math.floor(yotc / 4), zone];\n}\nfunction doty2deco(year = 1969, doty = 306, zone = 0) {\n  return `${year.toString().padStart(4, \"0\")}+${Math.floor(doty).toString().padStart(3, \"0\")}${String(doty % 1 * 10).slice(0, 6)}-${zone}`\n}\nydz = dote2doty(...unix2dote(unix))\ndeco = doty2deco(...ydz)\n// https://observablehq.com/@observablehq/text-color-annotations-in-markdown#textcolor\nfunction setStyle(content, style = {}) {\n  function yiq(color) {\n    const {r, g, b} = d3.rgb(color);\n    return (r * 299 + g * 587 + b * 114) / 1000 / 255; // returns values between 0 and 1\n  }\n  const {\n    background,\n    color = yiq(background) &gt;= 0.6 ? \"#111\" : \"white\",\n    padding = \"0 1px\",\n    borderRadius = \"4px\",\n    fontWeight = 900,\n    fontSize = \"1em\",\n    ...rest\n  } = typeof style === \"string\" ? {background: style} : style;\n  return htl.html`&lt;span style=${{\n    background,\n    color,\n    padding,\n    borderRadius,\n    fontWeight,\n    ...rest\n  }}&gt;${content}&lt;/span&gt;`;\n}\nfunction year2bool(year = 1970) {\n    return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;\n}\ndecoYear = deco.slice(0, 4)\ndecoDate = deco.slice(5, 8)\ndecoTime = deco.slice(8, 14)\ndecoTimeZone = deco[15]\nnDaysInYear = 365 + year2bool(ydz[0] + 1)\nfracYear = (ydz[0] + (ydz[1] - ydz[2]) / nDaysInYear).toFixed(8)\nstyledDecoYear0 = setStyle(decoYear, d3.schemePaired[10])\nstyledDecoYear1 = setStyle(decoYear, d3.schemePaired[10])\nstyledFracYear = setStyle(fracYear, d3.schemePaired[10])\nstyledDecoDate0 = setStyle(decoDate, d3.schemePaired[1])\nstyledDecoDate1 = setStyle(decoDate, d3.schemePaired[1])\nstyledNdays = setStyle(nDaysInYear * 10, d3.schemePaired[1])\nstyledDecoTime0 = setStyle(decoTime, d3.schemePaired[2])\nstyledDecoTime1 = setStyle(decoTime, d3.schemePaired[2])\nstyledDecoTime2 = setStyle(decoTime, d3.schemePaired[2])\nstyledTimeZone0 = setStyle(decoTimeZone, d3.schemePaired[3])\nstyledTimeZone1 = setStyle(decoTimeZone, d3.schemePaired[3])\nstyledTimeZone2 = setStyle(decoTimeZone, d3.schemePaired[3])\nstyledTickTime = setStyle(tickTime, d3.schemePastel2[0])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Back to topCitationBibTeX citation:@online{laptev2024,\n  author = {Laptev, Martin},\n  title = {The {Dec} Measurement System},\n  date = {2024},\n  urldate = {2024},\n  url = {https://maptv.github.io/blog/dec},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nLaptev, Martin. 2024. ‚ÄúThe Dec Measurement System.‚Äù 2024.\nhttps://maptv.github.io/blog/dec.",
    "crumbs": [
      "Measurement",
      "Time span"
    ]
  },
  {
    "objectID": "dec/nav/index.html",
    "href": "dec/nav/index.html",
    "title": "The Dec measurement system",
    "section": "",
    "text": "This section of my blog focuses on Dec, a measurement system that I created to measure‚è≥time,üìçposition,üß≠orientation,üìêangles, andüîÑcycles in turns (\\(\\tau\\)) instead of months, weeks, hours, minutes, seconds, and degrees. For time measurement, Dec uses days and years, which are turns of a celestial body on its axis and around the point it orbits, respectively.\n\nTimestamps\nThe numbers in the top left of the navigation bar (navbar) are components of a Dec timestamp that shows the current time: .\nDec timestamps are inspired by this equation: \\(\\texttt{y=\\lfloor{y}\\rfloor+}\\frac{\\texttt{d-z}}{\\texttt{n}}\\), where \\(\\texttt{y}\\) is decimal years (), \\(\\texttt{\\lfloor{y}\\rfloor}\\) is floored years (), \\(\\texttt{d}\\) is decidays (), \\(\\texttt{z}\\) is the Dec time zone (), and \\(\\texttt{n}\\) is the total number of decidays in the year ().\nIn addition to time, Dec also measuresgeographic andcelestial coordinates: longitude , latitude, azimuth, altitude, etc.\nImportantly, Dec time zones are derived from floored decidays of longitude (\\(\\texttt{z=\\lfloor{Œª}\\rfloor}\\)) and can be appended to the time of day (), but not to durations, e.g.¬†the centimillidays since this webpage was loaded: .\n\nunix = {\n  while(true) {\n    yield Date.now();\n  }\n}\ntick = {\n  let i = 0;\n  while (true) {\n    yield Promises.tick(864, ++i);\n  }\n}\ntickTime = tick % 1e5\n// http://howardhinnant.github.io/date_algorithms.html#civil_from_days\nfunction unix2dote(unix, zone, offset = 719468) {\n  return [\n    (unix ?? Date.now()) / 86400000\n    + (zone = zone ?? (10 - Math.round(\n        (new Date).getTimezoneOffset() / 144)) % 10\n      ) / 10 + offset, zone]\n}\nfunction dote2doty(days = 719468, zone = 0) {\n  const era = Math.floor((days &gt;= 0 ? days : days - 146096) / 146097), dotc = days - era * 146097,\n      yotc = Math.floor((dotc - Math.floor(dotc / 1460) + Math.floor(dotc / 36524) - Math.floor(dotc / 146096)) / 365);\n  return [yotc + era * 400, dotc + Math.floor(yotc / 100) - yotc * 365 - Math.floor(yotc / 4), zone];\n}\nfunction doty2deco(year = 1969, doty = 306, zone = 0) {\n  return `${year.toString().padStart(4, \"0\")}+${Math.floor(doty).toString().padStart(3, \"0\")}${String(doty % 1 * 10).slice(0, 6)}-${zone}`\n}\nydz = dote2doty(...unix2dote(unix))\ndeco = doty2deco(...ydz)\n// https://observablehq.com/@observablehq/text-color-annotations-in-markdown#textcolor\nfunction setStyle(content, style = {}) {\n  function yiq(color) {\n    const {r, g, b} = d3.rgb(color);\n    return (r * 299 + g * 587 + b * 114) / 1000 / 255; // returns values between 0 and 1\n  }\n  const {\n    background,\n    color = yiq(background) &gt;= 0.6 ? \"#111\" : \"white\",\n    padding = \"0 1px\",\n    borderRadius = \"4px\",\n    fontWeight = 900,\n    fontSize = \"1em\",\n    ...rest\n  } = typeof style === \"string\" ? {background: style} : style;\n  return htl.html`&lt;span style=${{\n    background,\n    color,\n    padding,\n    borderRadius,\n    fontWeight,\n    ...rest\n  }}&gt;${content}&lt;/span&gt;`;\n}\nfunction year2bool(year = 1970) {\n    return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;\n}\ndecoYear = deco.slice(0, 4)\ndecoDate = deco.slice(5, 8)\ndecoTime = deco.slice(8, 14)\ndecoTimeZone = deco[15]\nnDaysInYear = 365 + year2bool(ydz[0] + 1)\nfracYear = (ydz[0] + (ydz[1] - ydz[2]) / nDaysInYear).toFixed(8)\nstyledDecoYear0 = setStyle(decoYear, d3.schemePaired[10])\nstyledDecoYear1 = setStyle(decoYear, d3.schemePaired[10])\nstyledFracYear = setStyle(fracYear, d3.schemePaired[10])\nstyledDecoDate0 = setStyle(decoDate, d3.schemePaired[1])\nstyledDecoDate1 = setStyle(decoDate, d3.schemePaired[1])\nstyledNdays = setStyle(nDaysInYear * 10, d3.schemePaired[1])\nstyledDecoTime0 = setStyle(decoTime, d3.schemePaired[2])\nstyledDecoTime1 = setStyle(decoTime, d3.schemePaired[2])\nstyledDecoTime2 = setStyle(decoTime, d3.schemePaired[2])\nstyledTimeZone0 = setStyle(decoTimeZone, d3.schemePaired[3])\nstyledTimeZone1 = setStyle(decoTimeZone, d3.schemePaired[3])\nstyledTimeZone2 = setStyle(decoTimeZone, d3.schemePaired[3])\nstyledTickTime = setStyle(tickTime, d3.schemePastel2[0])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Back to topCitationBibTeX citation:@online{laptev2024,\n  author = {Laptev, Martin},\n  title = {The {Dec} Measurement System},\n  date = {2024},\n  urldate = {2024},\n  url = {https://maptv.github.io/blog/dec},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nLaptev, Martin. 2024. ‚ÄúThe Dec Measurement System.‚Äù 2024.\nhttps://maptv.github.io/blog/dec.",
    "crumbs": [
      "Measurement",
      "Navigation"
    ]
  },
  {
    "objectID": "dec/geo/index.html",
    "href": "dec/geo/index.html",
    "title": "The Dec measurement system",
    "section": "",
    "text": "This section of my blog focuses on Dec, a measurement system that I created to measure‚è≥time,üìçposition,üß≠orientation,üìêangles, andüîÑcycles in turns (\\(\\tau\\)) instead of months, weeks, hours, minutes, seconds, and degrees. For time measurement, Dec uses days and years, which are turns of a celestial body on its axis and around the point it orbits, respectively.\n\nTimestamps\nThe numbers in the top left of the navigation bar (navbar) are components of a Dec timestamp that shows the current time: .\nDec timestamps are inspired by this equation: \\(\\texttt{y=\\lfloor{y}\\rfloor+}\\frac{\\texttt{d-z}}{\\texttt{n}}\\), where \\(\\texttt{y}\\) is decimal years (), \\(\\texttt{\\lfloor{y}\\rfloor}\\) is floored years (), \\(\\texttt{d}\\) is decidays (), \\(\\texttt{z}\\) is the Dec time zone (), and \\(\\texttt{n}\\) is the total number of decidays in the year ().\nIn addition to time, Dec also measuresgeographic andcelestial coordinates: longitude , latitude, azimuth, altitude, etc.\nImportantly, Dec time zones are derived from floored decidays of longitude (\\(\\texttt{z=\\lfloor{Œª}\\rfloor}\\)) and can be appended to the time of day (), but not to durations, e.g.¬†the centimillidays since this webpage was loaded: .\n\nunix = {\n  while(true) {\n    yield Date.now();\n  }\n}\ntick = {\n  let i = 0;\n  while (true) {\n    yield Promises.tick(864, ++i);\n  }\n}\ntickTime = tick % 1e5\n// http://howardhinnant.github.io/date_algorithms.html#civil_from_days\nfunction unix2dote(unix, zone, offset = 719468) {\n  return [\n    (unix ?? Date.now()) / 86400000\n    + (zone = zone ?? (10 - Math.round(\n        (new Date).getTimezoneOffset() / 144)) % 10\n      ) / 10 + offset, zone]\n}\nfunction dote2doty(days = 719468, zone = 0) {\n  const era = Math.floor((days &gt;= 0 ? days : days - 146096) / 146097), dotc = days - era * 146097,\n      yotc = Math.floor((dotc - Math.floor(dotc / 1460) + Math.floor(dotc / 36524) - Math.floor(dotc / 146096)) / 365);\n  return [yotc + era * 400, dotc + Math.floor(yotc / 100) - yotc * 365 - Math.floor(yotc / 4), zone];\n}\nfunction doty2deco(year = 1969, doty = 306, zone = 0) {\n  return `${year.toString().padStart(4, \"0\")}+${Math.floor(doty).toString().padStart(3, \"0\")}${String(doty % 1 * 10).slice(0, 6)}-${zone}`\n}\nydz = dote2doty(...unix2dote(unix))\ndeco = doty2deco(...ydz)\n// https://observablehq.com/@observablehq/text-color-annotations-in-markdown#textcolor\nfunction setStyle(content, style = {}) {\n  function yiq(color) {\n    const {r, g, b} = d3.rgb(color);\n    return (r * 299 + g * 587 + b * 114) / 1000 / 255; // returns values between 0 and 1\n  }\n  const {\n    background,\n    color = yiq(background) &gt;= 0.6 ? \"#111\" : \"white\",\n    padding = \"0 1px\",\n    borderRadius = \"4px\",\n    fontWeight = 900,\n    fontSize = \"1em\",\n    ...rest\n  } = typeof style === \"string\" ? {background: style} : style;\n  return htl.html`&lt;span style=${{\n    background,\n    color,\n    padding,\n    borderRadius,\n    fontWeight,\n    ...rest\n  }}&gt;${content}&lt;/span&gt;`;\n}\nfunction year2bool(year = 1970) {\n    return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;\n}\ndecoYear = deco.slice(0, 4)\ndecoDate = deco.slice(5, 8)\ndecoTime = deco.slice(8, 14)\ndecoTimeZone = deco[15]\nnDaysInYear = 365 + year2bool(ydz[0] + 1)\nfracYear = (ydz[0] + (ydz[1] - ydz[2]) / nDaysInYear).toFixed(8)\nstyledDecoYear0 = setStyle(decoYear, d3.schemePaired[10])\nstyledDecoYear1 = setStyle(decoYear, d3.schemePaired[10])\nstyledFracYear = setStyle(fracYear, d3.schemePaired[10])\nstyledDecoDate0 = setStyle(decoDate, d3.schemePaired[1])\nstyledDecoDate1 = setStyle(decoDate, d3.schemePaired[1])\nstyledNdays = setStyle(nDaysInYear * 10, d3.schemePaired[1])\nstyledDecoTime0 = setStyle(decoTime, d3.schemePaired[2])\nstyledDecoTime1 = setStyle(decoTime, d3.schemePaired[2])\nstyledDecoTime2 = setStyle(decoTime, d3.schemePaired[2])\nstyledTimeZone0 = setStyle(decoTimeZone, d3.schemePaired[3])\nstyledTimeZone1 = setStyle(decoTimeZone, d3.schemePaired[3])\nstyledTimeZone2 = setStyle(decoTimeZone, d3.schemePaired[3])\nstyledTickTime = setStyle(tickTime, d3.schemePastel2[0])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Back to topCitationBibTeX citation:@online{laptev2024,\n  author = {Laptev, Martin},\n  title = {The {Dec} Measurement System},\n  date = {2024},\n  urldate = {2024},\n  url = {https://maptv.github.io/blog/dec},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nLaptev, Martin. 2024. ‚ÄúThe Dec Measurement System.‚Äù 2024.\nhttps://maptv.github.io/blog/dec.",
    "crumbs": [
      "Measurement",
      "Geoposition"
    ]
  },
  {
    "objectID": "cv/pdf/index.html",
    "href": "cv/pdf/index.html",
    "title": "",
    "section": "",
    "text": "Code\n\n\n\n\n\n    \n\n\n\n\n\n\n Back to topCitationBibTeX citation:@online{laptev2024,\n  author = {Laptev, Martin},\n  date = {2024},\n  urldate = {2024},\n  url = {https://maptv.github.io/cv/pdf/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nLaptev, Martin. 2024. 2024. https://maptv.github.io/cv/pdf/."
  },
  {
    "objectID": "list/index.html",
    "href": "list/index.html",
    "title": "",
    "section": "",
    "text": "World War 2\n\n\n3 min\n\n\n\n\n\n\n\n1725860445106\n\n\n\n\n\n\n\n\n\n\n\n\n\nGit\n\n\n14 min\n\n\n\ntool\n\n\ngit\n\n\n\n\n\n\n\n\n1725581207475\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuarto\n\n\n19 min\n\n\n\ntool\n\n\nquarto\n\n\nweb dev\n\n\ngit\n\n\n\n\n\n\n\n\n1725581207491\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservable\n\n\n45 min\n\n\n\ntool\n\n\nobservable\n\n\nquarto\n\n\n\n\n\n\n\n\n1725581207489\n\n\n\n\n\n\n\n\n\n\n\n\n\nJupyter\n\n\n1 min\n\n\n\ntool\n\n\nknitr\n\n\njupyter\n\n\nquarto\n\n\n\n\n\n\n\n\n1725581207479\n\n\n\n\n\n\n\n\n\n\n\n\n\nKnitr\n\n\n1 min\n\n\n\ntool\n\n\nknitr\n\n\nquarto\n\n\n\n\n\n\n\n\n1725581207488\n\n\n\n\n\n\n\n\n\n\n\n\n\nProbability\n\n\n5 min\n\n\n\nml\n\n\n\n\n\n\n\n\n1725581207474\n\n\n\n\n\n\n\n\n\n\n\n\n\nLLM\n\n\n1 min\n\n\n\ntool\n\n\ngit\n\n\nllm\n\n\nml\n\n\n\n\n\n\n\n\n1725581207466\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Dec measurement system\n\n\n4 min\n\n\n\ndec\n\n\n\n\n\n\n\n\n1725581207465\n\n\n\n\n\n\n\nNo matching items\n\n Back to topAttributions\n\nAll artwork by @allison_horst except for the images related to the following blogs:\n\nVSCode, which combines the VSCode and VSCodium logos\nLLM, which was generated by DALL¬∑E 3 with the following prompt:\n\n\na cartoon image of a person climbing a mountain to obtain answers to their questions from an omniscient robotic guru with a glowing positronic brain\n\n\n\n\nCitationBibTeX citation:@online{laptev2024,\n  author = {Laptev, Martin},\n  date = {2024},\n  urldate = {2024},\n  url = {https://maptv.github.io/list/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nLaptev, Martin. 2024. 2024. https://maptv.github.io/list/.",
    "crumbs": [
      "Listing"
    ]
  },
  {
    "objectID": "history/ww2/index.html",
    "href": "history/ww2/index.html",
    "title": "World War 2",
    "section": "",
    "text": "Day 184 in the Gregorian Decalendar is the first day of Season 2 by meteorological reckoning and also the anniversary of the start of the World War 2. On 1939+184, World War 2 started with the German invasion of Poland. On 1939+200, sixteen days after the start of the war, the Soviet Union invaded Poland from the East. Germany and the Soviet Union split Poland according to the Molotov‚ÄìRibbentrop Pact signed on 1939+175. The map below shows the German and Soviet invasions of Poland on Days 184 and 200, respectively, of Year 1939, as well as other military movements over the course of the subsequent 1.83 years before Germany ended the Molotov‚ÄìRibbentrop Pact on 1941+113 with its invasion of the Soviet Union as part of Operation Barbarossa.\nOn the map, exact dates on the map are in the year+day format and approximate dates are decimal years. For more information on these date formats, take a look at date page in the Measurement section of my site. Briefly, the day in year+day counts the days since Day 0 and can be divided by the number of days in the year to obtain the fractional part of the decimal year. In the legend, there is a date range in the start:stop format, which is inspired by the slice syntax in the Python programming language.\n\n\n\nMap of military movements in Europe from 1939 to 1941\n\n\nWorld War 2 officially ended on 1945+185, 6 years and 1 day after it began, when Japan surrendered. The German surrender on 1945+068 is commemorated with Victory in Europe Day, typically on Day 68 in the West. In contrast, many countries in Russia‚Äôs sphere of influence commemorate Victory Day on Day 69. The chosen commemoration date can therefore be viewed as having political significance. On Day 69, the European Union celebrates the anniversary of the 1950 Schuman Declaration with a holiday called Europe Day. The Schuman Declaration aimed at normalizing relations and promoting political integration in Europe. Today, many countries that were opponents in World War 2 are now close allies, notably Germany, France, and Poland and the US and Japan.\n\n\n\n\n\n Back to topCitationBibTeX citation:@online{laptev2024,\n  author = {Laptev, Martin},\n  title = {World {War} 2},\n  date = {2024},\n  urldate = {2024},\n  url = {https://maptv.github.io/history/ww2},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nLaptev, Martin. 2024. ‚ÄúWorld War 2.‚Äù 2024. https://maptv.github.io/history/ww2.",
    "crumbs": [
      "History",
      "World War 2"
    ]
  },
  {
    "objectID": "cv/index.html",
    "href": "cv/index.html",
    "title": "Martin Skarzynski Laptev",
    "section": "",
    "text": "240-207-1654\n maptv@engineer.com\n maptv.github.io\n maptv\n maptv\n\n\n\nMission\nMy goal is to lead the next generation of scientists and engineers in building solutions that integrate substantive expertise from diverse fields with machine intelligence. Through my work, I strive to promote open source software, such as the Quarto publishing system, which I use to build dashboards, presentations, reports, websites, and other digital deliverables. Overall, I aim to leverage my broad scientific background and technical expertise to help transform the promises of science and technology into a better future for all of humanity.\n\n\nExperience\n\nLead Instructor, General Assembly 2019:\n\n\nTeaches open-enrollment and enterprise courses such as:\n\nReact Development\nData Analytics\nData Science\nPython Programming\nWeb Development\n\n\n\n\n\nLead Instructor, Data Society 2019:\n\n\nProvides enterprise clients with training in:\n\nMachine Learning\nDevOps & MLOps\nPython & R Programming\nGenerative AI\nGraph Analytics\nText Analysis & NLP\n\n\n\n\n\nSenior Domain Lead, Amazon Web Services 2022:2024\n\n\nProvided customers with scientific and technical expertise in:\n\nComputer Vision\nData Architecture\nData Visualization\nGenomics\nMachine Learning\nReal World Evidence\n\nBuilt Artificial Intelligence (AI) solutions and Machine Learning Operations (MLOps) systems using:\n\nAmazon SageMaker\nAWS Developer Tools\nAWS Lambda\nAmazon EventBridge\nAWS CloudFormation\nAWS IAM\nAmazon EMR\nAWS Databases\nAWS Service Catalog\n\nObtained 3 AWS certification\n\nPractical Data Science\nCloud Practitioner\nSolutions Architect Associate\n\n\n\n\n\nAdjunct Professor, Virginia Tech 2021:2024\n\n\nTaught two graduate courses for the Computer Science and Statistics Departments:\n\nMachine Learning\nData Analytics\n\n\n\n\n\nVice President, Data Community DC 2022:\n\nLeads a non‚Äëprofit organization that supports eleven Meetup groups\n\n\n\nAI Engineering Manager, Booz Allen Hamilton 2019:2023\n\nLed a team of data scientists and software developers working on a cyber intelligence application\nSpearheaded interdisciplinary COVID‚Äë19 visualization, genomics, and statistical modeling efforts\nObtained the Microsoft Azure Data Scientist Associate certification\n\n\n\nBiomedical Scientist, National Institutes of Health 2009:2022\n\n\nIntegrated clinical, laboratory, epidemiologic, genomic, and medical imaging data\nCombined deep learning and statistical inference using stacked ensembles\nConducted genomic analysis of immune and cancer cells\nDeveloped and tested pharmaceutical and immunotherapeutic agents\nQuantified cancer cell signaling pathways\nMentored trainees from various NIH training programs including:\n\nSIP\nMRSP\nHiSTEP\n\n\n\n\n\nBioinformatics and Data Science Co-Chair, FAES 2014:2021\n\n\nCo‚Äëadministered an academic program with over twenty faculty members\nTaught three graduate data science courses:\n\nPython Programming\nText Mining\nApplied Machine Learning\n\nTaught graduate biotechnology workshops on various topics including:\n\nPharmacometrics\nCellular Immunology\nFlow Cytometry\n\n\n\n\n\nAdjunct Professor, George Washington University 2015:2016\n\n\nTaught two undergraduate courses for the Women‚Äôs Leadership Program:\n\nBiology of Organisms\nWomen and Leadership\n\n\n\n\n\n\nEducation\n\nMPH, Epidemiology and Biostatistics, Johns Hopkins University 2018\nPhD, Tumor Biology, Georgetown University 2015\nMS, Biotechnology, Jagiellonian University 2009\nBA, Biology, St.¬†Mary‚Äôs College of Maryland 2007\n\n\n\nPublications\n\n\nPotentiating [mAb] therapy by targeting complement C3 [‚Ä¶] on lymphoma cells Submitted\nRecalibration of a deep learning model [‚Ä¶] to inform lung cancer screening intervals 2023\n[COVID] genome‚Äêbased severity predictions correspond to [‚Ä¶] higher viral load 2022\nLinking genotype to phenotype [‚Ä¶] in [COVID] [‚Ä¶] 2022\nVariants in [COVID] associated with mild or severe outcome 2021\nUsing prediction models to reduce [‚Ä¶] disparities in [‚Ä¶] lung cancer screening [‚Ä¶] 2021\nPathogenic role of [BCR] signaling and canonical NF-Œ∫B activation in [MCL] 2016\nInteractions between ibrutinib and anti‚ÄêCD20 antibodies [‚Ä¶] 2016\nHealth disparities in the immunoprevention of [HPV] [‚Ä¶] associated malignancies 2015\nDesigning the furin‚Äêcleavable linker in recombinant immunotoxins [‚Ä¶] 2015\nHarnessing the FcŒº receptor for [‚Ä¶] therapy of [CLL] 2014\n\n\n\n\nAwards\n\n\nCommunity Contribution of the Year Category Finalist, AWS Builder Awards 2023\nArtificial Intelligence Solutions Architect Award, BAH Emergent Skills Program 2022\nFellowship Research Award, Cancer Prevention Fellowship Program 2019\nFellows Award for Research Excellence, National Institutes of Health 2015\nOrloff Science Award, National Heart, Lung, Blood Institute 2014\nDirector‚Äôs Science Award, National Heart, Lung, Blood Institute 2014\n\n\n\n\nLanguages\n\n\nILR 5: English, Polish\nILR 4: Spanish, Russian\nILR 2: French, Portuguese\n\n\n\n\nSkills\n                                                                                                                      \n\n\n\n\n Back to top",
    "crumbs": [
      "CV/R√©sum√©"
    ]
  },
  {
    "objectID": "about/index.html",
    "href": "about/index.html",
    "title": "",
    "section": "",
    "text": "I am a data scientist and software engineer with a broad scientific background that ranges from biochemistry to epidemiology.\nI use the JavaScript, Python, and R programming languages along with the UNIX shell to build digital deliverables such as cloudinfrastructure, datadashboards, and machinelearning models.\nIn addition to programming languages, I also like natural languages! I speak English, Polish, Spanish, Russian, French, and Portuguese.\nMy favorite music genres are Zouk, Konpa, and Kizomba, but I also enjoy many different kinds of African, Caribbean, and Latin music.\n\n\n Back to top",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "dec/index.html",
    "href": "dec/index.html",
    "title": "The Dec measurement system",
    "section": "",
    "text": "This section of my site focuses on Dec, a measurement system that I created to measure‚è≥time,üìçposition,üß≠orientation,üìêangles, andüîÑcycles in turns (\\(\\tau\\)) instead of months, weeks, hours, minutes, seconds, and degrees. For time measurement, Dec uses days and years, which are turns of a celestial body on its axis and around the point it orbits, respectively.\n\n\n\n\n\n Back to topCitationBibTeX citation:@online{laptev2024,\n  author = {Laptev, Martin},\n  title = {The {Dec} Measurement System},\n  date = {2024},\n  urldate = {2024},\n  url = {https://maptv.github.io/dec},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nLaptev, Martin. 2024. ‚ÄúThe Dec Measurement System.‚Äù 2024.\nhttps://maptv.github.io/dec.",
    "crumbs": [
      "Measurement"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "Greetings! \nWelcome to my personal website, which I created using the Quarto publishing system.\nYou are currently on the Home page of my site. You can use the Sidebar on the left to go to the About, Listing, and Curriculum Vitae (CV) pages of my site or my profile pages on GitHub and LinkedIn. The remaining items in the sidebar are sections that cover topics like art, history, and science. In addition to the sidebar, you can also use the arrows at the bottom to move between specific pages on my site.\nHave fun looking around!\n\n\n Back to top",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "ml/llm/index.html",
    "href": "ml/llm/index.html",
    "title": "LLM",
    "section": "",
    "text": "Large Language Models (LLMs) are a way to automatically generate text. more informative commit messages based on the currently staged changes.\n\n\n\n\n\n Back to topCitationBibTeX citation:@online{laptev2024,\n  author = {Laptev, Martin},\n  title = {LLM},\n  date = {2024},\n  urldate = {2024},\n  url = {https://maptv.github.io/ml/llm/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nLaptev, Martin. 2024. ‚ÄúLLM.‚Äù 2024. https://maptv.github.io/ml/llm/.",
    "crumbs": [
      "Machine Learning",
      "Language Models"
    ]
  },
  {
    "objectID": "dec/day/index.html",
    "href": "dec/day/index.html",
    "title": "The Dec measurement system",
    "section": "",
    "text": "This section of my blog focuses on Dec, a measurement system that I created to measure‚è≥time,üìçposition,üß≠orientation,üìêangles, andüîÑcycles in turns (\\(\\tau\\)) instead of months, weeks, hours, minutes, seconds, and degrees. For time measurement, Dec uses days and years, which are turns of a celestial body on its axis and around the point it orbits, respectively.\n\nTimestamps\nThe numbers in the top left of the navigation bar (navbar) are components of a Dec timestamp that shows the current time: .\nDec timestamps are inspired by this equation: \\(\\texttt{y=\\lfloor{y}\\rfloor+}\\frac{\\texttt{d-z}}{\\texttt{n}}\\), where \\(\\texttt{y}\\) is decimal years (), \\(\\texttt{\\lfloor{y}\\rfloor}\\) is floored years (), \\(\\texttt{d}\\) is decidays (), \\(\\texttt{z}\\) is the Dec time zone (), and \\(\\texttt{n}\\) is the total number of decidays in the year ().\nIn addition to time, Dec also measuresgeographic andcelestial coordinates: longitude , latitude, azimuth, altitude, etc.\nImportantly, Dec time zones are derived from floored decidays of longitude (\\(\\texttt{z=\\lfloor{Œª}\\rfloor}\\)) and can be appended to the time of day (), but not to durations, e.g.¬†the centimillidays since this webpage was loaded: .\n\nunix = {\n  while(true) {\n    yield Date.now();\n  }\n}\ntick = {\n  let i = 0;\n  while (true) {\n    yield Promises.tick(864, ++i);\n  }\n}\ntickTime = tick % 1e5\n// http://howardhinnant.github.io/date_algorithms.html#civil_from_days\nfunction unix2dote(unix, zone, offset = 719468) {\n  return [\n    (unix ?? Date.now()) / 86400000\n    + (zone = zone ?? (10 - Math.round(\n        (new Date).getTimezoneOffset() / 144)) % 10\n      ) / 10 + offset, zone]\n}\nfunction dote2doty(days = 719468, zone = 0) {\n  const era = Math.floor((days &gt;= 0 ? days : days - 146096) / 146097), dotc = days - era * 146097,\n      yotc = Math.floor((dotc - Math.floor(dotc / 1460) + Math.floor(dotc / 36524) - Math.floor(dotc / 146096)) / 365);\n  return [yotc + era * 400, dotc + Math.floor(yotc / 100) - yotc * 365 - Math.floor(yotc / 4), zone];\n}\nfunction doty2deco(year = 1969, doty = 306, zone = 0) {\n  return `${year.toString().padStart(4, \"0\")}+${Math.floor(doty).toString().padStart(3, \"0\")}${String(doty % 1 * 10).slice(0, 6)}-${zone}`\n}\nydz = dote2doty(...unix2dote(unix))\ndeco = doty2deco(...ydz)\n// https://observablehq.com/@observablehq/text-color-annotations-in-markdown#textcolor\nfunction setStyle(content, style = {}) {\n  function yiq(color) {\n    const {r, g, b} = d3.rgb(color);\n    return (r * 299 + g * 587 + b * 114) / 1000 / 255; // returns values between 0 and 1\n  }\n  const {\n    background,\n    color = yiq(background) &gt;= 0.6 ? \"#111\" : \"white\",\n    padding = \"0 1px\",\n    borderRadius = \"4px\",\n    fontWeight = 900,\n    fontSize = \"1em\",\n    ...rest\n  } = typeof style === \"string\" ? {background: style} : style;\n  return htl.html`&lt;span style=${{\n    background,\n    color,\n    padding,\n    borderRadius,\n    fontWeight,\n    ...rest\n  }}&gt;${content}&lt;/span&gt;`;\n}\nfunction year2bool(year = 1970) {\n    return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;\n}\ndecoYear = deco.slice(0, 4)\ndecoDate = deco.slice(5, 8)\ndecoTime = deco.slice(8, 14)\ndecoTimeZone = deco[15]\nnDaysInYear = 365 + year2bool(ydz[0] + 1)\nfracYear = (ydz[0] + (ydz[1] - ydz[2]) / nDaysInYear).toFixed(8)\nstyledDecoYear0 = setStyle(decoYear, d3.schemePaired[10])\nstyledDecoYear1 = setStyle(decoYear, d3.schemePaired[10])\nstyledFracYear = setStyle(fracYear, d3.schemePaired[10])\nstyledDecoDate0 = setStyle(decoDate, d3.schemePaired[1])\nstyledDecoDate1 = setStyle(decoDate, d3.schemePaired[1])\nstyledNdays = setStyle(nDaysInYear * 10, d3.schemePaired[1])\nstyledDecoTime0 = setStyle(decoTime, d3.schemePaired[2])\nstyledDecoTime1 = setStyle(decoTime, d3.schemePaired[2])\nstyledDecoTime2 = setStyle(decoTime, d3.schemePaired[2])\nstyledTimeZone0 = setStyle(decoTimeZone, d3.schemePaired[3])\nstyledTimeZone1 = setStyle(decoTimeZone, d3.schemePaired[3])\nstyledTimeZone2 = setStyle(decoTimeZone, d3.schemePaired[3])\nstyledTickTime = setStyle(tickTime, d3.schemePastel2[0])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Back to topCitationBibTeX citation:@online{laptev2024,\n  author = {Laptev, Martin},\n  title = {The {Dec} Measurement System},\n  date = {2024},\n  urldate = {2024},\n  url = {https://maptv.github.io/blog/dec},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nLaptev, Martin. 2024. ‚ÄúThe Dec Measurement System.‚Äù 2024.\nhttps://maptv.github.io/blog/dec.",
    "crumbs": [
      "Measurement",
      "Daylight duration"
    ]
  },
  {
    "objectID": "dec/move/index.html",
    "href": "dec/move/index.html",
    "title": "The Dec measurement system",
    "section": "",
    "text": "This section of my blog focuses on Dec, a measurement system that I created to measure‚è≥time,üìçposition,üß≠orientation,üìêangles, andüîÑcycles in turns (\\(\\tau\\)) instead of months, weeks, hours, minutes, seconds, and degrees. For time measurement, Dec uses days and years, which are turns of a celestial body on its axis and around the point it orbits, respectively.\n\nTimestamps\nThe numbers in the top left of the navigation bar (navbar) are components of a Dec timestamp that shows the current time: .\nDec timestamps are inspired by this equation: \\(\\texttt{y=\\lfloor{y}\\rfloor+}\\frac{\\texttt{d-z}}{\\texttt{n}}\\), where \\(\\texttt{y}\\) is decimal years (), \\(\\texttt{\\lfloor{y}\\rfloor}\\) is floored years (), \\(\\texttt{d}\\) is decidays (), \\(\\texttt{z}\\) is the Dec time zone (), and \\(\\texttt{n}\\) is the total number of decidays in the year ().\nIn addition to time, Dec also measuresgeographic andcelestial coordinates: longitude , latitude, azimuth, altitude, etc.\nImportantly, Dec time zones are derived from floored decidays of longitude (\\(\\texttt{z=\\lfloor{Œª}\\rfloor}\\)) and can be appended to the time of day (), but not to durations, e.g.¬†the centimillidays since this webpage was loaded: .\n\nunix = {\n  while(true) {\n    yield Date.now();\n  }\n}\ntick = {\n  let i = 0;\n  while (true) {\n    yield Promises.tick(864, ++i);\n  }\n}\ntickTime = tick % 1e5\n// http://howardhinnant.github.io/date_algorithms.html#civil_from_days\nfunction unix2dote(unix, zone, offset = 719468) {\n  return [\n    (unix ?? Date.now()) / 86400000\n    + (zone = zone ?? (10 - Math.round(\n        (new Date).getTimezoneOffset() / 144)) % 10\n      ) / 10 + offset, zone]\n}\nfunction dote2doty(days = 719468, zone = 0) {\n  const era = Math.floor((days &gt;= 0 ? days : days - 146096) / 146097), dotc = days - era * 146097,\n      yotc = Math.floor((dotc - Math.floor(dotc / 1460) + Math.floor(dotc / 36524) - Math.floor(dotc / 146096)) / 365);\n  return [yotc + era * 400, dotc + Math.floor(yotc / 100) - yotc * 365 - Math.floor(yotc / 4), zone];\n}\nfunction doty2deco(year = 1969, doty = 306, zone = 0) {\n  return `${year.toString().padStart(4, \"0\")}+${Math.floor(doty).toString().padStart(3, \"0\")}${String(doty % 1 * 10).slice(0, 6)}-${zone}`\n}\nydz = dote2doty(...unix2dote(unix))\ndeco = doty2deco(...ydz)\n// https://observablehq.com/@observablehq/text-color-annotations-in-markdown#textcolor\nfunction setStyle(content, style = {}) {\n  function yiq(color) {\n    const {r, g, b} = d3.rgb(color);\n    return (r * 299 + g * 587 + b * 114) / 1000 / 255; // returns values between 0 and 1\n  }\n  const {\n    background,\n    color = yiq(background) &gt;= 0.6 ? \"#111\" : \"white\",\n    padding = \"0 1px\",\n    borderRadius = \"4px\",\n    fontWeight = 900,\n    fontSize = \"1em\",\n    ...rest\n  } = typeof style === \"string\" ? {background: style} : style;\n  return htl.html`&lt;span style=${{\n    background,\n    color,\n    padding,\n    borderRadius,\n    fontWeight,\n    ...rest\n  }}&gt;${content}&lt;/span&gt;`;\n}\nfunction year2bool(year = 1970) {\n    return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;\n}\ndecoYear = deco.slice(0, 4)\ndecoDate = deco.slice(5, 8)\ndecoTime = deco.slice(8, 14)\ndecoTimeZone = deco[15]\nnDaysInYear = 365 + year2bool(ydz[0] + 1)\nfracYear = (ydz[0] + (ydz[1] - ydz[2]) / nDaysInYear).toFixed(8)\nstyledDecoYear0 = setStyle(decoYear, d3.schemePaired[10])\nstyledDecoYear1 = setStyle(decoYear, d3.schemePaired[10])\nstyledFracYear = setStyle(fracYear, d3.schemePaired[10])\nstyledDecoDate0 = setStyle(decoDate, d3.schemePaired[1])\nstyledDecoDate1 = setStyle(decoDate, d3.schemePaired[1])\nstyledNdays = setStyle(nDaysInYear * 10, d3.schemePaired[1])\nstyledDecoTime0 = setStyle(decoTime, d3.schemePaired[2])\nstyledDecoTime1 = setStyle(decoTime, d3.schemePaired[2])\nstyledDecoTime2 = setStyle(decoTime, d3.schemePaired[2])\nstyledTimeZone0 = setStyle(decoTimeZone, d3.schemePaired[3])\nstyledTimeZone1 = setStyle(decoTimeZone, d3.schemePaired[3])\nstyledTimeZone2 = setStyle(decoTimeZone, d3.schemePaired[3])\nstyledTickTime = setStyle(tickTime, d3.schemePastel2[0])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Back to topCitationBibTeX citation:@online{laptev2024,\n  author = {Laptev, Martin},\n  title = {The {Dec} Measurement System},\n  date = {2024},\n  urldate = {2024},\n  url = {https://maptv.github.io/blog/dec},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nLaptev, Martin. 2024. ‚ÄúThe Dec Measurement System.‚Äù 2024.\nhttps://maptv.github.io/blog/dec.",
    "crumbs": [
      "Measurement",
      "Movement"
    ]
  },
  {
    "objectID": "dec/size/index.html",
    "href": "dec/size/index.html",
    "title": "The Dec measurement system",
    "section": "",
    "text": "This section of my blog focuses on Dec, a measurement system that I created to measure‚è≥time,üìçposition,üß≠orientation,üìêangles, andüîÑcycles in turns (\\(\\tau\\)) instead of months, weeks, hours, minutes, seconds, and degrees. For time measurement, Dec uses days and years, which are turns of a celestial body on its axis and around the point it orbits, respectively.\n\nTimestamps\nThe numbers in the top left of the navigation bar (navbar) are components of a Dec timestamp that shows the current time: .\nDec timestamps are inspired by this equation: \\(\\texttt{y=\\lfloor{y}\\rfloor+}\\frac{\\texttt{d-z}}{\\texttt{n}}\\), where \\(\\texttt{y}\\) is decimal years (), \\(\\texttt{\\lfloor{y}\\rfloor}\\) is floored years (), \\(\\texttt{d}\\) is decidays (), \\(\\texttt{z}\\) is the Dec time zone (), and \\(\\texttt{n}\\) is the total number of decidays in the year ().\nIn addition to time, Dec also measuresgeographic andcelestial coordinates: longitude , latitude, azimuth, altitude, etc.\nImportantly, Dec time zones are derived from floored decidays of longitude (\\(\\texttt{z=\\lfloor{Œª}\\rfloor}\\)) and can be appended to the time of day (), but not to durations, e.g.¬†the centimillidays since this webpage was loaded: .\n\nunix = {\n  while(true) {\n    yield Date.now();\n  }\n}\ntick = {\n  let i = 0;\n  while (true) {\n    yield Promises.tick(864, ++i);\n  }\n}\ntickTime = tick % 1e5\n// http://howardhinnant.github.io/date_algorithms.html#civil_from_days\nfunction unix2dote(unix, zone, offset = 719468) {\n  return [\n    (unix ?? Date.now()) / 86400000\n    + (zone = zone ?? (10 - Math.round(\n        (new Date).getTimezoneOffset() / 144)) % 10\n      ) / 10 + offset, zone]\n}\nfunction dote2doty(days = 719468, zone = 0) {\n  const era = Math.floor((days &gt;= 0 ? days : days - 146096) / 146097), dotc = days - era * 146097,\n      yotc = Math.floor((dotc - Math.floor(dotc / 1460) + Math.floor(dotc / 36524) - Math.floor(dotc / 146096)) / 365);\n  return [yotc + era * 400, dotc + Math.floor(yotc / 100) - yotc * 365 - Math.floor(yotc / 4), zone];\n}\nfunction doty2deco(year = 1969, doty = 306, zone = 0) {\n  return `${year.toString().padStart(4, \"0\")}+${Math.floor(doty).toString().padStart(3, \"0\")}${String(doty % 1 * 10).slice(0, 6)}-${zone}`\n}\nydz = dote2doty(...unix2dote(unix))\ndeco = doty2deco(...ydz)\n// https://observablehq.com/@observablehq/text-color-annotations-in-markdown#textcolor\nfunction setStyle(content, style = {}) {\n  function yiq(color) {\n    const {r, g, b} = d3.rgb(color);\n    return (r * 299 + g * 587 + b * 114) / 1000 / 255; // returns values between 0 and 1\n  }\n  const {\n    background,\n    color = yiq(background) &gt;= 0.6 ? \"#111\" : \"white\",\n    padding = \"0 1px\",\n    borderRadius = \"4px\",\n    fontWeight = 900,\n    fontSize = \"1em\",\n    ...rest\n  } = typeof style === \"string\" ? {background: style} : style;\n  return htl.html`&lt;span style=${{\n    background,\n    color,\n    padding,\n    borderRadius,\n    fontWeight,\n    ...rest\n  }}&gt;${content}&lt;/span&gt;`;\n}\nfunction year2bool(year = 1970) {\n    return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;\n}\ndecoYear = deco.slice(0, 4)\ndecoDate = deco.slice(5, 8)\ndecoTime = deco.slice(8, 14)\ndecoTimeZone = deco[15]\nnDaysInYear = 365 + year2bool(ydz[0] + 1)\nfracYear = (ydz[0] + (ydz[1] - ydz[2]) / nDaysInYear).toFixed(8)\nstyledDecoYear0 = setStyle(decoYear, d3.schemePaired[10])\nstyledDecoYear1 = setStyle(decoYear, d3.schemePaired[10])\nstyledFracYear = setStyle(fracYear, d3.schemePaired[10])\nstyledDecoDate0 = setStyle(decoDate, d3.schemePaired[1])\nstyledDecoDate1 = setStyle(decoDate, d3.schemePaired[1])\nstyledNdays = setStyle(nDaysInYear * 10, d3.schemePaired[1])\nstyledDecoTime0 = setStyle(decoTime, d3.schemePaired[2])\nstyledDecoTime1 = setStyle(decoTime, d3.schemePaired[2])\nstyledDecoTime2 = setStyle(decoTime, d3.schemePaired[2])\nstyledTimeZone0 = setStyle(decoTimeZone, d3.schemePaired[3])\nstyledTimeZone1 = setStyle(decoTimeZone, d3.schemePaired[3])\nstyledTimeZone2 = setStyle(decoTimeZone, d3.schemePaired[3])\nstyledTickTime = setStyle(tickTime, d3.schemePastel2[0])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Back to topCitationBibTeX citation:@online{laptev2024,\n  author = {Laptev, Martin},\n  title = {The {Dec} Measurement System},\n  date = {2024},\n  urldate = {2024},\n  url = {https://maptv.github.io/blog/dec},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nLaptev, Martin. 2024. ‚ÄúThe Dec Measurement System.‚Äù 2024.\nhttps://maptv.github.io/blog/dec.",
    "crumbs": [
      "Measurement",
      "Size"
    ]
  },
  {
    "objectID": "software/jupyter/index.html",
    "href": "software/jupyter/index.html",
    "title": "Jupyter",
    "section": "",
    "text": "The goal of this blog post, the second to last (index: -2) in my Tools blog post series, is to\n\n\n\n\n\n\n\nflowchart TB\n   A[Git]--&gt;B[VSCode]--&gt;C[Quarto]\n   C--&gt;D[Observable]\n   C--&gt;E[Jupyter]\n   C--&gt;F[Knitr]\n   click A \"../git\"\n   click B \"../vscode\"\n   click C \"../quarto\"\n   click D \"../observable\"\n   click E \"../jupyter\"\n   click F \"../knitr\"\n   style E stroke:#99f,stroke-width:5px\n\n\n\n\nFigure¬†1: Tools series navigation chart",
    "crumbs": [
      "Software",
      "Jupyter"
    ]
  },
  {
    "objectID": "software/jupyter/index.html#tldr",
    "href": "software/jupyter/index.html#tldr",
    "title": "Jupyter",
    "section": "",
    "text": "The goal of this blog post, the second to last (index: -2) in my Tools blog post series, is to\n\n\n\n\n\n\n\nflowchart TB\n   A[Git]--&gt;B[VSCode]--&gt;C[Quarto]\n   C--&gt;D[Observable]\n   C--&gt;E[Jupyter]\n   C--&gt;F[Knitr]\n   click A \"../git\"\n   click B \"../vscode\"\n   click C \"../quarto\"\n   click D \"../observable\"\n   click E \"../jupyter\"\n   click F \"../knitr\"\n   style E stroke:#99f,stroke-width:5px\n\n\n\n\nFigure¬†1: Tools series navigation chart",
    "crumbs": [
      "Software",
      "Jupyter"
    ]
  },
  {
    "objectID": "software/jupyter/index.html#sec-intro",
    "href": "software/jupyter/index.html#sec-intro",
    "title": "Jupyter",
    "section": "Introduction",
    "text": "Introduction",
    "crumbs": [
      "Software",
      "Jupyter"
    ]
  },
  {
    "objectID": "software/git/index.html",
    "href": "software/git/index.html",
    "title": "Git",
    "section": "",
    "text": "In this blog post, I show how to use the Git version control system and the command line interfaces (CLIs) for the GitHub and GitLab Git repository hosts to create a Git repository that contains setup files for the Codespaces and GitPod computing platforms.",
    "crumbs": [
      "Software",
      "Git"
    ]
  },
  {
    "objectID": "software/git/index.html#tldr",
    "href": "software/git/index.html#tldr",
    "title": "Git",
    "section": "",
    "text": "In this blog post, I show how to use the Git version control system and the command line interfaces (CLIs) for the GitHub and GitLab Git repository hosts to create a Git repository that contains setup files for the Codespaces and GitPod computing platforms.",
    "crumbs": [
      "Software",
      "Git"
    ]
  },
  {
    "objectID": "software/git/index.html#navigation-chart",
    "href": "software/git/index.html#navigation-chart",
    "title": "Git",
    "section": "Navigation Chart",
    "text": "Navigation Chart\nFigure¬†1 summarizes the relationship between this post (highlighted with a violet border) and the subsequent posts in my Tools blog post series. Click/tap on a node in Figure¬†1 to navigate to the corresponding post. If you cannot see Figure¬†1, rotate your smartphone screen to a horizontal (landscape) position.\n\n\n\n\n\n\n\nflowchart TB\n   A[Git]--&gt;B[VSCode]--&gt;C[Quarto]\n   C--&gt;D[Observable]\n   C--&gt;E[Jupyter]\n   C--&gt;F[Knitr]\n   click A \"../git\"\n   click B \"../vscode\"\n   click C \"../quarto\"\n   click D \"../observable\"\n   click E \"../jupyter\"\n   click F \"../knitr\"\n   style A stroke:#99f,stroke-width:5px\n\n\n\n\nFigure¬†1: Tools series navigation chart",
    "crumbs": [
      "Software",
      "Git"
    ]
  },
  {
    "objectID": "software/git/index.html#sec-intro",
    "href": "software/git/index.html#sec-intro",
    "title": "Git",
    "section": "Introduction",
    "text": "Introduction\nGit is a version control system developed by Linux creator Linus Torvalds. Since its first release in 2005+037, Git has largely replaced other version control systems and is used by 93% of software developers worldwide, according to survey results published by StackOverflow on 2022+314.\nThanks to Git, I can sleepüí§soundly at night, reassured by the knowledge that all of my progress on all of my ongoing projects is recorded. My progress is not only stored on my local computer, but also on Git repository hosts such as GitHub and GitLab.\nA Git repository (repo) is a directory that tracks the changes made to its contents. For more information on GitHub, the largest Git repo host, take a look at the ‚ÄúGitHub for supporting, reusing, contributing, and failing safely‚Äù post by Allison Horst and Julie Lowndes on the Openscapes blog.\nGitHub and GitLab do not only host repos, but also websites via GitHub Pages and GitLab Pages. In addition to providing basic web hosting for free, GitHub and GitLab offer free access to continuous integration (CI) systems called GitHub Actions and GitLab CI/CD that can automatically build and deploy software.\nAnother advantage of using Git is the availability of free web-based editors, such as github.dev, vscode.dev, and Web IDE, that make it possible to modify repo contents via a web browser without the need to keep local copies of repos or have anything installed locally. Cloud-based computing platforms like GitHub Codespaces and GitPod offer the same benefits of web-based editors, but also provide compute for running code and building software, thus enabling remote development on any computer with a web browser.\nBefore you can benefit from everything GitHub and/or GitLab have to offer, you will need to set up your computer so that you can work locally and/or configure a service like GitHub Codespaces or GitLab Web IDE for remote development in your web browser. In this post, I discuss local development environment setup with the Homebrew package manager and repo setup with the GitHub and GitLab CLI.\nIf you follow along to end of this post, you will have a repo called dotfiles that can be used for Codespaces and GitPod setup. I cover how to set up Codespaces and GitPod in my next blog post, which focuses on the Visual Studio Code (VSCode) and VSCodium source-code editors.",
    "crumbs": [
      "Software",
      "Git"
    ]
  },
  {
    "objectID": "software/git/index.html#sec-setup",
    "href": "software/git/index.html#sec-setup",
    "title": "Git",
    "section": "Setup",
    "text": "Setup\n\nHomebrew\nLinux, macOS, or Windows Subsystem for Linux (WSL) users can install everything needed to work through all of the examples in this blog post via the Homebrew](https://brew.sh) package manager. First, install Homebrew itself with the latest .pkg installer for macOS or by running the Example¬†1 Unix shell code in your terminal.\n\nExample 1 ¬†\n/bin/bash -c \"$(curl -fsSL https://\\\nraw.githubusercontent.com/Homebrew/\\\ninstall/HEAD/install.sh)\"\n\nIf you are not completely satisfied with the terminal that comes with your operating system (OS), you can use Homebrew to install a new terminal. The terminals I use most often are the iTerm2 standalone terminal and the integrated terminal built into my preferred source-code editor VSCodium. Unfortunately, iTerm2 is only for macOS, but there is an abundance of great multi-OS standalone terminals, such as Alacritty, Hyper, Kitty, and Tabby.\nAfter installing Homebrew, you can run brew doctor in your terminal to confirm that everything is set up correctly. If the brew command is not available, you need to follow the instructions provided after installation to add brew to your PATH variable.\nOnce Homebrew is ready, you can run the shell code in Example¬†2 to create a file called Brewfile with the echo shell command and install everything listed in this newly created Brewfile with the brew bundle shell command.\n\nExample 2 ¬†\necho 'brew \"gh\"\\nbrew \"git\"\nbrew \"glab\"\\ncask \"github\"' &gt; Brewfile\nbrew bundle\n\nThe Brewfile created by the shell code in Example¬†2 installs:\n\nGit,\nthe command line interfaces (CLIs) for\n\nGitHub and\nGitLab, and\n\nthe GitHub Desktop Git Graphical User Interface (GUI).\n\nAfter installing Git, you should go through the First-Time Git Setup or make sure you have a Git configuration file with the correct name and location, either ~/.gitconfig or ~/.config/git/config, where ~ represents the home directory and / is the directory delimiter used in Unix paths. When configuring Git, I recommend that you set your default editor to VSCode (code) or VSCodium (codium) as shown in Example¬†3.\n\nExample 3 ¬†\n\nShell.gitconfig\n\n\ngit config --global core.editor \"codium --wait\"\n\n\n[core]\n    editor = codium --wait\n\n\n\n\nIf you are curious about how I set up my computer, you can take a look at my Brewfile, .gitconfig, and other configuration files in my setup repo on GitHub and GitLab. In particular, I will highlight my Z shell configuration file (.zshrc) in Section¬†5.\n\n\nAuthentication\nBefore we get started, you will need to have created an account on GitHub and/or GitLab. You will need two authentication methods: 1) to sign into github.com or gitlab.com in your browser and 2) to run the git push shell command in your terminal. For git push to work, you will need either a Personal Access Token (PAT) or a Secure Shell (SSH) key.\nCreating a PAT on GitHub or GitLab is easy, but then you must also store your PAT in Keychain Access on Mac or Git Credential Manager on Windows and Linux to avoid having to enter your PAT every time you run git push in your terminal. In contrast, setting up an SSH key on GitHub or GitLab requires much more effort but you can set up a single SSH key and reuse it for GitHub, GitLab, and any other service that supports authentication via SSH key.\nWhen I set up a new computer, I create a SSH key using the command in ?@exm-keygen. I can add this key to my SSH agent simply by running ssh-add, but I also\nssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -C \\((uname -n)_\\)(sysctl hw.model | cut -f2 -d¬†)\nI use the\nIf you enter an empty passphrase when creating your SSH key, then you will not need Keychain Access or Git Credential Manager. frictionless experience by default, whereas PATs are more difficult than need to entered every time your. This major limitation of PATs can be circumvented by storing your PAT in Keychain Access on Mac or Git Credential Manager on Windows and Linux.\nThe instructions for setting up an SSH key can use your newly created key for both GitHub and GitLab, but if you have more than one account on the same Git repo host, you will need to create a separate key for each account and include each identity file in your ~/.ssh/config file as shown in Example¬†5.\nI can add this key that one SSH key is named ~/.ssh/id_rsa, ~/.ssh/id_ecdsa, ~/.ssh/id_ecdsa_sk, ~/.ssh/id_ed25519, ~/.ssh/id_ed25519_sk, or ~/.ssh/id_dsa.\nIso I can add it to my SSH agent simply by running ssh-add. unless I need to sign into multiple accounts on the same Git repository host.\nFor example, if I have separate accounts for work and personal projects, I create a separate SSH key for each account and include each identity file in my ~/.ssh/config file as shown in Example¬†5. If including ‚ÄúAddKeysToAgent yes‚Äù does not automatically add your SSH keys to your SSH agent, run ssh-add ~/.ssh/USERNAME to add each SSH key.\n\nExample 4 ¬†\n\n\n~/.ssh/config\n\nHost github-WORKUSERNAME\n    AddKeysToAgent yes\n    HostName github.com\n    IdentityFile ~/.ssh/WORKUSERNAME\n    IdentitiesOnly yes\n\nHost github-PERSONALUSERNAME\n    AddKeysToAgent yes\n    HostName github.com\n    IdentityFile ~/.ssh/PERSONALUSERNAME\n    IdentitiesOnly yes\n\n\nOf the many authentication methods, passkeys stand out because they can function as both a password and two-factor authentication (2FA), thus combining the two steps in the 2FA sign-in process into one. Passkeys will certainly become more common in the future, especially now that GitHub recently announced its plan to make 2FA mandatory for code contributors.\nWhen authenticating via SSH, we use SSH URLs, such as git@github.com:maptv/dotfiles.With PATs, we use HTTPS URLs such as https://github.com/maptv/dotfiles, instead of the\n\nExample 5 ¬†\n\n\n~/.ssh/config\n\nHost github-USERNAME1\n   HostName github.com\n   IdentityFile ~/.ssh/USERNAME1\n   IdentitiesOnly yes\n\nHost github-USERNAME2\n   HostName github.com\n   IdentityFile ~/.ssh/USERNAME2\n   IdentitiesOnly yes\n\n\nIf you have an identity file in your ~/.ssh/ directory that follows the naming convention, you can add it to your current shell session by running ssh-add. If not, you will need to provide the identity file as an argument, e.g.¬†ssh-add ~/.ssh/USERNAME1.\nYou can create a repo using the web interface of https://github.com or https://gitlab.com in your browser, but the best way to start a new project is using the CLI for GitHub or GitLab in your terminal. First, run gh auth login or glab auth login and follow the prompts to authenticate via your web browser or with an authentication token.\nThe GitHub CLI allows you to add an SSH key to your account during or after authentication. The GitLab CLI does not handle SSH keys during authentication, but has a similar command for adding an SSH key to your GitLab account.\n\n\nRepository\nAfter authentication and SSH key setup, you can run the code in either of the code chunks in Example¬†6 to set up your local and remote repos and create a Quarto website project in the local repo. You can create shell alias that combine all of the repo creation steps like I did in my .zshrc.\n\nExample 6 ¬†\n\nGitHubGitLab\n\n\ncd # start in home directory\nmkdir USERNAME\ncd USERNAME\ngh repo create REPONAME --add-readme --clone --public\ncd REPONAME\n\n\ncd # start in home directory\nmkdir USERNAME\ncd USERNAME\nglab repo create REPONAME --readme --defaultBranch main --public\ncd REPONAME\ngit pull origin main\ngit branch --set-upstream-to=origin/main main\n\n\n\n\nTo make it easier to backup my repos on both GitHub and GitLab, I set up each local repo to have two origin remote URLs using the code as shown in Example¬†7. With this setting, running git push in my local repo updates my remote repos on both GitHub and GitLab.\n\nExample 7 ¬†\ngit remote add lab git@gitlab.com:maptv/maptv.gitlab.io\ngit remote add hub git@github.com:maptv/maptv.github.io\ngit remote set-url --add origin $(git remote get-url lab)",
    "crumbs": [
      "Software",
      "Git"
    ]
  },
  {
    "objectID": "software/git/index.html#sec-workflow",
    "href": "software/git/index.html#sec-workflow",
    "title": "Git",
    "section": "Git workflow",
    "text": "Git workflow\nWhen I want to add or update the content on my site, I go through the steps in the standard Git workflow shown in Figure¬†2. Every time I ‚Äúpush‚Äù a collection of changes called a commit to my maptv.github.io repo on GitHub, a continuous integration (CI) system called GitHub Actions automatically completes the steps required to build and publish my website.\n\n\n\n\n\n\nflowchart LR\n   A[working&lt;br/&gt;directory]-.git&lt;br/&gt;add.-&gt;B{{staging&lt;br/&gt;area}}-.git&lt;br/&gt;commit.-&gt;C([local&lt;br/&gt;repo])-.git&lt;br/&gt;push.-&gt;D(remote&lt;br/&gt;repo)\n\n\n\n\nFigure¬†2: Git workflow\n\n\n\n\n\n\nShell aliases\nTo make it easier to make incremental changes to my website and frequently release new content, I combined all of the git shell commands in Figure¬†2 into shell aliases. You can add shell aliases to a shell configuration file like .bashrc or .zshrc on your computer to shorten one or more commands and any associated command arguments.\nThe git commit aliases in the .zshrc file in my setup repo on GitHub and GitLab target different groups of files for inclusion in the next commit. For example, cmp targets staged files, camp targets tracked files, a.cmp targets files in the current directory, and aacmp targets files in the repo.\nExample¬†8 shows the aacmp alias as an example of the shell alias syntax. The mnemonic device for this alias is add all, commit with a message, and push.\n\nExample 8 ¬†\n\n\n.zshrc\n\nalias aacmp=\"func() { git add --all && git commit --message \\\n    \\\"$(echo '${*:-$(echo $(git diff --name-status --cached \\\n    | tr \"[:space:]\" \" \"))}')\\\" && git push; }; func\"\n\n\nAliases like aacmp allow me to enter free-form commit messages directly on the command line without quotes, e.g.¬†aacmp edit first post. If you decide to try one of these aliases, please exercise extreme caution as any un-escaped or un-quoted metacharacters may yield surprising effects instead of being included verbatim in the commit message, e.g.¬†* is replaced by all of the file and directory names in the current directory!\nIf no commit message is provided after the aliases, a generic commit message is created that includes the change type and name of each changed file. In Section¬†5.2, I describe how I used this generic commit message approach to further simplify the Git workflow.\n\n\nKeybindings\nAn alternative to a shell alias that combines git commands is to use a keyboard shortcut in a Git Graphical User Interface (GUI) such as GitHub Desktop or the Git interface in a code editor like VSCode, VSCodium, or RStudio. I use keyboard shortcuts in VSCode and VSCodium to send shell commands to the integrated terminal without moving my focus away from the files I am editing.\nI created different shortcuts to control which files are included in each commit: ‚å•‚áßF for the current file only, ‚å•‚áßS for already staged files, ‚å•‚áßT for all tracked files, and ‚å•‚áßU for all files including untracked files. I also have keyboard shortcuts that affect a specific directory (and all of its subdirectories): ‚å•‚áßD for the current file‚Äôs directory, ‚å•‚áß. for shell‚Äôs current directory, ‚å•‚áßC for the current working directory according to VSCode/VSCodium, ‚å•‚áßW for the Workspace directory.\nExample¬†9 displays the ‚å•‚áßF shortcut as an example of the VSCode/VSCodium shortcut syntax. This shortcut uses the escape code for the return key (\\u000D) to run several git commands and predefined variables to insert the absolute (${file}) and relative (${relativeFile}) path to the currently open file.\n\nExample 9 ¬†\n\n\nkeybindings.json\n\n{\n  \"key\": \"shift+alt+f\",\n  \"command\": \"workbench.action.terminal.sendSequence\", \"args\": { \"text\":\n    \"git add ${file} && git commit -m \\\"M ${relativeFile}\\\" && git push\\u000D\" },\n  \"when\": \"terminalIsOpen\"\n}\n\n\nIf you want to set up similar shortcuts for yourself, take a look at my keybindings.json in my setup repo on GitHub and GitLab. As you create keyboard shortcuts, please be mindful of keybinding conflicts that may arise.\nTo set up a keyboard shortcut that runs a series of steps rather than a single line of shell code, I suggest you use the VSCode/VSCodium Tasks mechanism, a system designed to automate software build tasks. The default keyboard shortcut to run all tasks in a local or global task.json file is ‚åÉ‚áßB on Linux/Windows or ‚åò‚áßB on Mac (mnemonic: B is for Build), but you can bind other shortcuts to specific tasks.\nIf you use a text editor like Vim or Emacs, you can create keybindings for Vim plugins like fugitive or Emacs packages like magit that run through the entire Git workflow. Example¬†10 shows the Vim+fugitive equivalent of my ‚å•‚áßF VSCode/VSCodium keybinding.\n\nExample 10 ¬†\n\n\n.vimrc\n\nnnoremap &lt;A-S-f&gt; :Gw&lt;bar&gt;G! commit -m \"M \"%&lt;bar&gt;G! push&lt;CR&gt;\n\n\nThe drawback of my keyboard shortcut approach for the Git workflow is that it produces generic commit messages that are no very informative. Anyone reading the messages will not be able to tell what changes were made and more importantly why the changes were made.\nTo automatically generate commit messages based on the currently staged changes, we can use a Large Language Model (LLM). Generative artificial intelligence models like LLMs tend to be large in size and have atypical computational requirements, so I will save my adventures with LLMs for a different post.\nI really enjoy using Git, especially with shell aliases in my terminal and keyboard shortcuts in my favorite text editors. If we ever collaborate on a project together, you can be sure that I will insist on using Git!",
    "crumbs": [
      "Software",
      "Git"
    ]
  },
  {
    "objectID": "software/quarto/index.html",
    "href": "software/quarto/index.html",
    "title": "Quarto",
    "section": "",
    "text": "This blog post is the most important post in my Tools blog post series, as indicated by its centrality in Figure¬†1, node of the netw focuses on the use of Quarto to author and publish digital content. As the third post in my , which is summarized by Figure¬†1, and depends on the. is my blog post on Quarto. The subsequent posts in the series demonstrate how to use Observable, Jupyter, and Knitr to execute code in Quarto documents.\n\n\n\n\n\n\n\nflowchart TB\n   A[Git]--&gt;B[VSCode]--&gt;C[Quarto]\n   C--&gt;D[Observable]\n   C--&gt;E[Jupyter]\n   C--&gt;F[Knitr]\n   click A \"../git\"\n   click B \"../vscode\"\n   click C \"../quarto\"\n   click D \"../observable\"\n   click E \"../jupyter\"\n   click F \"../knitr\"\n   style C stroke:#99f,stroke-width:5px\n\n\n\n\nFigure¬†1: Tools series navigation chart\n\n\n\n\nIf you do not have such a repo, you can create one by following along with the previous post in my tools blog post series, which is shown in Figure¬†1.",
    "crumbs": [
      "Software",
      "Quarto Markdown"
    ]
  },
  {
    "objectID": "software/quarto/index.html#tldr",
    "href": "software/quarto/index.html#tldr",
    "title": "Quarto",
    "section": "",
    "text": "This blog post is the most important post in my Tools blog post series, as indicated by its centrality in Figure¬†1, node of the netw focuses on the use of Quarto to author and publish digital content. As the third post in my , which is summarized by Figure¬†1, and depends on the. is my blog post on Quarto. The subsequent posts in the series demonstrate how to use Observable, Jupyter, and Knitr to execute code in Quarto documents.\n\n\n\n\n\n\n\nflowchart TB\n   A[Git]--&gt;B[VSCode]--&gt;C[Quarto]\n   C--&gt;D[Observable]\n   C--&gt;E[Jupyter]\n   C--&gt;F[Knitr]\n   click A \"../git\"\n   click B \"../vscode\"\n   click C \"../quarto\"\n   click D \"../observable\"\n   click E \"../jupyter\"\n   click F \"../knitr\"\n   style C stroke:#99f,stroke-width:5px\n\n\n\n\nFigure¬†1: Tools series navigation chart\n\n\n\n\nIf you do not have such a repo, you can create one by following along with the previous post in my tools blog post series, which is shown in Figure¬†1.",
    "crumbs": [
      "Software",
      "Quarto Markdown"
    ]
  },
  {
    "objectID": "software/quarto/index.html#sec-intro",
    "href": "software/quarto/index.html#sec-intro",
    "title": "Quarto",
    "section": "Introduction",
    "text": "Introduction\nQuarto is an open-source software system for turning plain-text source files into outputs like articles, books, blogs, dashboards, presentations, reports, and websites. Announced on 2022+149 by Posit CEO JJ Allaire, Quarto is already taking the worldüåêby storm‚õàÔ∏è!\nI strongly believe that everyone, regardless of their background and current technical skill level, can learn and benefit from Quarto. Getting started with Quarto is easy thanks to its excellent documentation and vibrant community of enthusiastic users and developers.\nRather than repeat the basic information already available elsewhere, I will share some advanced techniques along with the fundamental knowledge needed to understand how they work. The topics I cover are very technical, but my goal is to make the content on my blog as accessible as possible.\nThe first topic I will delve into is creating and publishing a website with Quarto. To follow the Quarto documentation on creating a website, you will need Visual Studio Code (VSCode), VSCodium, RStudio, or a terminal.",
    "crumbs": [
      "Software",
      "Quarto Markdown"
    ]
  },
  {
    "objectID": "software/quarto/index.html#sec-pub",
    "href": "software/quarto/index.html#sec-pub",
    "title": "Quarto",
    "section": "Publishing Quarto sites",
    "text": "Publishing Quarto sites\n\nInstalling tools\nIf you use macOS, Linux, or the Windows Subsystem for Linux (WSL), you can install all of the aforementioned tools with the Homebrew package manager. To install everything you will need to follow along with this blog post, you can first install Homebrew and then run brew bundle in a directory that contains the Brewfile shown in Example¬†1.\n\nExample 1 ¬†\n\n\nBrewfile\n\nbrew \"gh\"\nbrew \"git\"\nbrew \"glab\"\ncask \"github\"\ncask \"quarto\"\ncask \"rstudio\"\ncask \"vscodium\"\ncask \"visual-studio-code\"\nvscode \"quarto.quarto\"\nvscode \"REditorSupport.r\"\n\n\nUsing a package manager like Homebrew to install all the requirements with a single shell command like brew bundle is the fastest and easiest way to get ready to follow along with this blog post. If you are curious about how I set up my computer, you can take a look at my Brewfile and other configuration files in my setup repository (repo) on GitHub and GitLab.\nApart from RStudio, VSCode, and VSCodium, the Brewfile in Example¬†1 will install the Git version control system, the GitHub and GitLab command line interfaces (CLIs), and GitHub Desktop, a Git Graphical User Interface (GUI). For more information on Git, a tool used by 93% of software developers worldwide according to survey results published by StackOverflow on 2022+314, take a look at the ‚ÄúGitHub for supporting, reusing, contributing, and failing safely‚Äù post by Allison Horst and Julie Lowndes on the Openscapes blog.\nAs an alternative to installing tools on your computer, you can use the web interface provided by GitHub Codespaces. To set up a Codespace, you can remove the lines that start with cask from the Brewfile provided in Example¬†1 and add the file to a repo called dotfiles and along with a setup.sh file like the one shown in Example¬†2.\n\nExample 2 ¬†\n\n\nsetup.sh\n\necho | /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n(echo; echo 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"') &gt;&gt; /home/codespace/.profile\neval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"\nbrew bundle\n\n\n\n\nPublishing overview\nOnce you are done setting up your computer or Codespace, you create a Quarto website template and make your site publicly available on the internet using one of the many available publishing services. To explore and assess different publishing workflows and free website hosting options, I set up my personal website on four different web hosts: Quarto Pub, Netlify, GitHub Pages, and GitLab Pages.\nThere are so many different ways to publish a Quarto site that I decided to come up with a naming system for Quarto publishing methods. The naming system derives a code for each publishing method from the numbered lists in the Quarto publishing documentation. For example, I refer to the two methods to publish to Quarto Pub as Q1 and Q2:\nTable¬†1 uses this naming system in its Code column to identify the publishing methods I discuss in this blog post. Each publishing method targets a particular web Host, Renders content locally or on a remote server, and deploys sites using either the quarto publish or the git push shell Command.\n\n\n\n\n\n\nCode\nHost\nRender\nCommand\n\n\n\n\nG1\nGitHub\nLocal\npush\n\n\nG2\nGitHub\nLocal\npublish\n\n\nG3\nGitHub\nRemote\npush\n\n\nN1\nNetlify\nLocal\npublish\n\n\nN2\nNetlify\nLocal\npush\n\n\nN3\nNetlify\nRemote\npush\n\n\nQ1\nQuarto\nLocal\npublish\n\n\nQ2\nQuarto\nRemote\npush\n\n\n\n\n\nTable¬†1: Quarto website publishing methods\n\n\n\n\n\nGit workflow\nThe first publishing method I tried for my personal site was G1, which requires the use of Git to push all website content to a Git provider like GitHub or GitLab. After I set up GitHub Pages and GitLab Pages, I could update my website on both of these web hosts just by going through the standard Git workflow shown in Figure¬†2.\n\n\n\n\n\n\nflowchart LR\n   A[working&lt;br/&gt;directory]-.git&lt;br/&gt;add.-&gt;B{{staging&lt;br/&gt;area}}-.git&lt;br/&gt;commit.-&gt;C([local&lt;br/&gt;repo])-.git&lt;br/&gt;push.-&gt;D(remote&lt;br/&gt;repo)\n\n\n\n\nFigure¬†2: Git workflow\n\n\n\n\n\nTo make it easier to make incremental changes to my website and frequently release new content, I combined all of the git shell commands in Figure¬†2 into a shell alias. You can add shell aliases to a shell configuration file like .bashrc or .zshrc on your computer to shorten commands or combine any sequence of commands into one step.\nThe aacmp alias in the .zshrc file in my setup repo allows me to enter a free-form commit message directly on the command line without quotes, e.g.¬†qp edit first blog. If you decide to try my aacmp alias, please exercise extreme caution as any un-escaped or un-quoted metacharacters may yield surprising effects instead of being included verbatim in the commit message. For example, qp * will list the contents of the current directory in the commit message in place of the asterisk!\nAn alternative to a shell alias that combines git commands is a keyboard shortcut in Git-enabled GUI. Example¬†3 shows two files, tasks.json and update.sh, that we can use to set up VSCode, VSCodium, and GitHub Codespaces to go through the Git workflow whenever we press Ctrl+Shift+B on Linux/Windows or ‚åò+Shift+B on Mac (mnemonic: B is for Build).\n\nExample 3 ¬†\n\nupdate.shtasks.json\n\n\n\n\n\n\n\n\n\n\nThis mechanism is called Tasks and is used to automate software build tasks, which can include any steps required to build and publish a website. Importantly, the Tasks mechanism requires that the tasks.json file be added to the .vscode directory and that we enable execution of the update.sh script by running chmod +x update.sh in our project root.\nShell aliases and keyboard shortcuts can greatly facilitate the Git workflow which is essential not only for G1, but also G3, N3, and Q2. Unlike these other publishing methods, G1 leads to messy commits that contain changes to both source and output files.\n\n\nquarto publish\nTo have cleaner commits, I switched from G1 to G2 by adding quarto publish to my publishing workflow. With G2, I can track changes to my source files on my main branch and publish my output files to GitHub Pages and GitLab Pages from my gh-pages branch.\nQ1, N1, and G2 all use quarto publish to render website content locally and then deploy it in one fell swoop. If you do not plan to use the Git version control system or the advanced features offered by GitHub, GitLab, or Netlify, then I recommend deploying your site to Quarto Pub by running quarto publish quarto-pub (Q1 in Table¬†1).\nLike Q1, N1 is a deployment method that does not require Git and makes it possible to deploy our site with a single shell command: quarto publish netlify. N1 provides access to the advanced web hosting features offered by Netlify and can even render content as long as code execution is frozen.\nTo deploy my site to GitHub Pages, GitLab Pages, and Netlify, I combined G2 and N2. When I run quarto publish gh-pages, Quarto renders my site into my output directory, copies the output directory contents to the gh-pages branch of my local repo, and then commits and pushes the changes to my remote repos on GitHub and GitLab, which triggers Netlify to build my site from the gh-pages branch.\nTo summarize the Quarto publishing methods I discussed so far, Q1 and N1 are easy to configure and use, N2 automatically builds sites from Git repos, G1 is not recommended because it pollutes commits with output file changes, and G2 is more difficult to set up and use but provides clean commits and a nice separation of source and output files.\n\n\nGitHub Actions\nAll of the publishing methods I have discussed so far require us to generate output files locally by rendering our source files. In contrast, Q2, G3, and N3 make it possible to skip local rendering in favor of relying on GitHub Actions to handle all of the necessary steps.\nG3 is noteworthy, because it offers the same convenience of G1 but without messy commits that mix changes to source and output files. An added bonus of G3 is that rendering with GitHub Actions provides a reproducible computational environment that is not dependent on what you have installed on your computer.\nInstead of using GitHub Actions, I could have used GitLab CI/CD to build my site. I decided not to go down this route because the Quarto dev team has many GitHub Actions workflows available but currently no official support for GitLab CI/CD.\nBefore trying to use GitHub Actions or any other continuous integration systems in your publishing workflow, I suggest getting used to working with quarto publish (Q1, G2, or N1). You can always set up other publishing methods later without sacrificing anything, because all of the publishing methods except G1 can be combined together.\nIn Section¬†4, I will walk through the setup of both G2 and G3 to provide the option of rendering locally by running quarto publish or rendering remotely with GitHub Actions by pushing to the main branch. Along the way, I will share many practical tips and general advice that you can apply to any project.",
    "crumbs": [
      "Software",
      "Quarto Markdown"
    ]
  },
  {
    "objectID": "software/quarto/index.html#sec-set",
    "href": "software/quarto/index.html#sec-set",
    "title": "Quarto",
    "section": "Publishing setup",
    "text": "Publishing setup\n\nRepo setup\nBefore you can use GitHub Actions to publish your site, you will need a GitHub, an SSH key, and a repo like maptv.github.io that has a default branch called main and another branch which must be called gh-pages. If you want to publish on GitLab Pages, you will also need a GitLab account and an analogous GitLab repo like maptv.gitlab.io.\nYou can create the repo and the gh-pages branch using the web interface of https://github.com or https://gitlab.com in your browser, but the best way to start a new project is using the CLI for GitHub or GitLab in your terminal. First, run gh auth login or glab auth login and follow the prompts to authenticate via your web browser or with an authentication token.\nThe GitHub CLI allows you to add an SSH key to your account during or after authentication. The GitLab CLI does not handle SSH keys during authentication, but has a similar command for adding an SSH key to your GitLab account.\nAfter authentication and SSH key setup, you can run the code in either of the code chunks in Example¬†4 to set up your local and remote repos and create a Quarto website project in the local repo. You can create shell alias that combine all of the repo creation steps like I did in my .zshrc.\n\nExample 4 ¬†\n\nGitHubGitLab\n\n\ncd # start in home directory\nmkdir -p USERNAME\ncd USERNAME\ngh repo create USERNAME.github.io --add-readme --clone --public\ncd SITENAME\nquarto create project website USERNAME.github.io\n\n\ncd # start in home directory\nmkdir -p USERNAME\ncd USERNAME\nglab repo create USERNAME.gitlab.io --readme --defaultBranch main --public\ncd SITENAME\ngit pull origin main\ngit branch --set-upstream-to=origin/main main\nquarto create project website USERNAME.gitlab.io\n\n\n\n\nTo make it easier to maintain my site on both GitHub and GitLab Pages, I set up my local repo cloned to have two origin remote URLs using the code as shown in Example¬†5. Now, running quarto publish or git push in my local repo, updates my content on both GitHub and GitLab.\n\nExample 5 ¬†\ngit remote add lab git@gitlab.com:maptv/maptv.gitlab.io\ngit remote add hub git@github.com:maptv/maptv.github.io\ngit remote set-url --add origin $(git remote get-url lab)\n\nIf you want to have your website hosted on GitHub Pages, you will need to set gh-pages as your source branch in your repo settings. For GitLab Pages, you will need to add a .gitlab-ci.yml file to your repo and update your _quarto.yml file as shown in Example¬†6 to include .gitlab-ci.yml as a resource in your output directory.\n\nExample 6 ¬†\n\n.gitlab-ci.yml_quarto.yml\n\n\n# https://docs.gitlab.com/ee/user/project/pages/introduction.html#customize-the-default-folder\npages:\n  script: echo \"The site will be deployed to $CI_PAGES_URL\"\n  artifacts:\n    paths:\n      - \".\"\n  publish: \".\"\n  only:\n    - gh-pages\n\n\nauthor:\n  - name: Martin Laptev\n    url: https://maptv.github.io\n\n\n\n\nBy default, GitLab Pages includes a random hash in site URLs. To shorten the URL of my GitLab Pages site to &lt;maptv.gitlab.io&gt;, I had to uncheck Use unique domain under Deploy &gt; Pages in the GitLab sidebar.\nAt this point, we have completed G2 setup and you should be able to run quarto publish gh-pages from your main branch to render your site and deploy it to GitHub and/or GitLab Pages. Deploying with quarto publish at least once is a prerequisite for setting up any of the publishing methods that rely on GitHub Actions, because quarto publish creates a _publish.yml file in the root of your project that is required for publishing via GitHub Actions.\n\n\nGitHub Actions\nIn addition to the steps described above, G3 setup requires that we create a .github/workflows directory and add a YAML file to that directory. Example¬†7 contains the gh-pages.yml file I use for my own site and the shell code that can used to obtain this file.\n\nExample 7 ¬†\n\ncurlgh-pages.yml\n\n\nmkdir -p .github/workflows\ncd .github/workflows\ncurl -O https://raw.githubusercontent.com/maptv/maptv.github.io/main/.github/workflows/gh-pages.yml\n\n\non:\n  workflow_dispatch:\n  push:\n    branches: [main]\n\nname: Quarto Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v4\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n        with:\n          version: '1.4.489'\n          tinytex: true\n\n      - name: Install R\n        uses: r-lib/actions/setup-r@v2\n        with:\n          r-version: '4.2.0'\n\n      - name: Install R Dependencies\n        uses: r-lib/actions/setup-renv@v2\n        with:\n          cache-version: 1\n\n      - name: Install Python and Dependencies\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.10'\n          cache: 'pip'\n      - run: pip install jupyter\n      - run: pip install -r requirements.txt\n\n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Push To GitLab\n        env:\n          token: ${{ secrets.GITLAB_AUTH_TOKEN }}\n        run: |\n          echo Starting to push gh-pages branch to GitLab\n          git config user.name \"maptv\"\n          git config user.email \"129316885+maptv@users.noreply.github.com\"\n          git remote set-url origin \"https://oauth2:${token}@gitlab.com/maptv/maptv.gitlab.io\"\n          git push origin gh-pages\n\n\n\n\nThe gh-pages.yml file in Example¬†7 installs Quarto, the R and Python programming languages, and the packages in the renv.lock and requirements.txt files. If you do not need R and/or Python, you can remove any unnecessary portions of the file.\nTo modify the Python files that are installed by GitHub Actions, you can edit the requirements.txt file in your repo. To update your renv.lock file so that it includes all of the R packages your site requires, run renv::snapshot() in an R session or Rscript -e renv::snapshot() in a shell.\nAfter pushing the gh-pages.yml file, you can visit the Actions tab in your remote repo on GitHub to check the progress of the deployment of your site. If your site did not build successfully, you can go through the logs to try to diagnose the problem.\nI added a ‚ÄúPush to GitLab‚Äù step to my gh-pages.yml to make GitHub Actions push my remote gh-pages to GitLab so that my site is kept in sync on both GitHub and GitLab Pages. This required manually creating a token on GitLab and adding it to GitHub, which I accomplished using the GitHub CLI as shown in Example¬†8.\n\nExample 8 ¬†\ngh secret set GITLAB_AUTH_TOKEN\n\nAfter the setup described above, I now have two options for publishing my Quarto site: quarto publish and 2) git push. In addition to GitHub and GitLab Pages, both of these options automatically update my site on Netlify via N2.\nTo also automatically update my site on Quarto Pub, I created a separate GitHub Actions workflow by adding another YAML file to the .github/workflows directory in my repo. Example¬†9 shows my quarto-pub.yml file and the shell code that can be used to obtain it.\n\nExample 9 ¬†\n\ncurlquarto-pub.yml\n\n\nmkdir -p .github/workflows\ncd .github/workflows\ncurl -O https://raw.githubusercontent.com/maptv/maptv.github.io/main/.github/workflows/gh-pages.yml\n\n\non:\n  workflow_run:\n    workflows: [pages-build-deployment]\n    types: [completed]\n\nname: Update Quarto Pub\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out main repository\n        uses: actions/checkout@v4\n\n      - name: Check out _site\n        uses: actions/checkout@v4\n        with:\n          ref: gh-pages\n          path: _site\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n\n      - name: Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: quarto-pub\n          render: false\n          QUARTO_PUB_AUTH_TOKEN: ${{ secrets.QUARTO_PUB_AUTH_TOKEN }}\n          GITHUB_USERNAME: maptv\n\n\n\n\nMy quarto-pub.yml file is based on Q2, but it runs upon completion of the pages-build-deployment workflow instead of a push to main. I changed the workflow trigger so that it runs after my GitHub Pages site is built, regardless of whether I triggered the build by running quarto publish gh-pages or pushing to main.\nFigure¬†3 summarizes all of the steps that occur during my Quarto publishing workflow. This workflow allows me to publish my site on four web hosts every time I run quarto publish gh-pages (G2) or git push (G3)!\n\n\n\n\n\n\nflowchart LR\n    A[local&lt;br/&gt;main]-.G2.-&gt;B[local&lt;br/&gt;gh-pages]-.G2.-&gt;C[GitHub&lt;br/&gt;gh-pages]\n    B[local&lt;br/&gt;gh-pages]-.G2.-&gt;D[GitLab&lt;br/&gt;gh-pages]\n    A[local&lt;br/&gt;main]-.G3.-&gt;F[GitHub&lt;br/&gt;main]-.G3.-&gt;C[GitHub&lt;br/&gt;gh-pages]-.G3.-&gt;D[GitLab&lt;br/&gt;gh-pages]\n    A[local&lt;br/&gt;main]-.G3.-&gt;G[GitLab&lt;br/&gt;main]\n    C[GitHub&lt;br/&gt;gh-pages]-.N2.-&gt;E[Netlify]\n    C[GitHub&lt;br/&gt;gh-pages]-.Q2.-&gt;H[Quarto&lt;br/&gt;Pub]\n\n\n\n\nFigure¬†3: Quarto publishing workflow\n\n\n\n\n\nSo far I have only noticed one difference between the four web hosts I use for my site: GitHub Pages is the only web host that properly differentiates between internal and external links. All of the other web hosts include the external link icon on all links regardless of whether they target my site or an external site.\nI tried unsuccessfully to solve this issue by setting the link-external-filter property to a regular expression. If you notice a problem with the link-external-icon feature on other web hosts, I suggest switching to GitHub Pages.",
    "crumbs": [
      "Software",
      "Quarto Markdown"
    ]
  },
  {
    "objectID": "software/quarto/index.html#sec-cust",
    "href": "software/quarto/index.html#sec-cust",
    "title": "Quarto",
    "section": "Customizing Quarto sites",
    "text": "Customizing Quarto sites\n\nSite navigation\nOnce your site is built and published, you can make it easier to navigate with a customized navigation bar (navbar) and sidebar, as described in the Quarto documentation. Check out the _quarto.yml files for my site and the Quarto documentation site to see how the navigation components are set up.\nIn my navbar, I added toggle buttons for reader mode and dark mode. The names of the other icons on right side of the navbar are included in the sidebar.\n\n\nHTML blocks\nMy navbar also provides the current date and time in Dec ordinal (deco) format, which counts the years since 1 BC and the days since March 1. Dec is a calendar and time system that I created and use throughout my blog.\nTo add a custom timestamp to the navbar, I put a &lt;script&gt; element that runs time.js in an HTML block in every Quarto markdown (.qmd) file, as shown in Example¬†10. Mine √áetinkaya-Rundel wrote about HTML blocks as part of her A Quarto tip a day project.\n\nExample 10 ¬†\n\n*.qmdtime.js\n\n\n```{=html}\n&lt;script src=\"time.js\"&gt;&lt;/script&gt;\n```\n\n\n\n\n\n\n\nHTML blocks are useful for running JavaScript code in the context of a single page on your site without affecting the others. I also use HTML blocks to add a &lt;style&gt; element to my .qmd files as a last ditch effort to fine tune the style of my site.\nBefore I resort to the &lt;style&gt; element approach, I try writing CSS in my style.css, light.css, and dark.css files. So far, this approach has been sufficient to make any styling changes I want, but if it every fails, I can use JavaScript to override the default styling provided by Quarto by modifying style attributes, which have the highest specificity in CSS.\n\n\nPost-render script\nI wanted to my blog‚Äôs listing page to show dates in the same format as the navbar timestamp. To accomplish this, I used a post-render script written in the Python programming language.\nPre- and post-render scripts are set as project options in the _quarto.yml file in the root of your Quarto project. Example¬†11 shows the date.py post-render script and how this script is referenced in _quarto.yml.\n\nExample 11 ¬†\n\n_quarto.ymldate.py\n\n\nauthor:\n  - name: Martin Laptev\n    url: https://maptv.github.io\ndate-format: x\n\n\n# https://howardhinnant.github.io/date_algorithms.html#days_from_civil\nimport bs4\n\ndef unix2doty(ms):\n    dote = ms / 86400000 + 719468\n    cykl = (\n        dote if dote &gt;= 0\n        else dote - 146096\n    ) // 146097\n    dotc = dote - cykl * 146097\n    yotc = (dotc\n        - dotc // 1460\n        + dotc // 36524\n        - dotc // 146096\n    ) // 365\n    return [\n        int(yotc + cykl * 400),\n        dotc - (yotc * 365\n            + yotc // 4\n            - yotc // 100\n        )\n    ]\n\nwith open(\"_site/list/index.html\") as infile:\n    txt = infile.read()\n    soup = bs4.BeautifulSoup(txt, features=\"html.parser\")\nfor div in soup.find_all(\"div\", {\"class\": \"card-file-modified\"}):\n    elem = div.find(\"p\")\n    if \"+\" not in elem.text:\n        y, d = unix2doty(int(div.text))\n        elem.string.replace_with(f\"{y:&gt;04}+{d.__floor__():&gt;03}\")\nfor div in soup.find_all(\"div\", {\"class\": \"listing-reading-time\"}):\n    if \"min\" in div.text:\n        div.string.replace_with(f\"{(int(div.text.split()[0]) / 1.44).__floor__()} milliday\")\nwith open(\"_site/list/index.html\", \"w\") as outfile:\n    outfile.write(str(soup))\n\n\n\n\nNormally, formatting dates in Quarto is as easy as setting the date-format YAML property. In my case it was more difficult, because I wanted dates based on Dec, the calendar and time system I created, instead of the ubiquitous Gregorian calendar.\nTo facilitate the calculations in date.py, I set date-format to x in my _metadata.yml file so all of the dates would be in millisecond UNIX time and I would not have to deal with Gregorian calendar date formats or time zones. After all of the dates are generated, my date.py script traverses the HTML in the output directory using Beautiful Soup and converts millisecond UNIX time dates into Dec dates (year+day).\n\n\nPandoc filter\nIn addition to customizing dates on the listing page of my blog, I wanted to customize the date format in every blog post. To complete this task, I used a Lua script as a Pandoc filter.\nPandoc is a program that converts documents into practically any format. The ‚Äúpan‚Äù in Pandoc comes from the Ancient Greek word for all. Pandoc strives to convert all document formats, just like Pangea contained all the land and a panacea solves all problems.\nQuarto uses Pandoc to convert markdown files into target format(s) like html or pdf. If the source files contain executable code, Quarto executes the code via one of two computational engines: Jupyter or Knitr. Figure¬†4 shows the Quarto workflow.\n\n\n\n\n\n\nflowchart LR\n   A[qmd&lt;br/&gt;ipynb]-.Knitr&lt;br/&gt;Jupyter.-&gt;B((md))-.Pandoc with&lt;br/&gt;Lua filters.-&gt;C(html&lt;br/&gt;pdf&lt;br/&gt;docx&lt;br/&gt;etc.)\n\n\n\n\nFigure¬†4: Quarto rendering workflow\n\n\n\n\n\nMine √áetinkaya-Rundel‚Äôs Quarto tip series includes a similar Quarto workflow mermaid diagram and her ‚ÄúHello, Quarto!‚Äù rstudio::conf(2022) keynote with Julia Stewart Lowndes contains truly beautiful Quarto workflow images by Allison Horst: 1, 2, 3, and 4.\nQuarto controls Pandoc, Jupyter, and Knitr in two ways: 1) with arguments passed to the Quarto CLI commands and 2) with YAML key-value pairs in .qmd, .ipynb, or .yml files.\nExample¬†12 shows how I set up every qmd file to generate the current date in millisecond UNIX time and designated date.lua as a Pandoc filter. Unlike post-render scripts, Pandoc filters are executed during the creation of the output files.\n\nExample 12 ¬†\n\n*.qmddate.lua\n\n\ndate: now\ndate-format: x\nfilters: date.lua\n\n\n-- https://howardhinnant.github.io/date_algorithms.html#days_from_civil\nfunction unix2deco(ms)\n  local dote = ms / 86400000 + 719468\n  local cykl = (\n    dote &gt;= 0 and dote\n    or dote - 146096\n  ) // 146097\n  local dotc = dote - cykl * 146097\n  local yotc = (\n    dotc - dotc // 1460\n    + dotc // 36524\n    - dotc // 146096\n  ) // 365\n  return string.format(\n    \"%s+%s\",\n    math.floor(yotc + cykl * 400),\n    math.floor(dotc - (yotc * 365\n      + yotc // 4\n      - yotc // 100)))\nend\n\nlocal function to_decalendar(date)\n  local date = pandoc.utils.stringify(date)\n  local unix = date:match(\"(%d+)\")\n  return date:gsub(unix, unix2deco(unix))\nend\n\nfunction Meta(m)\n  m.date = to_decalendar(m.date)\n  return m\nend\n\n\n\n\nAll three of the customizations I described above convert millisecond UNIX time into a custom date format, but you can adapt these approaches to make all sorts of edits to your Quarto site. HTML blocks can run JavaScript which excels at making content dynamic and interactive, pre- and post-render scripts can be in any programming language, while Pandoc filters are written in Lua and modify output during rendering.\nComing up next on my blog is a post that Observable graphics. Get ready for an animated and interactive data visualization extravaganza!",
    "crumbs": [
      "Software",
      "Quarto Markdown"
    ]
  },
  {
    "objectID": "dec/date/index.html",
    "href": "dec/date/index.html",
    "title": "Dec Date",
    "section": "",
    "text": "My website serves as a demonstration of both the Quarto publishing system and the Dec measurement system. I use several clever hacks to get Quarto to display all of the dates on my website in the Dec year+day format. Knowing the basics of Dec dates will help you to understand the Quarto filter, render script, and include file examples in my Quarto article.\nAmong its many features, Quarto offers support for the Observable data analysis and visualization system. In the Observable calendarüóìÔ∏èplots below, Gregorian calendar months are identified by color and each day of the year has its own cell. Despite these similarities, the two plots illustrate how the Dec (top) and Gregorian (bottom) calendars differ.\nThe Dec calendar (Decalendar) starts on Day 0 instead of Day 306 and uses groups of 10 days called deks in place of weeks and days of the dek (dotd) in lieu of days of the week. When combined, a dek and dotd form a Dec day of the year (doty). The current doty is . The doty selected by the Observable rangeüéöÔ∏èinputs below and highlighted in the calendar plots is .\n\ndecPlot = Plot.plot({\n  padding: 0,\n  width: 1080,\n  height: 240,\n  className: \"calplot\",\n  marginTop: -20,\n  marginLeft: 31,\n  marginBottom: 34,\n  y: {tickSize: 0,\n      label: \"Day of the dek\",\n      domain: [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n      ticks: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n      tickPadding: -12,\n      labelOffset: 22,\n  },\n  x: {interval: 1, ticks: 18, label: \"Dek\", type: \"band\", tickSize: 0, tickPadding: 0, labelOffset: 34},\n  //fx: {tickFormat: \"\"},\n  style: { fontSize: \"21px\" },\n  color: {\n    range: d3.schemePastel1.concat(d3.schemePastel2.slice(4, 7)).concat(d3.schemeSet1[0]),\n    domain: months.concat(\"selected\"),\n    className: \"cal\",\n  },\n  marks: [\n    Plot.cell(dates, {\n      x: (d, i) =&gt; Math.floor(i / 10),\n      y: (d, i) =&gt; i % 10,\n      //fx: d =&gt; d.getUTCFullYear(),\n      fill: d =&gt; Math.floor(unix2doty(d.getTime())) === dotyInput ? \"selected\" : months[d.getUTCMonth()],\n      stroke: d =&gt; Math.floor(unix2doty(d.getTime())) === dotyInput ? \"darkorange\" : \"none\",\n      strokeWidth: 3,\n      inset: 0.75,\n    }),\n    Plot.text(dates, {\n      x: (d, i) =&gt; Math.floor(i / 10),\n      y: (d, i) =&gt; i % 10,\n      //fx: d =&gt; d.getUTCFullYear(),\n      fill: d =&gt; Math.floor(unix2doty(d.getTime())) === dotyInput ? \"white\" : \"black\",\n      //stroke: \"white\",\n      text: (d, i) =&gt; String(i),//.padStart(3, \"0\").slice(1),\n      monospace: true,\n      fontSize: \"13px\"})\n  ]\n})\n\n\n\n\n\n\n\ndates = d3.utcDays(new Date(1999, 2, 0), new Date(2000, 1, 28 + leapInput));\n\n\n\n\n\n\n\nviewof dotyInput = Inputs.range([0, 364 + leapInput], {value: 306, step: 1, label: \"Day of the year\"});\nviewof monthInput = transformInput(\n  Inputs.range([1, 12], {step: 1, label: \"Month\"}),\n  {bind: viewof dotyInput, transform: doty2month, invert: month2doty}\n);\nviewof dotyInput1 = transformInput(\n  Inputs.range([-365 - leapInput, -1], {step: 1, label: \"Day of the year\"}),\n  {bind: viewof dotyInput, transform: subN, invert: addN}\n);\nviewof dotmInput = transformInput(\n  Inputs.range([1, 31], {step: 1, label: \"Day of the month\"}),\n  {bind: viewof dotyInput, transform: doty2dotm, invert: (x =&gt; Math.floor(( 153 * (\n    viewof monthInput.value &gt; 2\n    ? viewof monthInput.value - 3\n    : viewof monthInput.value + 9) + 2\n  ) / 5 + x - 1\n))});\nviewof leapscrub = Inputs.form([\n  Scrubber(numbers, {autoplay: false, alternate: true, delay: 86.4, loopDelay: 864, format: y =&gt; \"\", inputStyle: \"display:none;\"}),\n  Inputs.toggle({label: \"Leap year\", value: false}),\n])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFirst day of the Gregorian calendar year\n\nviewof dotwInput = Inputs.radio([\n  \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\",\n  ], {value: \"Sunday\"})\n\n\n\n\n\n\n\ncalPlot = Plot.plot({\n  padding: 0,\n  width: 1000,\n  height: 200,\n  className: \"calplot\",\n  marginBottom: 36,\n  marginLeft: 42,\n  y: {tickFormat: Plot.formatWeekday(\"en\", \"short\"), tickSize: 0,\n      domain: [-1, 0, 1, 2, 3, 4, 5, 6],\n      ticks: [0, 1, 2, 3, 4, 5, 6],\n      tickPadding: 2,\n  },\n  x: {interval: 1, ticks: 26, label: \"Week\", type: \"band\", tickSize: 0, tickPadding: 2, labelOffset: 34},\n  //fx: {tickFormat: \"\"},\n  style: { fontSize: \"20px\" },\n  color: {\n    range: d3.schemePastel1.concat(d3.schemePastel2.slice(4, 7)).concat(d3.schemeSet1[0]),\n    domain: months.concat(\"selected\"),\n    className: \"cal\",\n  },\n  marks: [\n    Plot.cell(datesCal, {\n      x: d =&gt; d3.utcWeek.count(d3.utcYear(d), d),\n      y: d =&gt; d.getUTCDay(),\n      //fx: d =&gt; d.getUTCFullYear(),\n      fill: d =&gt; Math.floor(unix2doty(d.getTime())) === dotyInput ? \"selected\" : months[d.getUTCMonth()],\n      stroke: d =&gt; Math.floor(unix2doty(d.getTime())) === dotyInput ? \"darkorange\" : \"none\",\n      strokeWidth: 3,\n      inset: .35,\n    }),\n    Plot.text(datesCal, {\n      x: d =&gt; d3.utcWeek.count(d3.utcYear(d), d),\n      y: d =&gt; d.getUTCDay(),\n      //fx: d =&gt; d.getUTCFullYear(),\n      text: d =&gt; d.getUTCDate() === 7 ? months[d.getUTCMonth()].slice(0, 3) : \"\",\n      y: -1,\n      frameAnchor: \"left\",\n      dy: -4,\n      monospace: true,\n      fontSize: \"22px\"}),\n    Plot.text(datesCal, {\n      x: d =&gt; d3.utcWeek.count(d3.utcYear(d), d),\n      y: d =&gt; d.getUTCDay(),\n      //fx: d =&gt; d.getUTCFullYear(),\n      fill: d =&gt; Math.floor(unix2doty(d.getTime())) === dotyInput ? \"white\" : \"black\",\n      //stroke: \"white\",\n      text: d =&gt; d.getUTCDate(), //Math.floor(unix2doty(d.getTime())).toString().padStart(3, \"0\"),\n      monospace: true,\n      fontSize: \"13px\"})\n  ]\n})\n\n\n\n\n\n\nThe Play‚ñ∂Ô∏èbutton in between the plots above cyclesüîÑthrough every doty, month, and day of the month value so that each day gets its turn to have a redüü•background. The toggle‚úÖinput next to the button determines whether the plots show a leap (\\(\\colorbox{orange}{n}{=}366\\)) or a common (\\(\\colorbox{orange}{n}{=}365\\)) year. The radioüîòinput beneath the toggle input sets the day of the week on Day 306.\nThe Gregorian calendar changes every year to adapt to the days of the week. In contrast, Decalendar remains the same every year except leaps years. The addition of Day 365 to leap years shifts 306 Gregorian calendar dates forward by one day, but does not affect the order of Decalendar dates, because Day 365 is the last day of Decalendar leap years.\nEven though Dec does not use weeks, Dec dates can be modified to include POSIX weekday numbers. The current Dec date, , can be turned into the current day of the week (dotw) date, |y|+d-w+w, by isolating the current POSIX weekday number, , from the current doty. To convert a Dec dotw date into a normal Dec date, we solve for the doty: d-w+w=d.\nDec dotw dates can be further modified to include POSIX week numbers. To find the current Dec week number, , we add the POSIX weekday number of Day 0, , to the current doty and divide by 7. To convert the current Dec week date, , into a normal Dec date, we subtract the POSIX weekday number of Day 0: 7*U+w-w=d.\nFollowing the pattern for the Dec week dates, we can adapt Dec dates to use 20-day dudeks, 30-day trideks, 40-day kvardeks, 73-day sepdektris, or any other silly calendar unit you can imagine. No other calendar unit will be as convenient as 10-day deks, because our decimal numeral system allows us to naturally combine a dek and a day of the dek into a single number.\nDec can also be modified to display Dec month numbers and day of the month (dotm) numbers. The current Dec month date, |y|+d-m+m, is pronounced Year ‚Ä¶ Day ‚Ä¶ Plus ‚Ä¶. We use the doty of the last day of the previous month to represent the current month so we can use a POSIX dotm number. Of course, we can also use the doty of the first day of the current month and the current zero-based dotm: |y|+d-m+m. To convert a Dec month date into a normal Dec date, we solve for the doty: d-m+m=d.\nAlso, the Gregorian calendar varies greatly depending on the days of the week. In total, there are 14 different Gregorian calendar variants that repeat in a 400-year cycle.\nThe year+day format is based on the Dec date equation: \\(\\lfloor\\colorbox{yellow}{y}\\rfloor{+}\\colorbox{cyan}{d}{\\div}\\colorbox{orange}{n}{=}\\colorbox{yellow}{y}\\), where \\(\\lfloor\\colorbox{yellow}{y}\\rfloor{+}\\colorbox{cyan}{d}\\) is the Dec date, \\(\\lfloor\\colorbox{yellow}{y}\\rfloor\\) is the year obtained by flooring \\(\\colorbox{yellow}{y}\\), the decimal years that have passed since the Dec epoch (Year 0 Day 0 Dot 0), \\(\\colorbox{cyan}{d}\\) is the zero-based day of the year, and \\(\\colorbox{orange}{n}\\) is the number of days in \\(\\lfloor\\colorbox{yellow}{y}\\rfloor\\). The Dec date equation for today is .\nDec dates only include the first two terms from the left-hand side of the Dec date equation: \\(\\lfloor\\colorbox{yellow}{y}\\rfloor\\) and \\(\\colorbox{cyan}{d}\\). The right-hand side of the equation, \\(\\colorbox{yellow}{y}\\), can also be used as a date. We need \\(\\colorbox{orange}{n}\\) to calculate \\(\\colorbox{yellow}{y}\\) via the Dec date equation above and to obtain \\(\\colorbox{cyan}{d}\\) using the Dec day of the year equation: \\(\\colorbox{cyan}{d}{=}\\colorbox{yellow}{y}\\vcenter{\\text{\\%}}1{\\times}\\colorbox{orange}{n}\\). In simple terms, \\(\\colorbox{cyan}{d}\\) is the decimal part of \\(\\colorbox{yellow}{y}\\) multiplied by \\(\\colorbox{orange}{n}\\).\nTo find \\(\\colorbox{orange}{n}\\), we plug \\(\\lfloor\\colorbox{yellow}{y}\\rfloor\\) into the Dec year length equation below, where \\(\\vcenter{\\text\\%}\\) is the modulo operator, \\(\\land\\) is the logical conjunction operator (and), and \\(\\lor\\) is the logical disjunction operator (or). According to this equation, \\(\\colorbox{orange}{n}\\) is 366 if the subsequent year (Year \\(\\lfloor\\colorbox{yellow}{y}\\rfloor{+}1\\)) is a Gregorian calendar leap year and 365 if Year \\(\\lfloor\\colorbox{yellow}{y}\\rfloor{+}1\\) is a Gregorian calendar common year.\n\\[\\colorbox{orange}{n}=\\begin{cases}\n  366&{\\begin{align}\\text{if } (\\lfloor \\colorbox{yellow}{y}\\rfloor+1)\\vcenter{\\text{ \\% }}4=0\\\\\n  \\land(\\lfloor \\colorbox{yellow}{y}\\rfloor+1)\\vcenter{\\text{ \\% }}100\\neq0\\\\\n  \\lor(\\lfloor \\colorbox{yellow}{y}\\rfloor+1)\\vcenter{\\text{ \\% }}400=0\\end{align}}\\\\\\\\\n  365&{\\text{otherwise.}}\\end{cases}\\]\nIn addition to calculating \\(\\colorbox{yellow}{y}\\), \\(\\colorbox{orange}{n}\\) is needed to convert between year+day and year-day Dec dates. The year-day version of the Dec date equation is \\(\\lfloor\\colorbox{yellow}{y}\\rfloor{+}1{-}(\\colorbox{cyan}{d}{-}\\colorbox{orange}{n}){\\div}\\colorbox{orange}{n}{=}\\colorbox{yellow}{y}\\). In essence, \\(\\colorbox{cyan}{d}{-}\\colorbox{orange}{n}\\) is a ‚ÄúT-minus‚Äù countdown of the days until the start of Year \\(\\lfloor\\colorbox{yellow}{y}\\rfloor{+}1\\). The current year-day date, , tells us that Year  will begin in  days.\nThe difference between \\(\\colorbox{cyan}{d}\\) and \\(\\colorbox{cyan}{d}{-}\\colorbox{orange}{n}\\) can also be explained in terms of computer programming. If we think of years as arrays, \\(\\colorbox{cyan}{d}\\) and \\(\\colorbox{cyan}{d}{-}\\colorbox{orange}{n}\\) are like array indexes that can be used to identify array elements or combine them via slicing. In this analogy, \\(\\colorbox{cyan}{d}\\) is a positive index with a range of \\(0\\) to \\(\\colorbox{orange}{n}{-}1\\) and \\(\\colorbox{cyan}{d}{-}\\colorbox{orange}{n}\\) is a negative index that ranges from \\({-}\\colorbox{orange}{n}\\) to \\({-}1\\).\nWe can express the bounds for \\(\\colorbox{cyan}{d}\\) values with the interval \\(\\left [0,\\colorbox{orange}{n} \\right )\\), the inequality \\(0{\\le}\\colorbox{cyan}{d}{\\lt} \\colorbox{orange}{n}\\), or the Dec range \\(0{=}\\). Similarly, the analogous interval, inequality, and Dec range for \\(\\colorbox{cyan}{d}{-}\\colorbox{orange}{n}\\) are \\([{-}\\colorbox{orange}{n},0)\\), \\({-}\\colorbox{orange}{n}{\\le}\\colorbox{cyan}{d}{-}\\colorbox{orange}{n}{\\lt}0\\), and \\({-}\\colorbox{orange}{n}{=}\\), respectively.\nEven though it only uses years and days, Dec can display dates based on months or weeks by modifying \\(\\colorbox{cyan}{d}\\). The equation for Dec week dates is \\(\\lfloor\\colorbox{yellow}{y}\\rfloor{+}7{\\times}\\colorbox{pink}{U}{+}\\text{\\textcolor{blue}{w}}{-}\\text{\\textcolor{blue}{w}}_\n\\text{\\textcolor{blue}{d=0}}{=}\\colorbox{yellow}{y}\\), where \\(\\colorbox{pink}{U}\\) is the week number, \\(\\text{\\textcolor{blue}{w}}\\) is the day of the week number, and \\(\\text{\\textcolor{blue}{w}}_\\text{\\textcolor{blue}{d=0}}\\) is \\(\\text{\\textcolor{blue}{w}}\\) on the first day of the year (\\(\\colorbox{cyan}{d}{=}0\\)). The Dec week date equation for today is .\nWe can truncate the Dec week date equation to remove \\(\\text{\\textcolor{blue}{w}}_\\text{\\textcolor{blue}{d=0}}\\), which can be determined from \\(\\lfloor\\colorbox{yellow}{y}\\rfloor\\) and is not needed to identify a date. The truncated Dec week date equation for today is .\nIf we ever need to convert between a doty and a Gregorian calendar month and day of the month without any conversion tools, we can use the Dec finger mnemonic, which is similar to the knuckle mnemonic. The numbers above the fingers in the image below indicate the doty of the last day of each Gregorian calendar month. The thumb, middle finger, and pinky represent months with 31 days, whereas the index and ring fingers stand for 30-day months.\n\n\n\nDec finger mnemonic\n\n\nThe southward equinox falls on Day 205 in Year 2024, 2025, 2028, and 2029. We can determine that Day 205 is September 22 by subtracting the Dec date of the last day of August (Day 183), the month preceding September, from the southward equinox doty: \\(205{-}183{=}22\\). To convert in the other direction, we would sum the doty and the day of the month: \\(183{+}22{=}205\\).\nThe finger mnemonic highlights a major difference between Dec and the Gregorian calendar: the Dec year starts on Day 0 just like the Roman calendar, the predecessor of the Gregorian and Julian calendars. For this reason, the Latin numeral prefixes in the names of the months of September, October, November, and December match their one-based indexes (7, 8, 9, and 10) in Dec and the Roman calendar, but not in the Julian or Gregorian calendars.\nThe knuckle and finger mnemonics attempt to make sense of the irregular pattern of month lengths in the Gregorian calendar. Rather than replace variable-length months with fixed-length months, Dec forgoes the use of months entirely and instead uses groups of ten days called deks.\n\nunix = {\n  while(true) {\n    yield Date.now();\n  }\n}\n// http://howardhinnant.github.io/date_algorithms.html#civil_from_days\nfunction unix2dote(unix, zone) {\n  return [\n    (unix ?? Date.now()) / 86400000\n    + (zone = zone ?? (\n      10 - Math.round((new Date)\n        .getTimezoneOffset() / 144)\n    ) % 10) / 10 + 719468, zone]}\nfunction dote2doty(dote, zone = 0) {\n  const socy = Math.floor((\n      dote &gt;= 0 ? dote\n      : dote - 146096\n    ) / 146097),\n  dotc = dote - socy * 146097,\n  yotc = Math.floor((dotc\n    - Math.floor(dotc / 1460)\n    + Math.floor(dotc / 36524)\n    - Math.floor(dotc / 146096)\n  ) / 365);\n  return [\n    yotc + socy * 400,\n    dotc - (yotc * 365\n      + Math.floor(yotc / 4)\n      - Math.floor(yotc / 100)\n  ), zone]}\nfunction doty2deco0(year = 1969, doty = 306, zone = 0) {\n  return `${year.toString().padStart(4, \"0\")}+${Math.floor(doty).toString().padStart(3, \"0\")}${String(doty % 1 * 10).slice(0, 6)}-${zone}`\n}\nydz = dote2doty(...unix2dote(unix))\ndeco = doty2deco0(...ydz)\n// https://observablehq.com/@observablehq/text-color-annotations-in-markdown#textcolor\nfunction setStyle(content, style = {}) {\n  function yiq(color) {\n    const {r, g, b} = d3.rgb(color);\n    return (r * 299 + g * 587 + b * 114) / 1000 / 255; // returns values between 0 and 1\n  }\n  const {\n    background,\n    color = yiq(background) &gt;= 0.6 ? \"#111\" : \"white\",\n    padding = \"0 1px\",\n    borderRadius = \"4px\",\n    fontWeight = 900,\n    fontSize = \"1em\",\n    ...rest\n  } = typeof style === \"string\" ? {background: style} : style;\n  return htl.html`&lt;span style=${{\n    background,\n    color,\n    padding,\n    borderRadius,\n    fontWeight,\n    ...rest\n  }}&gt;${content}&lt;/span&gt;`;\n}\nfunction year2leap(year = 1970) {\n    return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;\n}\ndecoYear = deco.slice(0, 4)\nnextYear = parseInt(decoYear) + 1\ndecoDoty = deco.slice(5, 8)\nnDaysInYear = 365 + year2leap(ydz[0] + 1)\nTminus = nDaysInYear - decoDoty\nfracYear = (ydz[0] + (ydz[1] - ydz[2]) / nDaysInYear).toFixed(3)\nstyledDecoYear = setStyle(decoYear, d3.schemePaired[10])\nstyledNextYear = setStyle(nextYear, d3.schemePaired[10])\nstyledFracYear = setStyle(fracYear, d3.schemePaired[10])\nstyledDecoDoty = setStyle(decoDoty, d3.color(\"cyan\").formatHex())\nstyledDecoDoty1 = setStyle(decoDoty, d3.color(\"cyan\").formatHex())\nstyledDotyInput = setStyle(dotyInput, d3.color(\"cyan\").formatHex())\nstyledDecoTminus = setStyle(Tminus, d3.color(\"pink\").formatHex())\nstyledDecoDek = setStyle(decoDoty.slice(0, 2), d3.color(\"cyan\").formatHex())\nstyledDecoDotd = setStyle(decoDoty[2], d3.color(\"cyan\").formatHex())\nstyledNdays = setStyle(nDaysInYear, d3.schemePaired[6])\nstyledNdays1 = setStyle(nDaysInYear, d3.schemePaired[6])\n// https://observablehq.com/@juang1744/transform-input/1\ntransformInput = function(target, {bind: source, transform = identity, involutory = false, invert = involutory ? transform : inverse(transform)} = {}){\n  if (source === undefined) {\n    source = target;\n    target = html`&lt;div&gt;${source}&lt;/div&gt;`;\n  }\n  function sourceInputHandler() {\n    target.removeEventListener(\"input\", targetInputHandler);\n    setTransform(target).to(transform(source.value)).andDispatchEvent();\n    target.addEventListener(\"input\", targetInputHandler);\n  }\n  function targetInputHandler() {\n    source.removeEventListener(\"input\", sourceInputHandler);\n    setTransform(source).to(invert(target.value)).andDispatchEvent();\n    source.addEventListener(\"input\", sourceInputHandler);\n  }\n  source.addEventListener(\"input\", sourceInputHandler);\n  target.addEventListener(\"input\", targetInputHandler);\n  invalidation.then(() =&gt; {\n    source.removeEventListener(\"input\", sourceInputHandler);\n    target.removeEventListener(\"input\", targetInputHandler);\n  });\n  sourceInputHandler();\n  return target;\n}\nsetTransform = (input) =&gt; ({to: (value) =&gt; (input.value = value, {andDispatchEvent: (event = new Event(\"input\")) =&gt; input.dispatchEvent(event)})});\nfunction inverse(f) {\n  switch (f) {\n    case identity:  return identity;\n    case Math.sqrt: return square;\n    case Math.log:  return Math.exp;\n    case Math.exp:  return Math.log;\n    default:        return (x =&gt; solve(f, x, x));\n  }\n  function solve(f, y, x = 0) {\n    const dx = 1e-6;\n    let steps = 100, deltax, fx, dfx;\n    do {\n      fx = f(x)\n      dfx = (f(x + dx) - fx) || dx;\n      deltax = dx * (fx - y)/dfx\n      x -= deltax;\n    } while (Math.abs(deltax) &gt; dx && --steps &gt; 0);\n    return steps === 0 ? NaN : x;\n  }\nfunction square(x) {\n    return x * x;\n  }\n}\nfunction identity(x) {\n  return x;\n}\nfunction doty2month(doty = 0) {\n    const m = Math.floor((5 * doty + 2) / 153);\n    return Math.floor(m &lt; 10 ? m + 3 : m - 9);\n}\nfunction month2doty(month = 1) {\n    return Math.floor(\n        (153 * (month &gt; 2 ? month - 3 : month + 9) + 2) / 5\n)}\nfunction doty2dotm(doty = 0) {\n    const m = Math.floor((5 * doty + 2) / 153);\n    return doty - Math.floor((153 * m + 2) / 5) + 1;\n}\nnumbers = Array.from({length: 366}, (_, i) =&gt; i)\nset(viewof dotyInput, leapscrub[0])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction set(input, value) {\n  input.value = value;\n  input.dispatchEvent(new Event(\"input\", {bubbles: true}));\n}\n// https://observablehq.com/@mbostock/scrubber\nfunction Scrubber(values, {\n  format = value =&gt; value,\n  initial = 0,\n  direction = 1,\n  delay = null,\n  autoplay = true,\n  loop = true,\n  loopDelay = null,\n  alternate = false,\n  inputStyle = \"\"\n} = {}) {\n  values = Array.from(values);\n  const form = html`&lt;form style=\"font: 18px var(--monospace); font-variant-numeric: tabular-nums; display: flex; height: 33px; align-items: center;\"&gt;\n  &lt;button name=b type=button style=\"margin-right: 0.4em; width: 5em;\"&gt;&lt;/button&gt;\n  &lt;label style=\"display: flex; align-items: center;\"&gt;\n    &lt;input name=i type=range min=0 max=${values.length - 1} value=${initial} step=1 style=${inputStyle}&gt;\n    &lt;output name=o style=\"margin-left: 0.4em;\"&gt;&lt;/output&gt;\n  &lt;/label&gt;\n&lt;/form&gt;`;\n  let frame = null;\n  let timer = null;\n  let interval = null;\n  function start() {\n    form.b.textContent = \"Stop\";\n    if (delay === null) frame = requestAnimationFrame(tick);\n    else interval = setInterval(tick, delay);\n  }\n  function stop() {\n    form.b.textContent = \"Play\";\n    if (frame !== null) cancelAnimationFrame(frame), frame = null;\n    if (timer !== null) clearTimeout(timer), timer = null;\n    if (interval !== null) clearInterval(interval), interval = null;\n  }\n  function running() {\n    return frame !== null || timer !== null || interval !== null;\n  }\n  function tick() {\n    if (form.i.valueAsNumber === (direction &gt; 0 ? values.length - 1 : direction &lt; 0 ? 0 : NaN)) {\n      if (!loop) return stop();\n      if (alternate) direction = -direction;\n      if (loopDelay !== null) {\n        if (frame !== null) cancelAnimationFrame(frame), frame = null;\n        if (interval !== null) clearInterval(interval), interval = null;\n        timer = setTimeout(() =&gt; (step(), start()), loopDelay);\n        return;\n      }\n    }\n    if (delay === null) frame = requestAnimationFrame(tick);\n    step();\n  }\n  function step() {\n    form.i.valueAsNumber = (form.i.valueAsNumber + direction + values.length) % values.length;\n    form.i.dispatchEvent(new CustomEvent(\"input\", {bubbles: true}));\n  }\n  form.i.oninput = event =&gt; {\n    if (event && event.isTrusted && running()) stop();\n    form.value = values[form.i.valueAsNumber];\n    form.o.value = format(form.value, form.i.valueAsNumber, values);\n  };\n  form.b.onclick = () =&gt; {\n    if (running()) return stop();\n    direction = alternate && form.i.valueAsNumber === values.length - 1 ? -1 : 1;\n    form.i.valueAsNumber = (form.i.valueAsNumber + direction) % values.length;\n    form.i.dispatchEvent(new CustomEvent(\"input\", {bubbles: true}));\n    start();\n  };\n  form.i.oninput();\n  if (autoplay) start();\n  else stop();\n  Inputs.disposal(form).then(stop);\n  return form;\n}\ncalYear = !leapInput && dotwInput == \"Monday\" ? 6 : !leapInput && dotwInput == \"Tuesday\" ? 7 : !leapInput && dotwInput == \"Wednesday\" ? 2 : !leapInput && dotwInput == \"Thursday\" ? 3 : !leapInput && dotwInput == \"Friday\" ? 9 : !leapInput && dotwInput == \"Saturday\" ? 10 : !leapInput && dotwInput == \"Sunday\" ? 11 : leapInput && dotwInput == \"Monday\" ? 12 : leapInput && dotwInput == \"Tuesday\" ? 24 : leapInput && dotwInput == \"Wednesday\" ? 8 : leapInput && dotwInput == \"Thursday\" ? 20 : leapInput && dotwInput == \"Friday\" ? 4 : leapInput && dotwInput == \"Saturday\" ? 16 : leapInput && dotwInput == \"Sunday\" ? 28 : 0;\ndatesCal = d3.utcDays(new Date(calYear, 0, 0), new Date(calYear, 12, 0));\nmonths = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nfunction unix2doty(unix) {\n  const dote = (\n    unix ?? Date.now()\n  ) / 86400000 + 719468,\n    socy = Math.floor((\n      dote &gt;= 0 ? dote\n      : dote - 146096\n    ) / 146097),\n  dotc = dote - socy * 146097,\n  yotc = Math.floor((dotc\n    - Math.floor(dotc / 1460)\n    + Math.floor(dotc / 36524)\n    - Math.floor(dotc / 146096)\n  ) / 365);\n  return dotc - (yotc * 365\n      + Math.floor(yotc / 4)\n      - Math.floor(yotc / 100)\n  )}\n\nfunction doty2dote(year = 1969, doty = 0, zone = 0) {\n    const cycle = Math.floor((year &gt;= 0 ? year : year - 399) / 400),\n    yote = year - cycle * 400;\n    return cycle * 146097 + yote * 365 + Math.floor(yote / 4) - Math.floor(yote / 100) + doty - zone\n}\nfunction doty2deco(yearDoty = [1969, 306], zone = 0) {\n    const yd = dote2doty(doty2dote(yearDoty[0], Math.floor(yearDoty[1])));\n    return `${yd[0].toString().padStart(4, \"0\")}+${yd[1].toString().padStart(3, \"0\")}${\n        yearDoty[1].toString().includes(\".\") ? \".\" + (\n            (yearDoty[1] &gt; 0) ? (yearDoty[1] - zone).toString().split(\".\").pop()\n            : [...(yearDoty[1] - zone).toString().split(\".\").pop()].map(\n                (e, i, a) =&gt; (i + 1 === a.length) ? 10 - e : 9 - e\n            ).join(\"\")\n        ) : \"\"\n    }`\n}\nfunction deco2doty(timestamp = \"1969+306.00000Z\") {\n    const arr = timestamp.toString().split(/(?=[+-]|[a-zA-Z])/, 3);\n    switch (arr.length) {\n        case 1: return [unix2doty(Date.now())[0], parseFloat(arr[0]), 0];\n        case 2: return (/^[a-zA-Z]+$/.test(arr[1]))\n            ? [unix2doty(Date.now())[0], parseFloat(arr[0]), zone2hour(arr[1]) / 24]\n            : [parseFloat(arr[0]), parseFloat(arr[1]), 0];\n    };\n    return [parseFloat(arr[0]), parseFloat(arr[1]), /^[a-zA-Z]+$/.test(arr[2])\n        ? zone2hour(arr[2]) / 24\n        : parseFloat(arr[2].replace(/([+-])/, \"$1\\.\"))];\n}\nfunction zone2hour(zone = \"Z\") {\n    return (zone = zone.toUpperCase()) == \"Z\" ? 0\n        : zone &gt; \"@\" && zone &lt; \"J\" ? zone.charCodeAt() - 64\n        : zone &gt; \"J\" && zone &lt; \"N\" ? zone.charCodeAt() - 65\n        : zone &lt; \"Z\" && zone &gt; \"M\" ? -(zone.charCodeAt() - 77)\n        : zone;\n}\nfunction doty2unix(year = 1969, doty = 306, zone = 0) {\n    return (doty2dote(year, doty, zone) - 719468) * 86400000;\n}\nfunction doty2isoc(yd) {\n    return new Date(doty2unix(...yd))\n}\nfunction doty2greg(doty = 306) {\n    const m = Math.floor((5 * doty + 2) / 153);\n    return [\n      Math.floor(m &lt; 10 ? m + 3 : m - 9),\n      Math.floor(doty - (153 * m + 2) / 5 + 2)\n    ];\n}\nfunction greg2doty(month = 1, day = 1) {\n    return Math.floor(\n        (153 * (month &gt; 2 ? month - 3 : month + 9) + 2) / 5 + day - 1\n)}\nfunction greg2year(year = 1970, month = 1) { return year - (month &lt; 3) }\nfunction isoc2doty(isoc) {\n  return [greg2year(isoc.getFullYear(), isoc.getUTCMonth() + 1), greg2doty(isoc.getUTCMonth() + 1, isoc.getUTCDate())];\n}\nleapInput = leapscrub[1]\nfunction addN(d) { return d + 365 + leapInput }\nfunction subN(d) { return d - 365 - leapInput }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Back to topCitationBibTeX citation:@online{laptev2024,\n  author = {Laptev, Martin},\n  title = {Dec {Date}},\n  date = {2024},\n  urldate = {2024},\n  url = {https://maptv.github.io/dec/date},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nLaptev, Martin. 2024. ‚ÄúDec Date.‚Äù 2024. https://maptv.github.io/dec/date.",
    "crumbs": [
      "Measurement",
      "Dec Date"
    ]
  },
  {
    "objectID": "ml/prob/index.html",
    "href": "ml/prob/index.html",
    "title": "Probability",
    "section": "",
    "text": "In this blog post I will discuss a few examples of probability in machine learning. If you are new to probability, I recommend one of great textbooks that cover the topic and are available for free online, such as Think Bayes by Allen Downey and Bayes Rules! by Alicia A. Johnson, Miles Q. Ott, and Mine Dogucu.\nClassification algorithms algorithms can estimate \\(n \\times k\\) class membership probabilities for each dataset, where n is the number of data points in the dataset and k is the number of classes in the training dataset. Similarly, the Gaussian Mixtures clustering algorithm can generate \\(n \\times k\\) cluster label probabilities.\nBesides a data point and the Gaussian Mixtures models can estimate cluster membership probability. point , especially Logistic Regression and Naive Bayes. Every classification algorithm can estimate probabilities of belonging to each class.\n\\(\\Huge P(A\\vert B)={\\frac {P(B\\vert A)P(A)}{P(B)}}\\)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nfrom sklearn.decomposition import PCA\nfrom sklearn.impute import KNNImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import ConfusionMatrixDisplay\nfrom sklearn.model_selection import train_test_split\ndf = sns.load_dataset(\"penguins\")\ndf.head()\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nMale\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nFemale\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nFemale\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nFemale\ny = df[\"species\"]\nX = df.drop(\"species\", axis=1)\nX = pd.get_dummies(X, columns=[\"island\", \"sex\"])\nknni = KNNImputer()\ncolnames = X.columns\nX = knni.fit_transform(X)\nX = pd.DataFrame(X, columns=colnames)\n# https://blog.4dcu.be/programming/2021/03/19/Code-Nugget-PCA-with-loadings.html\npipeline = Pipeline([\n    (\"scaler\", StandardScaler()),\n    (\"pca\", PCA(n_components=2)),\n])\n\npca_data = pd.DataFrame(\n    pipeline.fit_transform(X),\n    columns=[\"PC1\", \"PC2\"],\n    index=df.index,\n)\npca_data[\"species\"] = df[\"species\"]\n\npca_step = pipeline.steps[1][1]\nloadings = pd.DataFrame(\n    pca_step.components_.T,\n    columns=[\"PC1\", \"PC2\"],\n    index=X.columns,\n)\n\ndef loading_plot(\n    coeff, labels, scale=1, text_x=None, text_y=None, colors=None, visible=None, ax=plt, arrow_size=0.5\n):\n    for i, label in enumerate(labels):\n        if visible is None or visible[i]:\n            ax.arrow(\n                0,\n                0,\n                coeff[i, 0] * scale,\n                coeff[i, 1] * scale,\n                head_width=arrow_size * scale,\n                head_length=arrow_size * scale,\n                color=\"#000\" if colors is None else colors[i],\n            )\n            ax.text(\n                text_x[i] if text_x.all() else coeff[i, 0] * 1.2 * scale,\n                text_y[i] if text_y.all() else coeff[i, 1] * 1.2 * scale,\n                label,\n                color=\"#000\" if colors is None else colors[i],\n                ha=\"center\",\n                va=\"center\",\n            )\n\nloadings = loadings * 3.2\n\ntext_x = loadings[\"PC1\"] * 2.4\ntext_y = loadings[\"PC2\"] * 2.4\n\ntext_y[\"sex_Male\"] -= .5\ntext_y[\"bill_depth_mm\"] -= .4\ntext_x[\"bill_depth_mm\"] -= .4\ntext_y[\"sex_Female\"] += .5\ntext_y[\"island_Torgersen\"] += .1\ntext_x[\"island_Dream\"] -= .5\ntext_y[\"island_Dream\"] -= .3\ntext_y[\"island_Biscoe\"] += .3\ntext_x[\"island_Biscoe\"] += .3\ntext_x[\"flipper_length_mm\"] += .55\ntext_x[\"body_mass_g\"] += .95\ntext_y[\"body_mass_g\"] -= .05\n\n# https://seaborn.pydata.org/generated/seaborn.jointplot.html\ng = sns.jointplot(data=pca_data, x=\"PC1\", y=\"PC2\", hue=\"species\", ratio=4, marginal_ticks=True, height=8)\ng.plot_joint(sns.kdeplot, zorder=0, levels=6)\ng.plot_marginals(sns.rugplot, height=-.025, clip_on=False)\n# Add loadings\nloading_plot(loadings[[\"PC1\", \"PC2\"]].values, loadings.index, text_x=text_x, text_y=text_y, scale=2, arrow_size=0.02)\n\n# Add variance explained by the\nplt.xlabel(f\"PC1 ({pca_step.explained_variance_ratio_[0]*100:.2f} %)\")\nplt.ylabel(f\"PC2 ({pca_step.explained_variance_ratio_[1]*100:.2f} %)\")\n\nplt.tight_layout()\nplt.savefig(\"PCA_with_loadings.png\", dpi=300)\nplt.show()\n\n/var/folders/mn/wpqfzxsn0z10p73_8jr0v2180000gn/T/ipykernel_7153/3221505183.py:36: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n  text_x[i] if text_x.all() else coeff[i, 0] * 1.2 * scale,\n/var/folders/mn/wpqfzxsn0z10p73_8jr0v2180000gn/T/ipykernel_7153/3221505183.py:37: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n  text_y[i] if text_y.all() else coeff[i, 1] * 1.2 * scale,\nsns.displot(df, x=\"bill_length_mm\", kde=True, hue=\"species\", stat=\"count\");\nsns.displot(df, x=\"bill_length_mm\", kde=True, hue=\"species\", stat=\"density\");\nplt.show()\nsns.displot(df, x=\"bill_length_mm\", kde=True, rug=True, hue=\"species\", stat=\"proportion\");\nplt.show()\nfig, axes = plt.subplots(1, 2, sharey=True)\nfig.suptitle('PDF and CDF comparision')\nsns.histplot(df[[\"bill_length_mm\", \"flipper_length_mm\"]], kde=True, ax=axes[0]);\nsns.ecdfplot(df[[\"bill_length_mm\", \"flipper_length_mm\"]], stat=\"count\", ax=axes[1], legend=False)\nplt.ylim((0, 375));\nplt.show()\nimport pathlib\nlr = LogisticRegression(max_iter=10000)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\nlr.fit(X_train, y_train)\ncmd = ConfusionMatrixDisplay.from_estimator(lr, X_test, y_test)\nplt.show()",
    "crumbs": [
      "Machine Learning",
      "Probablity"
    ]
  },
  {
    "objectID": "ml/prob/index.html#step-1.-write-out-the-linear-regression-equation",
    "href": "ml/prob/index.html#step-1.-write-out-the-linear-regression-equation",
    "title": "Probability",
    "section": "Step 1. Write out the linear regression equation",
    "text": "Step 1. Write out the linear regression equation\n\\(\\Huge y=\\beta_0+\\beta_1 x_1+...+\\beta_n x_n\\) ## Step 2. The logistic regression equation is the same as above except output is log odds \\(\\Huge log(odds)=\\beta_0+\\beta_1 x_1+...+\\beta_n x_n\\) ## Step 3. Exponentiate both sides of the logistic regression equation to get odds \\(\\Huge odds=e^{\\beta_0+\\beta_1 x_1+...+\\beta_n x_n}\\) ## Step 4. Write out the probability equation \\(\\Huge p=\\frac{odds}{1+odds}\\) ## Step 5. Plug odds (from step 3) into the probability equation \\(\\Huge p=\\frac{e^{\\beta_0+\\beta_1 x_1+...+\\beta_n x_n}}{1+e^{\\beta_0+\\beta_1 x_1+...+\\beta_n x_n}}\\) ## Step 6. Divide the numerator and denominator by the odds (from step 3) \\(\\Huge p=\\frac{1}{1+e^{-(\\beta_0+\\beta_1 x_1+...+\\beta_n x_n)}}\\)\n\ngnb = GaussianNB()\ngnb.fit(X_train, y_train)\ncmd = ConfusionMatrixDisplay.from_estimator(gnb, X_test, y_test)\nplt.show()\n\n\n\n\n\n\n\n\n\nct = pd.crosstab(df[\"species\"], df[\"body_mass_g\"] &gt; df[\"body_mass_g\"].mean(), margins=True)\n\n\nct\n\n\n\n\n\n\n\nbody_mass_g\nFalse\nTrue\nAll\n\n\nspecies\n\n\n\n\n\n\n\nAdelie\n127\n25\n152\n\n\nChinstrap\n61\n7\n68\n\n\nGentoo\n7\n117\n124\n\n\nAll\n195\n149\n344\n\n\n\n\n\n\n\n\nlikelihood = ct.iloc[0, 0] / ct.iloc[0, 2]\nlikelihood\n\n0.8355263157894737\n\n\n\nprior = ct.iloc[0, 2] / ct.iloc[3, 2]\nprior\n\n0.4418604651162791\n\n\n\nnorm =  ct.iloc[3, 0] / ct.iloc[3, 2]\nnorm\n\n0.5668604651162791\n\n\n\nposterior = ct.iloc[0, 0] / ct.iloc[3, 0]\nposterior\n\n0.6512820512820513\n\n\n\\(\\Huge P(A\\vert B)={\\frac {P(B\\vert A)P(A)}{P(B)}}\\)\n\nresult = likelihood * prior / norm\n\n\ndf[\"body_mass_g\"] &gt; df[\"body_mass_g\"].mean()\n\n0      False\n1      False\n2      False\n3      False\n4      False\n       ...  \n339    False\n340     True\n341     True\n342     True\n343     True\nName: body_mass_g, Length: 344, dtype: bool\n\n\n\n# gnb.fit([df[\"body_mass_g\"] &gt; df[\"body_mass_g\"].mean()], y)",
    "crumbs": [
      "Machine Learning",
      "Probablity"
    ]
  }
]