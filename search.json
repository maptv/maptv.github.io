[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "Greetings! My name is Martin Laptev. \nI am a data scientist and software engineer with a broad scientific background that ranges from biochemistry to epidemiology. I use the JavaScript, Python, and R programming languages along with the UNIX shell to build digital deliverables like cloudinfrastructure, datadashboards, and machinelearning models.\nYou are currently on the Aboutpage of my site. The arrowat the bottom right of this page and the pencilicon in the navigation bar (navbar) will take you to my Blog. Similarly, the other navbar icons lead to my Curriculum Vitae (CV), GitHub, and LinkedIn.\nThe timestamp in the navbar shows the current Dec date() and time(). Dec is a calendar and timekeeping system that I created. Briefly, Dec dates (year+day) count the years since 1 BC and the days since March 1st, while Dec times count fractional days since midnight. In addition to displaying the time of day, fractional days can also be used to measure durations, such as the time since this webpage was loaded: .\n\n\n\nunix = {\n  while(true) {\n    yield Date.now();\n  }\n}\ntick = {\n  let i = 0;\n  while (true) {\n    yield Promises.tick(864, ++i);\n  }\n}\ntickTime = tick % 1e5\n// http://howardhinnant.github.io/date_algorithms.html#civil_from_days\nfunction dote2doty(days = 719468) {\n    const era = Math.floor((days &gt;= 0 ? days : days - 146096) / 146097),\n        dotc = days - era * 146097,\n        yotc = Math.floor((dotc - Math.floor(dotc / 1460)\n        + Math.floor(dotc / 36524) - Math.floor(dotc / 146096)) / 365);\n    return [yotc + era * 400, dotc + Math.floor(yotc / 100)\n        - yotc * 365 - Math.floor(yotc / 4)];\n};\nfunction unix2doty(ms = 0) { return dote2doty(ms / 86400000 + 719468) };\nfunction doty2deco(year = 1969, doty = 306, zone = 0) {\n    const [date, time] = doty.toString().split(\".\")\n    return `${year}+${date.toString().padStart(3, \"0\")}.${\n    time.toString().slice(0, 5).padStart(5, \"0\")}`;\n};\nfunction unix2deco(ms = 0) { return doty2deco(...unix2doty(ms)) };\n// https://observablehq.com/@observablehq/text-color-annotations-in-markdown#textcolor\nfunction setStyle(content, style = {}) {\n  function yiq(color) {\n    const {r, g, b} = d3.rgb(color);\n    return (r * 299 + g * 587 + b * 114) / 1000 / 255; // returns values between 0 and 1\n  }\n  const {\n    background,\n    color = yiq(background) &gt;= 0.6 ? \"#111\" : \"white\",\n    padding = \"0 1px\",\n    borderRadius = \"4px\",\n    fontWeight = 900,\n    fontSize = \"1em\",\n    ...rest\n  } = typeof style === \"string\" ? {background: style} : style;\n  return htl.html`&lt;span style=${{\n    background,\n    color,\n    padding,\n    borderRadius,\n    fontWeight,\n    ...rest\n  }}&gt;${content}&lt;/span&gt;`;\n}\ndeco = unix2deco(unix).slice(0, 14)\ndecoYear = deco.slice(0, 4)\ndecoDate = deco.slice(5, 8)\ndecoTime = deco.slice(9, 14)\nstyledDecoYear = setStyle(decoYear, d3.schemePaired[10])\nstyledDecoDate = setStyle(decoDate, d3.schemePaired[1])\nstyledDecoTime = setStyle(decoTime, d3.schemePaired[2])\nstyledTickTime = setStyle(tickTime, d3.schemePaired[2])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "blog/observable/index.html",
    "href": "blog/observable/index.html",
    "title": "Observable",
    "section": "",
    "text": "Decalendar1 is a decimal calendarüóìÔ∏èsystem and Declock2 is a decimal timekeeping‚è≥system. Instead of months, weeks, hours, minutes, and seconds, Decalendar and Declock use a number called the day-of-the-year (doty)3. Figure¬†1 displays the current doty () as a bar chart. The integer part of the doty is the Decalendar date4 () and the fractional part is the Declock time5 ().\nThe top two bars in Figure¬†1 (Êó¨ and Êó•) show the two components of the Decalendar date (): the dek6 () and the day-of-the-dek7 (). A dek is a group of 10 days that fulfills the role of months and weeks in Decalendar. Therefore, the dek and the day-of-the-dek (dotd) in Decalendar dates are analogous to the month and day-of-the-month (dotm) in calendar dates (mm-dd) and the week and day-of-the-week (dotw) in week dates (Www-d).\nThe bottom three bars in Figure¬†1 (%, ‚Ä∞, and ‚ô´) show components of the Declock time (): cents8 (), mils9 (), and beats10 (). A cent is 1% of the day, which is a little less than a quarter hour. A mil (‚Ä∞) is a tenth of a cent, which is close to a minute and a half. A beat is 1% of a mil, which is almost as long as a second, and can be thought of as a heart‚ù§Ô∏èbeat or musicalüéµbeat with a constant rate or tempo of 69.4ÃÖ beats per minute. In addition to displaying time on clocksüï∞Ô∏èand‚åöÔ∏èwatches, beats can be used to measure durations, such as the time since this webpage was loaded: .\n\n\nCode\n// https://observablehq.com/@fheyen/barchart-clock\n{\nconst W = width &gt; 1250 ? width * 2 / 3 : width &gt; 1150 ? width * 3 / 4 : width &gt; 1050 ? width * 4 / 5 : width &gt; 950 ? width * 5 / 6 : width &gt; 850 ? width : width &gt; 750 ? width * 1.02 : width &gt; 650 ? width * 1.06 : width &gt; 550 ? width * 1.1 : width &gt; 450 ? width * 1.14 : width * 1.18;\n  const H = 156;\n  const barX = 1;\n  const firstBarY = 1;\n  const svg = d3\n    .create(\"svg\")\n    .attr(\"width\", W)\n    .attr(\"viewBox\", [0, 0, W, H]);\n  const xRange = [0, W - 100];\n  const scaleM = d3.scaleLinear()\n    .domain([0, 10])\n    .range(xRange);\n  const scaleCandB = d3.scaleLinear()\n    .domain([0, 100])\n    .range(xRange);\n  const scaleDek = d3.scaleLinear()\n    .domain([0, 37])\n    .range(xRange);\n  // Background bars to show where 100% lies\n  svg.selectAll('.background')\n    .data(['dek', 'dotd', 'cents', \"mils\", 'beats'])\n    .enter()\n    .append('rect')\n    .attr('class', 'background timeBar')\n    .attr('width', W-100)\n    .attr('y', (d,i)=&gt;i*30+firstBarY)\n  // Dek/Dotd\n  svg\n    .append('rect')\n    .attr('class', 'timeBar')\n    .attr('y', firstBarY)\n    .attr('width', d =&gt; scaleDek(Number(dotyDek)+Number(dotyDotd)/10+Number(barCents)/1000))\n  svg\n    .append('rect')\n    .attr('class', 'timeBarFull')\n    .attr('y', firstBarY)\n    .attr('width', d =&gt; scaleDek(dotyDek))\n  svg\n    .append('rect')\n    .attr('class', 'timeBar')\n    .attr('y', firstBarY+30)\n    .attr('width', d =&gt; scaleM(Number(dotyDotd)+Number(barCents)/100+Number(barMils)/1000))\n  svg\n    .append('rect')\n    .attr('class', 'timeBarFull')\n    .attr('y', firstBarY+30)\n    .attr('width', d =&gt; scaleM(dotyDotd))\n  svg.selectAll('.tickDek')\n    .data(d3.range(width &gt; 500 ? 4: 6, 37))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickDek')\n    .attr('x', d=&gt;scaleDek(d)+barX)\n    .attr('y', firstBarY)\n    .attr('height', d=&gt;d%(width &gt; 500 ? 2 : 3)===0? 6:4)\n  // Cent ticks\n  svg.selectAll('.tickDotd')\n    .data(d3.range(width &gt; 500 ? 1: 2, 10))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickDotd')\n    .attr('x', d=&gt;scaleM(d)+barX)\n    .attr('y', firstBarY+49)\n    .attr('height', 6)\n  svg.selectAll('.tickLabel')\n    .data(d3.range(width &gt; 500 ? 4: 6, width &gt; 500 ? 37: 35, width &gt; 500 ? 2: 3))\n    .enter()\n    .append('text')\n    .attr('class', 'tickLabel')\n    .attr('x', d=&gt;scaleDek(d)+barX+.5)\n    .attr('y', firstBarY+22)\n    .text(d=&gt;d)\n  // Cents/Mils\n  svg\n    .append('rect')\n    .attr('class', 'timeBar')\n    .attr('y', firstBarY+60)\n    .attr('width', d =&gt; scaleCandB(Number(barCents)+Number(barMils)/10+Number(barBeats)/1000))\n  svg\n    .append('rect')\n    .attr('class', 'timeBarFull')\n    .attr('y', firstBarY+60)\n    .attr('width', d =&gt; scaleCandB(barCents))\n  svg\n    .append('rect')\n    .attr('class', 'timeBar')\n    .attr('y', firstBarY+90)\n    .attr('width', d =&gt; scaleM(Number(barMils)+Number(barBeats)/100+Number(barMb)/100000))\n  svg\n    .append('rect')\n    .attr('class', 'timeBarFull')\n    .attr('y', firstBarY+90)\n    .attr('width', d =&gt; scaleM(barMils))\n  // Cent ticks\n  svg.selectAll('.tickC')\n    .data(d3.range(width &gt; 500 ? 10 : 20, 100))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickC')\n    .attr('x', d=&gt;scaleM(d/10)+barX)\n    .attr('y', firstBarY+60)\n    .attr('height', d=&gt;d%2===0? 8:5)\n  svg.selectAll('.tickC1')\n    .data(d3.range(width &gt; 500 ? 10 : 20, 100))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickC1')\n    .attr('x', d=&gt;scaleM(d/10)+barX)\n    .attr('y', d=&gt;d%2===0? firstBarY+77:firstBarY+80)\n    .attr('height', d=&gt;d%2===0? 8:5)\n  // Mil ticks\n  svg.selectAll('.tickM')\n    .data(d3.range(width &gt; 500 ? 1 : 2, 10))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickM')\n    .attr('x', d=&gt;scaleM(d)+barX)\n    .attr('y', firstBarY+90)\n    .attr('height', 6)\n  svg.selectAll('.tickM1')\n    .data(d3.range(width &gt; 500 ? 1 : 2, 10))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickM1')\n    .attr('x', d=&gt;scaleM(d)+barX)\n    .attr('y', firstBarY+92.5)\n    .attr('height', 2.5)\n  svg.selectAll('.tickLabel1')\n    .data(d3.range(width &gt; 500 ? 1 : 2, 10))\n    .enter()\n    .append('text')\n    .attr('class', 'tickLabel1')\n    .attr('x', d=&gt;scaleM(d)+barX+.5)\n    .attr('y', firstBarY+47)\n    .text(d=&gt;d)\n  svg.selectAll('.tickLabel2')\n    .data(d3.range(width &gt; 500 ? 1 : 2, 10))\n    .enter()\n    .append('text')\n    .attr('class', 'tickLabel2')\n    .attr('x', d=&gt;scaleM(d)+barX+.5)\n    .attr('y', firstBarY+112)\n    .text(d=&gt;d)\n  // Beats\n  svg\n    .append('rect')\n    .attr('class', 'timeBar')\n    .attr('y', firstBarY+120)\n    .attr('width', d =&gt; scaleCandB(Number(barBeats)+Number(barMb)/1000))\n  svg\n    .append('rect')\n    .attr('class', 'timeBarFull')\n    .attr('y', firstBarY+120)\n    .attr('width', d =&gt; scaleCandB(barBeats))\n  // Beat ticks\n  svg.selectAll('.tickB')\n    .data(d3.range(width &gt; 500 ? 10 : 20, 100))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickB')\n    .attr('x', d=&gt;scaleM(d/10)+barX)\n    .attr('y', firstBarY+120)\n    .attr('height', d=&gt;d%2===0? 9:6)\n  // Labels\n  svg.selectAll('.timeLabel')\n    .data([`${dotyDek}Êó¨`, `${dotyDotd}Êó•`, `${barCents}%`, `${barMils}‚Ä∞`, `${barBeats}‚ô´`])\n    .enter()\n    .append('text')\n    .attr('class', 'timeLabel')\n    .attr('x', barX+2)\n    .attr('y', (d,i)=&gt;i*30+firstBarY+20)\n    .text(d=&gt;d)\n  return svg.node();\n}\n\n\n\n\n\n\n\n\n\nFigure¬†1: Doty bar chart\n\n\n\n\n\n\nCode\nhtml`&lt;style&gt;\n  .tickLabel, .tickLabel1, .tickLabel2, .timeLabel {\n    fill: #000;\n    font-family: sans-serif;\n    font-size: 20px;\n    text-anchor: middle;\n  }\n  .timeLabel {\n    text-anchor: start;\n  }\n  .timeBar, .timeBarFull {\n    x: 1px;\n    height: 25px;\n    rx: 5px;\n    stroke: #aaa;\n  }\n  .timeBar {\n    fill: #e8e8e8;\n  }\n  .timeBarFull {\n    fill: #ccffff;\n  }\n  .background {\n    fill: white;\n  }\n  .tickDek, .tickDotd, .tickDotd1, .tickC, .tickC1, .tickM, .tickM1, .tickB {\n    stroke: none;\n    fill: #666;\n    width: 1px;\n  }\n&lt;/style&gt;`\n\n\n\n\n\n\n\nAs an alternative to doty dates, Decalendar can express dates in fractional years, which are similar to the fractional days used in doty times. Fractional year dates11 can be combined with years into one number and are useful for marking periods of 73 days in the Decalendar year. Every 73 days, the Decalendar fractional year date increases by .2 (‚Öï). The current Decalendar fractional year date is .\nNow it‚Äôs your turn! Move the slidersüéöÔ∏èin Example¬†1 to adjust the doty, fractional year, month, and dotm values and see the corresponding 1) Northern Hemisphere season, 2) Southern Hemisphere season, and 3) Zodiac sign in List¬†1. Try selecting a special date, like your birthdayüéÇ! You can also press the Play‚ñ∂Ô∏èbutton and then sit back and watch the sliders cycleüîÑback and forth from the start to the end of the Decalendar year. The sliders cycle through an entire year in 36.5 beats, a million times fasterüèéÔ∏èthan the actual speed of time!\n\nExample 1 ¬†\n\n\n\n\nCode\nviewof inputDoty = Inputs.range([0, 365], {value: 306, step: 1, label: \"doty\"});\n\nviewof year = transformInput(\n    Inputs.range([0, .999], {step: .001, label: \"year\"}),\n    {bind: viewof inputDoty, transform: (x =&gt; x / 365), invert: (x =&gt; x * 365)}\n);\n\nviewof monthInput = transformInput(\n    Inputs.range([1, 12], {step: 1, label: \"month\"}),\n    {bind: viewof inputDoty, transform: doty2month, invert: month2doty}\n);\n\nviewof dotmInput = transformInput(\n    Inputs.range([1, 31], {step: 1, label: \"dotm\"}),\n    {bind: viewof inputDoty, transform: doty2dotm, invert: (x =&gt; Math.floor(( 153 * (\n        viewof monthInput.value &gt; 2\n        ? viewof monthInput.value - 3\n        : viewof monthInput.value + 9) + 2\n    ) / 5 + x - 1\n))});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nviewof scrubberDoty = Scrubber(numbers, {autoplay: false, alternate: true, delay: 86.4, loopDelay: 864})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nList¬†1: Date to season conversion",
    "crumbs": [
      "Blog",
      "Observable"
    ]
  },
  {
    "objectID": "blog/observable/index.html#sec-intro-doty",
    "href": "blog/observable/index.html#sec-intro-doty",
    "title": "Observable",
    "section": "",
    "text": "Decalendar1 is a decimal calendarüóìÔ∏èsystem and Declock2 is a decimal timekeeping‚è≥system. Instead of months, weeks, hours, minutes, and seconds, Decalendar and Declock use a number called the day-of-the-year (doty)3. Figure¬†1 displays the current doty () as a bar chart. The integer part of the doty is the Decalendar date4 () and the fractional part is the Declock time5 ().\nThe top two bars in Figure¬†1 (Êó¨ and Êó•) show the two components of the Decalendar date (): the dek6 () and the day-of-the-dek7 (). A dek is a group of 10 days that fulfills the role of months and weeks in Decalendar. Therefore, the dek and the day-of-the-dek (dotd) in Decalendar dates are analogous to the month and day-of-the-month (dotm) in calendar dates (mm-dd) and the week and day-of-the-week (dotw) in week dates (Www-d).\nThe bottom three bars in Figure¬†1 (%, ‚Ä∞, and ‚ô´) show components of the Declock time (): cents8 (), mils9 (), and beats10 (). A cent is 1% of the day, which is a little less than a quarter hour. A mil (‚Ä∞) is a tenth of a cent, which is close to a minute and a half. A beat is 1% of a mil, which is almost as long as a second, and can be thought of as a heart‚ù§Ô∏èbeat or musicalüéµbeat with a constant rate or tempo of 69.4ÃÖ beats per minute. In addition to displaying time on clocksüï∞Ô∏èand‚åöÔ∏èwatches, beats can be used to measure durations, such as the time since this webpage was loaded: .\n\n\nCode\n// https://observablehq.com/@fheyen/barchart-clock\n{\nconst W = width &gt; 1250 ? width * 2 / 3 : width &gt; 1150 ? width * 3 / 4 : width &gt; 1050 ? width * 4 / 5 : width &gt; 950 ? width * 5 / 6 : width &gt; 850 ? width : width &gt; 750 ? width * 1.02 : width &gt; 650 ? width * 1.06 : width &gt; 550 ? width * 1.1 : width &gt; 450 ? width * 1.14 : width * 1.18;\n  const H = 156;\n  const barX = 1;\n  const firstBarY = 1;\n  const svg = d3\n    .create(\"svg\")\n    .attr(\"width\", W)\n    .attr(\"viewBox\", [0, 0, W, H]);\n  const xRange = [0, W - 100];\n  const scaleM = d3.scaleLinear()\n    .domain([0, 10])\n    .range(xRange);\n  const scaleCandB = d3.scaleLinear()\n    .domain([0, 100])\n    .range(xRange);\n  const scaleDek = d3.scaleLinear()\n    .domain([0, 37])\n    .range(xRange);\n  // Background bars to show where 100% lies\n  svg.selectAll('.background')\n    .data(['dek', 'dotd', 'cents', \"mils\", 'beats'])\n    .enter()\n    .append('rect')\n    .attr('class', 'background timeBar')\n    .attr('width', W-100)\n    .attr('y', (d,i)=&gt;i*30+firstBarY)\n  // Dek/Dotd\n  svg\n    .append('rect')\n    .attr('class', 'timeBar')\n    .attr('y', firstBarY)\n    .attr('width', d =&gt; scaleDek(Number(dotyDek)+Number(dotyDotd)/10+Number(barCents)/1000))\n  svg\n    .append('rect')\n    .attr('class', 'timeBarFull')\n    .attr('y', firstBarY)\n    .attr('width', d =&gt; scaleDek(dotyDek))\n  svg\n    .append('rect')\n    .attr('class', 'timeBar')\n    .attr('y', firstBarY+30)\n    .attr('width', d =&gt; scaleM(Number(dotyDotd)+Number(barCents)/100+Number(barMils)/1000))\n  svg\n    .append('rect')\n    .attr('class', 'timeBarFull')\n    .attr('y', firstBarY+30)\n    .attr('width', d =&gt; scaleM(dotyDotd))\n  svg.selectAll('.tickDek')\n    .data(d3.range(width &gt; 500 ? 4: 6, 37))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickDek')\n    .attr('x', d=&gt;scaleDek(d)+barX)\n    .attr('y', firstBarY)\n    .attr('height', d=&gt;d%(width &gt; 500 ? 2 : 3)===0? 6:4)\n  // Cent ticks\n  svg.selectAll('.tickDotd')\n    .data(d3.range(width &gt; 500 ? 1: 2, 10))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickDotd')\n    .attr('x', d=&gt;scaleM(d)+barX)\n    .attr('y', firstBarY+49)\n    .attr('height', 6)\n  svg.selectAll('.tickLabel')\n    .data(d3.range(width &gt; 500 ? 4: 6, width &gt; 500 ? 37: 35, width &gt; 500 ? 2: 3))\n    .enter()\n    .append('text')\n    .attr('class', 'tickLabel')\n    .attr('x', d=&gt;scaleDek(d)+barX+.5)\n    .attr('y', firstBarY+22)\n    .text(d=&gt;d)\n  // Cents/Mils\n  svg\n    .append('rect')\n    .attr('class', 'timeBar')\n    .attr('y', firstBarY+60)\n    .attr('width', d =&gt; scaleCandB(Number(barCents)+Number(barMils)/10+Number(barBeats)/1000))\n  svg\n    .append('rect')\n    .attr('class', 'timeBarFull')\n    .attr('y', firstBarY+60)\n    .attr('width', d =&gt; scaleCandB(barCents))\n  svg\n    .append('rect')\n    .attr('class', 'timeBar')\n    .attr('y', firstBarY+90)\n    .attr('width', d =&gt; scaleM(Number(barMils)+Number(barBeats)/100+Number(barMb)/100000))\n  svg\n    .append('rect')\n    .attr('class', 'timeBarFull')\n    .attr('y', firstBarY+90)\n    .attr('width', d =&gt; scaleM(barMils))\n  // Cent ticks\n  svg.selectAll('.tickC')\n    .data(d3.range(width &gt; 500 ? 10 : 20, 100))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickC')\n    .attr('x', d=&gt;scaleM(d/10)+barX)\n    .attr('y', firstBarY+60)\n    .attr('height', d=&gt;d%2===0? 8:5)\n  svg.selectAll('.tickC1')\n    .data(d3.range(width &gt; 500 ? 10 : 20, 100))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickC1')\n    .attr('x', d=&gt;scaleM(d/10)+barX)\n    .attr('y', d=&gt;d%2===0? firstBarY+77:firstBarY+80)\n    .attr('height', d=&gt;d%2===0? 8:5)\n  // Mil ticks\n  svg.selectAll('.tickM')\n    .data(d3.range(width &gt; 500 ? 1 : 2, 10))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickM')\n    .attr('x', d=&gt;scaleM(d)+barX)\n    .attr('y', firstBarY+90)\n    .attr('height', 6)\n  svg.selectAll('.tickM1')\n    .data(d3.range(width &gt; 500 ? 1 : 2, 10))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickM1')\n    .attr('x', d=&gt;scaleM(d)+barX)\n    .attr('y', firstBarY+92.5)\n    .attr('height', 2.5)\n  svg.selectAll('.tickLabel1')\n    .data(d3.range(width &gt; 500 ? 1 : 2, 10))\n    .enter()\n    .append('text')\n    .attr('class', 'tickLabel1')\n    .attr('x', d=&gt;scaleM(d)+barX+.5)\n    .attr('y', firstBarY+47)\n    .text(d=&gt;d)\n  svg.selectAll('.tickLabel2')\n    .data(d3.range(width &gt; 500 ? 1 : 2, 10))\n    .enter()\n    .append('text')\n    .attr('class', 'tickLabel2')\n    .attr('x', d=&gt;scaleM(d)+barX+.5)\n    .attr('y', firstBarY+112)\n    .text(d=&gt;d)\n  // Beats\n  svg\n    .append('rect')\n    .attr('class', 'timeBar')\n    .attr('y', firstBarY+120)\n    .attr('width', d =&gt; scaleCandB(Number(barBeats)+Number(barMb)/1000))\n  svg\n    .append('rect')\n    .attr('class', 'timeBarFull')\n    .attr('y', firstBarY+120)\n    .attr('width', d =&gt; scaleCandB(barBeats))\n  // Beat ticks\n  svg.selectAll('.tickB')\n    .data(d3.range(width &gt; 500 ? 10 : 20, 100))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickB')\n    .attr('x', d=&gt;scaleM(d/10)+barX)\n    .attr('y', firstBarY+120)\n    .attr('height', d=&gt;d%2===0? 9:6)\n  // Labels\n  svg.selectAll('.timeLabel')\n    .data([`${dotyDek}Êó¨`, `${dotyDotd}Êó•`, `${barCents}%`, `${barMils}‚Ä∞`, `${barBeats}‚ô´`])\n    .enter()\n    .append('text')\n    .attr('class', 'timeLabel')\n    .attr('x', barX+2)\n    .attr('y', (d,i)=&gt;i*30+firstBarY+20)\n    .text(d=&gt;d)\n  return svg.node();\n}\n\n\n\n\n\n\n\n\n\nFigure¬†1: Doty bar chart\n\n\n\n\n\n\nCode\nhtml`&lt;style&gt;\n  .tickLabel, .tickLabel1, .tickLabel2, .timeLabel {\n    fill: #000;\n    font-family: sans-serif;\n    font-size: 20px;\n    text-anchor: middle;\n  }\n  .timeLabel {\n    text-anchor: start;\n  }\n  .timeBar, .timeBarFull {\n    x: 1px;\n    height: 25px;\n    rx: 5px;\n    stroke: #aaa;\n  }\n  .timeBar {\n    fill: #e8e8e8;\n  }\n  .timeBarFull {\n    fill: #ccffff;\n  }\n  .background {\n    fill: white;\n  }\n  .tickDek, .tickDotd, .tickDotd1, .tickC, .tickC1, .tickM, .tickM1, .tickB {\n    stroke: none;\n    fill: #666;\n    width: 1px;\n  }\n&lt;/style&gt;`\n\n\n\n\n\n\n\nAs an alternative to doty dates, Decalendar can express dates in fractional years, which are similar to the fractional days used in doty times. Fractional year dates11 can be combined with years into one number and are useful for marking periods of 73 days in the Decalendar year. Every 73 days, the Decalendar fractional year date increases by .2 (‚Öï). The current Decalendar fractional year date is .\nNow it‚Äôs your turn! Move the slidersüéöÔ∏èin Example¬†1 to adjust the doty, fractional year, month, and dotm values and see the corresponding 1) Northern Hemisphere season, 2) Southern Hemisphere season, and 3) Zodiac sign in List¬†1. Try selecting a special date, like your birthdayüéÇ! You can also press the Play‚ñ∂Ô∏èbutton and then sit back and watch the sliders cycleüîÑback and forth from the start to the end of the Decalendar year. The sliders cycle through an entire year in 36.5 beats, a million times fasterüèéÔ∏èthan the actual speed of time!\n\nExample 1 ¬†\n\n\n\n\nCode\nviewof inputDoty = Inputs.range([0, 365], {value: 306, step: 1, label: \"doty\"});\n\nviewof year = transformInput(\n    Inputs.range([0, .999], {step: .001, label: \"year\"}),\n    {bind: viewof inputDoty, transform: (x =&gt; x / 365), invert: (x =&gt; x * 365)}\n);\n\nviewof monthInput = transformInput(\n    Inputs.range([1, 12], {step: 1, label: \"month\"}),\n    {bind: viewof inputDoty, transform: doty2month, invert: month2doty}\n);\n\nviewof dotmInput = transformInput(\n    Inputs.range([1, 31], {step: 1, label: \"dotm\"}),\n    {bind: viewof inputDoty, transform: doty2dotm, invert: (x =&gt; Math.floor(( 153 * (\n        viewof monthInput.value &gt; 2\n        ? viewof monthInput.value - 3\n        : viewof monthInput.value + 9) + 2\n    ) / 5 + x - 1\n))});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nviewof scrubberDoty = Scrubber(numbers, {autoplay: false, alternate: true, delay: 86.4, loopDelay: 864})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nList¬†1: Date to season conversion",
    "crumbs": [
      "Blog",
      "Observable"
    ]
  },
  {
    "objectID": "blog/observable/index.html#sec-intro-year",
    "href": "blog/observable/index.html#sec-intro-year",
    "title": "Observable",
    "section": "Year",
    "text": "Year\nDoty dates (day) and timestamps (day.stamp) do not include years and thus can be reused from year to year. When a doty is combined with a year, it forms a Decalendar ordinal12 (deco) and represents a specific date (year+day) or time (year+day.stamp) in a specific year, instead of a date (day) or time (day.stamp) that occurs every year or every leap year. Using the Observable datetime input in Example¬†2, you can select a year, month, dotm, hour, and minute to see the equivalent 1) deco timestamp (year+day.clock) and 2) year date (year.yyy) in List¬†2. For comparison, the current deco timestamp is .\n\nExample 2 ¬†\n\n\n\n\nCode\nviewof inputDatetime = Inputs.datetime({label: \"date\", value: \"1970-01-01T00:00\"})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nList¬†2: Date and time conversion\n\n\n\n\nIn Example¬†3, you can enter numeric year and doty values or type in a free-form deco to see the resulting 1) ISO 8601 timestamp (year-mm-ddThh:mm:ss) and 2) year date in List¬†3. Example¬†3 also has a Play‚ñ∂Ô∏èbutton in that cycles from Day 0 to Day 365 of Year 1969. The cycle goes up to Day 0 of Year 1970, because Year 1969 is a common year and does not have a Day 365.\nInteracting with the number inputs in Example¬†3, standardizes the deco in the text input to ensure years are integers and doty values are positive numbers below 366. Nevertheless, all of the inputs in Example¬†3 support negative and fractional year and doty values. Negative doty values shift dates backward in time from the start of a given year into a previous year. Similarly, negative years shift dates backward starting from Year 0, which is 1 BCE (Before the Common Era).\n\nExample 3 ¬†\n\n\n\n\nCode\nviewof yd = Inputs.form([\n  Inputs.number({label: \"year\", value: \"1969\"}),\n  Inputs.number({label: \"doty\", value: \"306\"})\n])\n\n\n\n\n\n\n\n\n\nCode\nviewof decoOutput = transformInput(\n  Inputs.text({label: \"deco\", placeholder: \"year+day.ddd\", value: \"1969+306\"}),\n  {bind: viewof yd, transform: doty2deco, invert: deco2doty});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nviewof scrubberDeco = Scrubber(numbers, {autoplay: false, alternate: true, delay: 86.4, loopDelay: 864})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nList¬†3: Deco timestamp conversion",
    "crumbs": [
      "Blog",
      "Observable"
    ]
  },
  {
    "objectID": "blog/observable/index.html#sec-intro-dek",
    "href": "blog/observable/index.html#sec-intro-dek",
    "title": "Observable",
    "section": "Dek",
    "text": "Dek\nAs mentioned in Section¬†0.1, deks function as both months and weeks in Decalendar. A dek consists of 2 groups of 5 days called pents13. Each pent can follow a sequence of workdays and restdays called a pently schedule14. fig-schedules compares the typical weekly schedule and the Schedule 3 pently schedule. Like other pently schedules, Schedule 3 is named after the number of workdays it contains. The 3 workdays in Schedule 3 are followed by a 2-day pentend, the Decalender equivalent of a weekend.\nUnlike Schedule 3 and the other pently schedules, the weekly schedule is asymmetric and divides up workdays into proportions that are easier to express as fractions: 3/8 (.375), 1/3 (.3ÃÖ), and 7/24 (0.2916ÃÖ). In contrast, pently schedules divides each workday into simple, symmetrical proportions that are never repeating decimal numbers. The Schedule 3 workday is longer the typical 9-to-5, but the longer workday is compensated by more frequent restdays.\nExample¬†4 provides the opportunity to explore all four of the pently schedules. Schedule 3 is the default pently schedule, and should be followed unless there is a compelling reason to do otherwise. Despite having different numbers of workdays, all pently schedules keep the amount of spent at work constant at 1.2 days (120 cents) per pent. Every pently schedule also splits up workdays symmetrically so that the time before work is equal to the time after work. You can select which schedule to view in Example¬†4 using the Observable radio inputs.\nYou can also use the interval sliders to create a custom schedule and the Download‚¨áÔ∏èbutton to obtain the schedule data. Each interval is summarized by a Declock slice shown next to its slider. Decalendar and Declock slices are inspired by array slicing in computer programming and are used to represent date and time intervals. The slice that summarizes the Schedule 3 workday is .3:.7, where .3 (7.2 hours) is the start and .7 (16.8 hours) is the stop.\n\nExample 4 ¬†\n\n\n\n\nCode\nviewof intervals = Inputs.form([\n  interval([0, 1], {step: .01, value: [.3, .7], label: '0 or 5', width: 250, format: ([start, end]) =&gt; start === end ? \"\" : `${formatDecimal(start)}:${formatDecimal(end)}`}),\n  interval([0, 1], {step: .01, value: [.3, .7], label: '1 or 6', width: 250, format: ([start, end]) =&gt; start === end ? \"\" : `${formatDecimal(start)}:${formatDecimal(end)}`}),\n  interval([0, 1], {step: .01, value: [.3, .7], label: '2 or 7', width: 250, format: ([start, end]) =&gt; start === end ? \"\" : `${formatDecimal(start)}:${formatDecimal(end)}`}),\n  interval([0, 1], {step: .01, value: [0, 0], label: '3 or 8', width: 250, format: ([start, end]) =&gt; start === end ? \"\" : `${formatDecimal(start)}:${formatDecimal(end)}`}),\n  interval([0, 1], {step: .01, value: [0, 0], label: '4 or 9', width: 250, format: ([start, end]) =&gt; start === end ? \"\" : `${formatDecimal(start)}:${formatDecimal(end)}`}),\n])\n\n\n\n\n\n\n\n\n\n\n\nCode\nviewof schedule = Inputs.radio([2, 3, 4, 5], {label: \"sched.\", value: 3})\n\nviewof filename = Inputs.text({label: \"name\", placeholder: \"Enter the filename\", value: `schedule${schedule}.csv`})\n\nbutton(durations, filename)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n// https://observablehq.com/@dec/pent\nPlot.plot({\n  className: \"schedule-explorer\",\n  x: {label: null},\n  color: {scheme: \"Set1\", legend: \"swatches\", reverse: true},\n  y: {label: null, domain: [1, 0]},\n  marks: [\n  Plot.barY(durations, {x: \"label\", y: \"duration\", fill: \"group\"}),\n  Plot.textY(\n      durations,\n      Plot.stackY(\n        Plot.groupX(\n          { y: \"first\", text: \"first\" },\n          {\n            x: \"label\",\n            z: \"group\",\n            y: \"duration\",\n            text: (d) =&gt; (d.duration &lt; .0001 ? null : formatDecimal(d.duration)),\n            fill: \"white\",\n            stroke: \"black\",\n            fontSize: 36,\n          }\n        )\n      )\n    ),\n  ]})\n\n\n\n\n\n\n\n\n\nFigure¬†2: Pently schedule explorer\n\n\n\n\n\nSlices can be used to select Declock time intervals, as in Example¬†4 above, or Decalendar date intervals, as in Example¬†5 below. Decalendar date intervals can represent events take place over multiple days. In addition to slices, Decalendar and Declock intervals can also be chosen using spreads. Use the Observable button and checkbox inputs in Example¬†5 to display different dotd combinations in Figure¬†3. Figure¬†3 shows dates selected by a slice in blue, dates selected by a spread in orange, dates selected by both in green, and dates selected by neither in gray.\nThe Example¬†5 button and checkbox inputs will modify the associated slice and spread text and numeric inputs as needed to select the desired days-of-the-dek. The numeric inputs for slices are the startüé¨index, the stopüõëindex, and the stepüë£size, which are separated by colons (start:stop:step) when combined into a slice. Similarly, the numeric inputs for spreads are the startüé¨orüõëstop index, the spanü™Ωsize, the split size, and the space size, which are typically delimited by greater-than signs (start&gt;span&gt;split&gt;space) or a mix of greater-than and less-than signs (stop&lt;span&gt;split&gt;space).\nThe numeric inputs in Example¬†5 cannot capture the full power of spreads and slices, because slices can have any number of steps and, likewise, spreads can have any number of alternating split and space sizes. We can select all even or odd days-of-the-dek using a slice with a single step (::2 or 1::2) or a spread with one split-space pair (&gt;&gt;&gt;1 or 1&gt;&gt;&gt;1). More complex patterns, such as prime or composite days-of-the-dek, require multiple step sizes for slices (2:::2:2:5 or 4::2:2::5) or multiple split-space pairs (2&gt;&gt;2&gt;1&gt;&gt;1&gt;&gt;4 or 4&gt;&gt;&gt;1&gt;&gt;1&gt;2&gt;4).\n\nExample 5 ¬†\n\n\nCode\nviewof sliceDotd = Inputs.checkbox([...Array(10).keys()], {label: \"slice\", value: [1, 6]})\n\n\n\n\n\n\n\n\n\nCode\nviewof spreadDotd = Inputs.checkbox([...Array(10).keys()], {label: \"spread\", value: [1, 6]})\n\n\n\n\n\n\n\n\n\nCode\nviewof togglePlot = Inputs.button([\n  [invertDotd ? \"None\" : \"All\", value =&gt; [...Array(10).keys()]],\n  [invertDotd ? \"Even\" : \"Odd\", value =&gt; [1, 3, 5, 7, 9]],\n  [invertDotd ? html`&lt;s&gt;Prime&lt;/s&gt;` : \"Prime\", value =&gt; [2, 3, 5, 7]],\n  [invertDotd ? html`&lt;s&gt;Composite&lt;/s&gt;` : \"Composite\", value =&gt; [4, 6, 8, 9]],\n  [invertDotd ? html`&lt;s&gt;Schedule2&lt;/s&gt;` : \"Schedule2\", value =&gt; [0, 1, 5, 6]],\n  [invertDotd ? html`&lt;s&gt;Schedule3&lt;/s&gt;` : \"Schedule3\", value =&gt; [0, 1, 2, 5, 6, 7]],\n  [invertDotd ? html`&lt;s&gt;Schedule4&lt;/s&gt;` : \"Schedule4\", value =&gt; [0, 1, 2, 3, 5, 6, 7, 8]],\n], {value: [], label: \"select\"})\n\n\n\n\n\n\n\n\n\n\n\nCode\nviewof invertDotd = Inputs.toggle({label: \"invert\"})\nviewof sliceOrSpread = toggleSwitch({textOn: invertDotd ? \"Spread\" : 'Slice' , textOff: invertDotd ? \"Slice\" : 'Spread'})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nviewof sliceInputs = Inputs.form([\n    Inputs.number([-366, 366], {step: 1, label: \"start\", value: 1, placeholder: \"Enter start index\"}),\n    Inputs.number([-366, 366], {step: 1, label: \"stop\", value: 366, placeholder: \"Enter stop index\"}),\n    Inputs.number([-366, 366], {step: 1, label: \"step\", value: 5, placeholder: \"Enter step size\"}),\n])\nviewof sliceString = transformInput(\n  Inputs.text({label: \"slice\", placeholder: \"Enter slice string\", value: \"0:366\"}),\n{bind: viewof sliceInputs, transform: encodeSlice, invert: decodeSlice});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nviewof spreadInputs = Inputs.form([\n    Inputs.number([-366, 366], {step: 1, label: \"start\", value: 0, placeholder: \"Enter start index\"}),\n    Inputs.number([-366, 366], {step: 1, label: \"span\", value: 366, placeholder: \"Enter span size\"}),\n    Inputs.number([-366, 366], {step: 1, label: \"split\", value: 3, placeholder: \"Enter split size\"}),\n    Inputs.number([-366, 366], {step: 1, label: \"space\", value: 2, placeholder: \"Enter space size\"}),\n])\nviewof spreadString = transformInput(\n  Inputs.text({label: \"spread\", placeholder: \"Enter spread string\", value: \"0&gt;366&gt;3&gt;2\"}),\n{bind: viewof spreadInputs, transform: encodeSpread, invert: decodeSpread});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n// https://observablehq.com/@dec/dotd\nPlot.plot({\n  className: \"date-selector\",\n  padding: 0,\n  x: {axis: \"top\", label: null, type: \"band\"},\n  y: {label: null, type: \"band\"},\n  marks: [\n    Plot.cell(dates, {x: d =&gt; d[2], y: d =&gt; d.slice(0, 2), fill: d =&gt;\n      sliceArray.includes(d) && spreadArray.includes(d) ? \"green\" :\n      sliceArray.includes(d) && !spreadArray.includes(d) ? \"blue\" :\n      !sliceArray.includes(d) && spreadArray.includes(d) ? \"orange\" : \"grey\",\n      inset: 0.5}),\n    Plot.text(dates, {\n    x: d =&gt; d[2],\n    y: d =&gt; d.slice(0, 2),\n    fill: \"white\",\n    stroke: \"black\",\n    fontSize: 20})\n  ]\n})\n\n\n\n\n\n\n\n\n\nFigure¬†3: Decalendar date selector",
    "crumbs": [
      "Blog",
      "Observable"
    ]
  },
  {
    "objectID": "blog/knitr/index.html",
    "href": "blog/knitr/index.html",
    "title": "Knitr",
    "section": "",
    "text": "Back to top",
    "crumbs": [
      "Blog",
      "Knitr"
    ]
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "",
    "section": "",
    "text": "Quarto\n\n\n\ndecüóìÔ∏èüïì\n\n\nquarto\n\n\nweb dev\n\n\n\n\n\n\n\nMartin Laptev\n\n\n1700714468000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservable\n\n\n\ndecüóìÔ∏èüïì\n\n\nobservable\n\n\nquarto\n\n\n\n\n\n\n\nMartin Laptev\n\n\n1700714468000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJupyter\n\n\n\ndecüóìÔ∏èüïì\n\n\nknitr\n\n\njupyter\n\n\nquarto\n\n\n\n\n\n\n\nMartin Laptev\n\n\n1700714468000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKnitr\n\n\n\ndecüóìÔ∏èüïì\n\n\nknitr\n\n\nquarto\n\n\n\n\n\n\n\nMartin Laptev\n\n\n1700714468000\n\n\n\n\n\n\n\n\nNo matching items\n\n Back to topAttributions\n\nArtwork by @allison_horst",
    "crumbs": [
      "Blog"
    ]
  },
  {
    "objectID": "cv/index.html",
    "href": "cv/index.html",
    "title": "Curriculum Vitae",
    "section": "",
    "text": "maptv@vt.edu",
    "crumbs": [
      "Curriculum Vitae"
    ]
  },
  {
    "objectID": "cv/index.html#summary",
    "href": "cv/index.html#summary",
    "title": "Curriculum Vitae",
    "section": "Summary",
    "text": "Summary\nMy goal is to train and lead the next generation of data scientists to integrate substantive expertise from diverse fields with machine intelligence. Through research and teaching, I am constantly improving my ability to obtain, tidy, explore, transform, visualize, model, and communicate data. My preferred tools are JavaScript, Python, and R, open source programming languages kept on the cutting edge by their energetic communities. In addition to their utility in common data science tasks, these languages serve as accessible interfaces to deep learning libraries like TensorFlow. I aim to leverage my background in science and education to help shape the future of data science and deliver on the promise of machine learning",
    "crumbs": [
      "Curriculum Vitae"
    ]
  },
  {
    "objectID": "blog/jupyter/index.html",
    "href": "blog/jupyter/index.html",
    "title": "Jupyter",
    "section": "",
    "text": "Back to top",
    "crumbs": [
      "Blog",
      "Jupyter"
    ]
  },
  {
    "objectID": "blog/quarto/index.html",
    "href": "blog/quarto/index.html",
    "title": "Quarto",
    "section": "",
    "text": "Quarto is an open-source software system for turning plain-text source files into outputs like articles, books, blogs, dashboards, presentations, reports, and websites. Announced on 2022+149 by Posit CEO JJ Allaire, Quarto is already taking the worldüåêby storm‚õàÔ∏è!\nI strongly believe that everyone, regardless of their background and current technical skill level, can learn and benefit from Quarto. Getting start with Quarto is easy thanks to its excellent documentation and vibrant community of enthusiastic users and developers.\nRather than repeat the basic information already available elsewhere, I will share some advanced techniques along with the fundamental knowledge needed to understand how they work. The topics I cover are very technical, but my goal is to make the content on my blog as accessible as possible.\nThe first topic I will delve into is creating and publishing a website with Quarto. To follow the Quarto documentation on creating a website, you will need Visual Studio Code (VSCode), VSCodium, RStudio, or a terminal.",
    "crumbs": [
      "Blog",
      "Quarto"
    ]
  },
  {
    "objectID": "blog/quarto/index.html#sec-inst",
    "href": "blog/quarto/index.html#sec-inst",
    "title": "Quarto",
    "section": "Installing necessary tools",
    "text": "Installing necessary tools\nIf you use macOS, Linux, or the Windows Subsystem for Linux (WSL), you can install all of the aforementioned tools with the Homebrew package manager. To install everything you will need to follow along with this blog post, you can first install Homebrew and then run brew bundle in a directory that contains the Brewfile shown in Example¬†1.\n\nExample 1 ¬†\n\n\nBrewfile\n\nbrew \"gh\"\nbrew \"git\"\nbrew \"glab\"\ncask \"github\"\ncask \"quarto\"\ncask \"rstudio\"\ncask \"vscodium\"\ncask \"visual-studio-code\"\nvscode \"quarto.quarto\"\nvscode \"REditorSupport.r\"\n\n\nUsing a package manager like Homebrew to install all the requirements with a single shell command like brew bundle is the fastest and easiest way to get ready to follow along with this blog post. If you are curious about how I set up my computer, you can take a look at my Brewfile and other configuration files in my setup repository (repo) on GitHub and GitHub.\nApart from RStudio, VSCode, and VSCodium, the Brewfile in Example¬†1 will install the Git version control system, the GitHub and GitLab command line interfaces (CLIs), and GitHub Desktop, a Git Graphical User Interface (GUI). For more information on Git, a tool used by 93% of software developers worldwide according to survey results published by StackOverflow on 2022+314, take a look at the ‚ÄúGitHub for supporting, reusing, contributing, and failing safely‚Äù post by Allison Horst and Julie Lowndes on the Openscapes blog.",
    "crumbs": [
      "Blog",
      "Quarto"
    ]
  },
  {
    "objectID": "blog/quarto/index.html#sec-meth",
    "href": "blog/quarto/index.html#sec-meth",
    "title": "Quarto",
    "section": "Publishing method overview",
    "text": "Publishing method overview\nOnce you are done setting up your computer and creating the Quarto website template, you can make your site publicly available on the internet using one of the many available publishing services. To explore and assess different publishing workflows and free website hosting options, I set up my personal website on four different web hosts: Quarto Pub, Netlify, GitHub Pages, and GitLab Pages.\nThere are so many different ways to publish a Quarto site that I decided to come up with a naming system for Quarto publishing methods. The naming system derives a code for each publishing method from the numbered lists in the Quarto publishing documentation. For example, I refer to the two methods to publish to Quarto Pub as Q1 and Q2:\nTable¬†1 uses this naming system in its Code column to identify the publishing methods I discuss in this blog post. Each publishing method targets a particular web Host, Renders content locally or on a remote server, and deploys sites using either the quarto publish or the git push shell Command.\n\n\n\n\n\n\nCode\nHost\nRender\nCommand\n\n\n\n\nQ1\nQuarto\nLocal\npublish\n\n\nQ2\nQuarto\nRemote\npush\n\n\nN1\nNetlify\nLocal\npublish\n\n\nN2\nNetlify\nLocal\npush\n\n\nN3\nNetlify\nRemote\npush\n\n\nG1\nGitHub\nLocal\npush\n\n\nG2\nGitHub\nLocal\npublish\n\n\nG3\nGitHub\nRemote\npush\n\n\n\n\n\nTable¬†1: Quarto website publishing methods\n\n\n\nQ1, N1, and G2 all use quarto publish to render website content locally and then deploy it in one fell swoop. If you do not plan to use the Git version control system or the advanced features offered by GitHub, GitLab, or Netlify, then I recommend deploying your site to Quarto Pub by running quarto publish quarto-pub (Q1 in Table¬†1).\nLike Q1, N1 is a deployment method that does not require Git and makes it possible to deploy our site with a single shell command: quarto publish netlify. N1 provides access to the advanced web hosting features offered by Netlify and can even render content as long as code execution is frozen.\nThe first publishing method I tried for my personal site was G1, which requires the use of Git to push all website content to a Git provider like GitHub or GitLab. After I set up GitHub Pages and GitLab Pages, I could update my website on both of these web hosts just by going through the standard Git workflow shown in Figure¬†1.\n\n\n\n\n\n\nflowchart LR\n   A[working&lt;br/&gt;directory]-.git&lt;br/&gt;add.-&gt;B{{staging&lt;br/&gt;area}}-.git&lt;br/&gt;commit.-&gt;C([local&lt;br/&gt;repo])-.git&lt;br/&gt;push.-&gt;D(remote&lt;br/&gt;repo)\n\n\n\n\nFigure¬†1: Git workflow\n\n\n\n\n\nG1 is convenient for experienced Git users like me, but leads to messy commits that contain changes to both source and output files. Also, G1 cannot be combined with Q2, G3, or N3, whereas the other publishing methods are not mutually exclusive.\nTo have cleaner commits and more flexibility in choosing publish approaches, I switched from G1 to G2 by adding quarto publish to my publishing workflow. With G2, I can track changes to my source files on my main branch and publish my output files to GitHub Pages and GitLab Pages from my gh-pages branch.\nTo deploy my site to GitHub Pages, GitLab Pages, and Netlify, I combined G2 and N2. When I run quarto publish gh-pages, Quarto renders my site into my output directory, copies the output directory contents to the gh-pages branch of my local repo, and then commits and pushes the changes to my remote repos on GitHub and GitLab, which triggers Netlify to build my site from the gh-pages branch.\nThe only disadvantage of G2 is that there are many commands to run, because running quarto publish gh-pages only updates the output files on my gh-pages and I still have to run the git shell commands shown in Figure¬†1 to update the source files on my main branch. To make it easier to make incremental changes to my website and frequently release new content, I combined all of the G2 shell commands into a shell alias like the one shown in Example¬†2.\n\nExample 2 ¬†\nalias qp='(\nquarto publish --no-prompt gh-pages;\ngit add --all;\ngit commit -m 'Edit source files';\ngit push;\n)'\n\nYou can add shell aliases to a shell configuration file like .bashrc or .zshrc on your computer to shorten commands or combine any sequence of commands into one step. The qp alias in the .zshrc file in my setup repo is much more sophisticated than the alias in Example¬†2, because it allows me to enter a free-form commit message directly on the command line without quotes, e.g.¬†qp edit first blog.\nIf you decide to try my qp alias, please exercise extreme caution as any un-escaped or un-quoted metacharacters may yield surprising effects instead of being included verbatim in the commit message. For example, qp * will list the contents of the current directory in the commit message in place of the asterisk!\nTo summarize the Quarto publishing methods I discussed so far, Q1 and N1 are easy to configure and use, N2 automatically builds sites from Git repos, G1 is not recommended because it pollutes commits with output file changes, and G2 is more difficult to set up and use but provides clean commits and a nice separation of source and output files.\nIn my experience, GitHub Pages is the only web host that properly differentiates between internal and external links. All of the other web hosts include the external link icon on all links regardless of whether they target my site or an external site.\nI tried unsuccessfully to solve this issue by setting the link-external-filter property to a regular expression. If you notice a problem with the link-external-icon feature on other web hosts, I suggest switching to GitHub Pages.\nAll of the publishing methods I have discussed so far require us to generate output files locally by rendering our source files. In contrast, Q2, G3, and N3 make it possible to skip local rendering in favor of relying on GitHub Actions to handle all of the necessary steps.\nG3 is noteworthy, because it offers the same convenience of G1 but without the messy commits. An added bonus of G3 is that rendering with GitHub Actions provides a reproducible computational environment that is not dependent on what you have installed on your computer.\nInstead of using GitHub Actions, I could have used GitLab CI/CD to build my site. I decided not to go down this route because the Quarto dev team has many GitHub Actions workflows available but currently no official support for GitLab CI/CD.\nBefore trying to use GitHub Actions or any other continuous integration systems in your publishing workflow, I suggest getting used to working with quarto publish (Q1, G2, or N1). You can always set up other publishing methods later without sacrificing anything, because all of the publishing methods except G1 can be combined together.\nIn Section¬†1.3, I will walk through the setup of both G2 and G3 to provide the option of rendering locally by running quarto publish or rendering remotely with GitHub Actions by pushing to the main branch. Along the way, I will share many practical tips and general advice that you can apply to any project.",
    "crumbs": [
      "Blog",
      "Quarto"
    ]
  },
  {
    "objectID": "blog/quarto/index.html#sec-act",
    "href": "blog/quarto/index.html#sec-act",
    "title": "Quarto",
    "section": "GitHub Actions setup",
    "text": "GitHub Actions setup\n\nRepo setup\nBefore you can use GitHub Actions to publish your site, you will need a GitHub, an SSH key, and a repo like maptv.github.io that has a default branch called main and another branch which must be called gh-pages. If you want to publish on GitLab Pages, you will also need a GitLab account and an analogous GitLab repo like maptv.gitlab.io.\nYou can create the repo and the gh-pages branch using the web interface of https://github.com or https://gitlab.com in your browser, but the best way to start a new project is using the CLI for GitHub or GitLab in your terminal. First, run gh auth login or glab auth login and follow the prompts to authenticate via your web browser or with an authentication token.\nThe GitHub CLI allows you to add an SSH key to your account during or after authentication. The GitLab CLI does not handle SSH keys during authentication, but has a similar command for adding an SSH key to your GitLab account.\nAfter authentication and SSH key setup, you can run the code in either of the code chunks in Example¬†3 to set up your local and remote repos and create a Quarto website project in the local repo. You can create shell alias that combine all of the repo creation steps like I did in my .zshrc.\n\nExample 3 ¬†\n\nGitHubGitLab\n\n\ncd # start in home directory\nmkdir -p USERNAME\ncd USERNAME\ngh repo create USERNAME.github.io --add-readme --clone --public\ncd SITENAME\nquarto create project website USERNAME.github.io\n\n\ncd # start in home directory\nmkdir -p USERNAME\ncd USERNAME\nglab repo create USERNAME.gitlab.io --readme --defaultBranch main --public\ncd SITENAME\ngit pull origin main\ngit branch --set-upstream-to=origin/main main\nquarto create project website USERNAME.gitlab.io\n\n\n\n\nTo make it easier to maintain my site on both GitHub and GitLab Pages, I set up my local repo cloned to have two origin remote URLs using the code as shown in Example¬†4. Now, running quarto publish or git push in my local repo, updates my content on both GitHub and GitLab.\n\nExample 4 ¬†\ngit remote add lab git@gitlab.com:maptv/maptv.gitlab.io\ngit remote add hub git@github.com:maptv/maptv.github.io\ngit remote set-url --add origin $(git remote get-url lab)\n\nIf you want to have your website hosted on GitHub Pages, you will need to set gh-pages as your source branch in your repo settings. For GitLab Pages, you will need to add a .gitlab-ci.yml file to your repo and update your _quarto.yml file as shown in Example¬†5 to include .gitlab-ci.yml as a resource in your output directory.\n\nExample 5 ¬†\n\n.gitlab-ci.yml_quarto.yml\n\n\n# https://docs.gitlab.com/ee/user/project/pages/introduction.html#customize-the-default-folder\npages:\n  script: echo \"The site will be deployed to $CI_PAGES_URL\"\n  artifacts:\n    paths:\n      - \".\"\n  publish: \".\"\n  only:\n    - gh-pages\n\n\nproject:\n  type: website\n  resources: .gitlab-ci.yml\n\n\n\n\nBy default, GitLab Pages includes a random hash in site URLs. To shorten the URL of my GitLab Pages site to &lt;maptv.gitlab.io&gt;, I had to uncheck Use unique domain under Deploy &gt; Pages in the GitLab sidebar.\nAt this point, we have completed G2 setup and you should be able to run quarto publish gh-pages from your main branch to render your site and deploy it to GitHub and/or GitLab Pages. Deploying with quarto publish at least once is a prerequisite for setting up any of the publishing methods that rely on GitHub Actions, because quarto publish creates a _publish.yml file in the root of your project that is required for publishing via GitHub Actions.\n\n\nWorkflow setup\nIn addition to the steps described above, G3 setup requires that we create a .github/workflows directory and add a YAML file to that directory. Example¬†6 contains the gh-pages.yml file I use for my own site and the shell code that can used to obtain this file.\n\nExample 6 ¬†\n\ncurlgh-pages.yml\n\n\nmkdir -p .github/workflows\ncd .github/workflows\ncurl -O https://raw.githubusercontent.com/maptv/maptv.github.io/main/.github/workflows/gh-pages.yml\n\n\non:\n  workflow_dispatch:\n  push:\n    branches: [main]\n\nname: Quarto Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v4\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n        with:\n          version: '1.4.489'\n          tinytex: true\n\n      - name: Install R\n        uses: r-lib/actions/setup-r@v2\n        with:\n          r-version: '4.2.0'\n\n      - name: Install R Dependencies\n        uses: r-lib/actions/setup-renv@v2\n        with:\n          cache-version: 1\n\n      - name: Install Python and Dependencies\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.10'\n          cache: 'pip'\n      - run: pip install jupyter\n      - run: pip install -r requirements.txt\n\n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Push To GitLab\n        env:\n          token: ${{ secrets.GITLAB_AUTH_TOKEN }}\n        run: |\n          echo Starting to push gh-pages branch to GitLab\n          git config user.name \"maptv\"\n          git config user.email \"129316885+maptv@users.noreply.github.com\"\n          git remote set-url origin \"https://oauth2:${token}@gitlab.com/maptv/maptv.gitlab.io\"\n          git push origin gh-pages\n\n\n\n\nThe gh-pages.yml file in Example¬†6 installs Quarto, the R and Python programming languages, and the packages in the renv.lock and requirements.txt files. If you do not need R and/or Python, you can remove any unnecessary portions of the file.\nTo modify the Python files that are installed by GitHub Actions, you can edit the requirements.txt file in your repo. To update your renv.lock file so that it includes all of the R packages your site requires, run renv::snapshot() in an R session or Rscript -e renv::snapshot() in a shell.\nAfter pushing the gh-pages.yml file, you can visit the Actions tab in your remote repo on GitHub to check the progress of the deployment of your site. If your site did not build successfully, you can go through the logs to try to diagnose the problem.\nI added a ‚ÄúPush to GitLab‚Äù step to my gh-pages.yml to make GitHub Actions push my remote gh-pages to GitLab so that my site is kept in sync on both GitHub and GitLab Pages. This required manually creating a token on GitLab and adding it to GitHub, which I accomplished using the GitHub CLI as shown in Example¬†7.\n\nExample 7 ¬†\ngh secret set GITLAB_AUTH_TOKEN\n\nAfter the setup described above, I now have two options for publishing my Quarto site: quarto publish and 2) git push. In addition to GitHub and GitLab Pages, both of these options automatically update my site on Netlify via N2.\n\n\nQuarto Pub setup\nTo also automatically update my site on Quarto Pub, I created a separate GitHub Actions workflow by adding another YAML file to the .github/workflows directory in my repo. Example¬†8 shows my quarto-pub.yml file and the shell code that can be used to obtain it.\n\nExample 8 ¬†\n\ncurlquarto-pub.yml\n\n\nmkdir -p .github/workflows\ncd .github/workflows\ncurl -O https://raw.githubusercontent.com/maptv/maptv.github.io/main/.github/workflows/gh-pages.yml\n\n\non:\n  workflow_run:\n    workflows: [pages-build-deployment]\n    types: [completed]\n\nname: Update Quarto Pub\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v4\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n\n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: quarto-pub\n          render: false\n          QUARTO_PUB_AUTH_TOKEN: ${{ secrets.QUARTO_PUB_AUTH_TOKEN }}\n\n\n\n\nMy quarto-pub.yml file is based on Q2, but it runs upon completion of the pages-build-deployment workflow instead of a push to main. I changed the workflow trigger so that it runs after my GitHub Pages site is built, regardless of how I triggered the build.\n\n\nSummary\nFigure¬†2 summarizes all of the steps that occur during my Quarto publishing workflow. This workflow allows me to publish my site on four web hosts every time I run quarto publish gh-pages (G2) or git push (G3)!\n\n\n\n\n\n\nflowchart LR\n    A[local&lt;br/&gt;main]-.G2.-&gt;B[local&lt;br/&gt;gh-pages]-.G2.-&gt;C[GitHub&lt;br/&gt;gh-pages]\n    B[local&lt;br/&gt;gh-pages]-.G2.-&gt;D[GitLab&lt;br/&gt;gh-pages]\n    A[local&lt;br/&gt;main]-.G3.-&gt;F[GitHub&lt;br/&gt;main]-.G3.-&gt;C[GitHub&lt;br/&gt;gh-pages]-.G3.-&gt;D[GitLab&lt;br/&gt;gh-pages]\n    A[local&lt;br/&gt;main]-.G3.-&gt;G[GitLab&lt;br/&gt;main]\n    C[GitHub&lt;br/&gt;gh-pages]-.N2.-&gt;E[Netlify]\n    C[GitHub&lt;br/&gt;gh-pages]-.Q2.-&gt;H[Quarto&lt;br/&gt;Pub]\n\n\n\n\nFigure¬†2: Quarto workflow",
    "crumbs": [
      "Blog",
      "Quarto"
    ]
  },
  {
    "objectID": "blog/quarto/index.html#sec-nav",
    "href": "blog/quarto/index.html#sec-nav",
    "title": "Quarto",
    "section": "Customizing site navigation",
    "text": "Customizing site navigation\nOnce your site is built and published, you can make it easier to navigate with a customized navigation bar (navbar) and sidebar, as described in the Quarto documentation. Check out the _quarto.yml files for my site and the Quarto documentation site to see how the navigation components are set up.\nIn my navbar, I added toggle buttons for reader mode and dark mode. The names of the other icons on right side of the navbar are included in the sidebar.",
    "crumbs": [
      "Blog",
      "Quarto"
    ]
  },
  {
    "objectID": "blog/quarto/index.html#sec-html",
    "href": "blog/quarto/index.html#sec-html",
    "title": "Quarto",
    "section": "HTML blocks",
    "text": "HTML blocks\nMy navbar also provides the current date and time in Dec ordinal (deco) format, which counts the years since 1 BC and the days since March 1. Dec is a calendar and time system that I created and use throughout my blog.\nTo add a custom timestamp to the navbar, I put a &lt;script&gt; element that runs time.js in an HTML block in every Quarto markdown (.qmd) file, as shown in Example¬†9. Mine √áetinkaya-Rundel wrote about HTML blocks as part of her A Quarto tip a day project.\n\nExample 9 ¬†\n\n*.qmdtime.js\n\n\n```{=html}\n&lt;script src=\"time.js\"&gt;&lt;/script&gt;\n```\n\n\n// https://howardhinnant.github.io/date_algorithms.html#days_from_civil\nfunction dote2doty(days = 719468) {\n    const era = Math.floor((days &gt;= 0 ? days : days - 146096) / 146097),\n        dotc = days - era * 146097,\n        yotc = Math.floor((dotc - Math.floor(dotc / 1460)\n        + Math.floor(dotc / 36524) - Math.floor(dotc / 146096)) / 365);\n    return [yotc + era * 400, dotc + Math.floor(yotc / 100)\n        - yotc * 365 - Math.floor(yotc / 4)];\n};\nfunction unix2doty(ms = 0) { return dote2doty(ms / 86400000 + 719468) };\nfunction doty2deco(year = 1969, doty = 306, zone = 0) {\n    [date, time] = doty.toString().split(\".\")\n    return `${year}+${date.toString().padStart(3, \"0\")}.${\n    time.toString().slice(0, 5).padStart(5, \"0\")}`;\n};\nfunction unix2deco(ms = 0) { return doty2deco(...unix2doty(ms)) };\nconst nbc = document.getElementsByClassName(\"navbar-brand-container\");\nconst div = document.createElement(\"div\");\nconst cal = document.createElement(\"i\");\ncal.classList.add(\"bi\", \"bi-calendar\");\ncal.setAttribute(\"role\", \"img\");\nconst tik = document.createElement(\"i\");\ntik.classList.add(\"bi\", \"bi-clock\");\ntik.setAttribute(\"role\", \"img\");\ndiv.setAttribute(\"id\", \"deco\");\nnbc[0].appendChild(cal);\nnbc[0].appendChild(div);\nnbc[0].appendChild(tik);\nsetInterval(() =&gt; document.getElementById(\"deco\").innerText =\n  unix2deco(Date.now()).slice(0, 14), 86.4);\n\n\n\n\nHTML blocks are useful for running JavaScript code in the context of a single page on your site without affecting the others. I also add &lt;style&gt; tags in HTML blocks in my .qmd files as a last ditch effort to change the style of my site.\nBefore I resort to &lt;style&gt; tags, I try writing CSS in my styles.css, light.css, and dark.css files. So far, this approach has been sufficient to make any styling changes I want, but if it every fails, I can use JavaScript to override the default styling provided by Quarto by modifying style attributes, which have the highest specificity in CSS.",
    "crumbs": [
      "Blog",
      "Quarto"
    ]
  },
  {
    "objectID": "blog/quarto/index.html#sec-date",
    "href": "blog/quarto/index.html#sec-date",
    "title": "Quarto",
    "section": "Custom date format",
    "text": "Custom date format\nPython to customize the date format in the my blog‚Äôs listing page, and Lua to customize the date format in every blog post.\nJavaScript, Python, and Lua are programming languages that have all have interesting name origins. JavaScript is named after the Java‚òïprogramming language, Pythonüêçis named after the Monty Python comedy troupe, and Lua is the Portugueseüáµüáπword for moonüåï.\nPandoc is a program that converts documents into practically any format. The pan in Pandoc comes from the Ancient Greek word for all. Pandoc strives to convert all document formats, just like Pangea contained all the land and a panacea solves all problems.\nQuarto uses Pandoc to convert markdown files into target format(s) like html or pdf. If the source files contain executable code, Quarto executes the code via one of two computational engines: Jupyter or Knitr. Figure¬†3 shows the Quarto workflow.\n\n\n\n\n\n\nflowchart LR\n   A[qmd&lt;br/&gt;ipynb]-.Knitr&lt;br/&gt;Jupyter.-&gt;B((md))-.Pandoc with&lt;br/&gt;Lua filters.-&gt;C(html&lt;br/&gt;pdf&lt;br/&gt;docx&lt;br/&gt;etc.)\n\n\n\n\nFigure¬†3: Quarto workflow\n\n\n\n\n\nMine √áetinkaya-Rundel‚Äôs Quarto tip series includes a similar Quarto workflow mermaid diagram and her ‚ÄúHello, Quarto!‚Äù rstudio::conf(2022) keynote with Julia Stewart Lowndes contains truly beautiful Quarto workflow images by Allison Horst: 1, 2, 3, and 4.\nQuarto controls Pandoc, Jupyter, and Knitr in two ways: 1) with arguments passed to the Quarto CLI commands and 2) with YAML key-value pairs in .qmd, .ipynb, or .yml files.\nNormally, formatting dates in Quarto is as easy as setting the date-format YAML property. In my case it was more difficult, because I wanted dates based on Dec, a calendar and time system I created, instead of the ubiquitous Gregorian calendar.\nAs shown in Example¬†10, I set date-format to x in _metadata.yml, which converts the date of each blog post to millisecond UNIX time. I wanted to calculate the Dec calendar (Decalendar) dates from UNIX time, so that I could work with a single number and not have to deal with Gregorian calendar date formats or time zones.\nThe Decalendar dates in my blog are called Decalendar ordinal (deco) dates, because they are similar to ISO-8601 ordinal (isoo) dates. Like isoo dates, deco dates consist of a year and a day-of-the-year (doty).\nDoty values (doties) in Decalendar dates count the number of days that have passed since March 1, which is Day 0 in Decalendar, and can optionally include a Dec clock (Declock) time. The timestamp in the navbar of my blog is an example of a Decalendar date combined with a Declock time.\nThe navbar timestamp is also derived from millisecond UNIX time, which I obtained in time.js by calling Date.now(). In essence, all three of the scripts in Example¬†10 convert millisecond UNIX time into a deco date or timestamp.\nWhile time.js is sourced by Quarto when it reads the HTML block in each of my blog .qmd files, date.lua is run as a Pandoc filter during the creation of the output .html files, and date.py is executed as a post-render script. Example¬†10 speaks to the power and versatility of Quarto.\nComing up next on my blog is a post that introduces Dec with Observable graphics. Get ready for an animated and interactive data visualization extravaganza!\n\nExample 10 ¬†\n\n*.qmd_metadata.yml_quarto.ymltime.jsdate.pydate.lua\n\n\n```{=html}\n&lt;script src=\"time.js\"&gt;&lt;/script&gt;\n```\n\n\ndate: now\ndate-format: x\nfilters: date.lua\n\n\nproject:\n  type: website\n  output-dir: docs\n  post-render: date.py\n\n\n// https://howardhinnant.github.io/date_algorithms.html#days_from_civil\nfunction dote2doty(days = 719468) {\n    const era = Math.floor((days &gt;= 0 ? days : days - 146096) / 146097),\n        dotc = days - era * 146097,\n        yotc = Math.floor((dotc - Math.floor(dotc / 1460)\n        + Math.floor(dotc / 36524) - Math.floor(dotc / 146096)) / 365);\n    return [yotc + era * 400, dotc + Math.floor(yotc / 100)\n        - yotc * 365 - Math.floor(yotc / 4)];\n};\nfunction unix2doty(ms = 0) { return dote2doty(ms / 86400000 + 719468) };\nfunction doty2deco(year = 1969, doty = 306, zone = 0) {\n    [date, time] = doty.toString().split(\".\")\n    return `${year}+${date.toString().padStart(3, \"0\")}.${\n    time.toString().slice(0, 5).padStart(5, \"0\")}`;\n};\nfunction unix2deco(ms = 0) { return doty2deco(...unix2doty(ms)) };\nconst nbc = document.getElementsByClassName(\"navbar-brand-container\");\nconst div = document.createElement(\"div\");\nconst cal = document.createElement(\"i\");\ncal.classList.add(\"bi\", \"bi-calendar\");\ncal.setAttribute(\"role\", \"img\");\nconst tik = document.createElement(\"i\");\ntik.classList.add(\"bi\", \"bi-clock\");\ntik.setAttribute(\"role\", \"img\");\ndiv.setAttribute(\"id\", \"deco\");\nnbc[0].appendChild(cal);\nnbc[0].appendChild(div);\nnbc[0].appendChild(tik);\nsetInterval(() =&gt; document.getElementById(\"deco\").innerText =\n  unix2deco(Date.now()).slice(0, 14), 8.64);\n\n\nimport bs4\n\ndef unix2doty(ms=0):\n    days = ms / 86400000 + 719468\n    dote = days - (era := (days if days &gt;= 0 else days - 146096) // 146097) * 146097\n    year = int((dote - dote / 1460 + dote / 36524 - dote / 146096) // 365 + era * 400)\n    return year, days - (year * 365 + year / 4 - year / 100 + year / 400).__floor__()\n\nwith open(\"docs/blog.html\") as infile:\n    txt = infile.read()\n    soup = bs4.BeautifulSoup(txt, features=\"html.parser\")\nfor div in soup.find_all(\"div\", {\"class\": \"listing-date\"}):\n    if \"+\" not in div.text:\n        y, d = unix2doty(int(div.text))\n        div.string.replace_with(f\"{y:&gt;04}+{d.__floor__():&gt;03}\")\nfor p in soup.find_all(\"p\", {\"class\": \"date\"}):\n    if \"+\" not in p.text:\n        y, d = unix2doty(int(p.text))\n        p.string.replace_with(f\"{y:&gt;04}+{d.__floor__():&gt;03}\")\n\nwith open(\"docs/blog.html\", \"w\") as outfile:\n    outfile.write(str(soup))\n\n\nlocal function unix2deco(ms)\n    local days = ms / 86400000 + 719468\n    local era = (days &gt;= 0 and days or days - 146096) // 146097\n    local doe = days - era * 146097\n    local year = math.floor((doe - doe / 1460 + doe / 36524 - doe / 146096) / 365) + era * 400\n    local doty = days - math.floor(year * 365 + year / 4 - year / 100 + year / 400)\n    return string.format(\"%s+%s\", math.floor(year), math.floor(doty))\nend\n\nlocal function to_decalendar(date)\n  local date = pandoc.utils.stringify(date)\n  local unix = date:match(\"(%d+)\")\n  return date:gsub(unix, unix2deco(unix))\nend\n\nfunction Meta(m)\n  m.date = to_decalendar(m.date)\n  return m\nend",
    "crumbs": [
      "Blog",
      "Quarto"
    ]
  }
]