[
  {
    "objectID": "reveal/index.html",
    "href": "reveal/index.html",
    "title": "Quarto",
    "section": "",
    "text": "This blog post is the most important post in my Tools blog post series, as indicated by its centrality in Figure¬†1, node of the netw focuses on the use of Quarto to author and publish digital content. As the third post in my , which is summarized by Figure¬†1, and depends on the. is my blog post on Quarto. The subsequent posts in the series demonstrate how to use Observable, Jupyter, and Knitr to execute code in Quarto documents.\n\n\n\n\n\n\n\nflowchart TB\n   A[Git]--&gt;B[VSCode]--&gt;C[Quarto]\n   C--&gt;D[Observable]\n   C--&gt;E[Jupyter]\n   C--&gt;F[Knitr]\n   click A \"../git\"\n   click B \"../vscode\"\n   click C \"../quarto\"\n   click D \"../observable\"\n   click E \"../jupyter\"\n   click F \"../knitr\"\n   style C stroke:#99f,stroke-width:5px\n\n\n\n\nFigure¬†1: Tools series navigation chart\n\n\n\n\nIf you do not have such a repo, you can create one by following along with the previous post in my tools blog post series, which is shown in Figure¬†1.",
    "crumbs": [
      "Software",
      "Reveal"
    ]
  },
  {
    "objectID": "reveal/index.html#tldr",
    "href": "reveal/index.html#tldr",
    "title": "Quarto",
    "section": "",
    "text": "This blog post is the most important post in my Tools blog post series, as indicated by its centrality in Figure¬†1, node of the netw focuses on the use of Quarto to author and publish digital content. As the third post in my , which is summarized by Figure¬†1, and depends on the. is my blog post on Quarto. The subsequent posts in the series demonstrate how to use Observable, Jupyter, and Knitr to execute code in Quarto documents.\n\n\n\n\n\n\n\nflowchart TB\n   A[Git]--&gt;B[VSCode]--&gt;C[Quarto]\n   C--&gt;D[Observable]\n   C--&gt;E[Jupyter]\n   C--&gt;F[Knitr]\n   click A \"../git\"\n   click B \"../vscode\"\n   click C \"../quarto\"\n   click D \"../observable\"\n   click E \"../jupyter\"\n   click F \"../knitr\"\n   style C stroke:#99f,stroke-width:5px\n\n\n\n\nFigure¬†1: Tools series navigation chart\n\n\n\n\nIf you do not have such a repo, you can create one by following along with the previous post in my tools blog post series, which is shown in Figure¬†1.",
    "crumbs": [
      "Software",
      "Reveal"
    ]
  },
  {
    "objectID": "reveal/index.html#sec-intro",
    "href": "reveal/index.html#sec-intro",
    "title": "Quarto",
    "section": "Introduction",
    "text": "Introduction\nQuarto is an open-source software system for turning plain-text source files into outputs like articles, books, blogs, dashboards, presentations, reports, and websites. Announced on 2022+149 by Posit CEO JJ Allaire, Quarto is already taking the worldüåêby storm‚õàÔ∏è!\nI strongly believe that everyone, regardless of their background and current technical skill level, can learn and benefit from Quarto. Getting started with Quarto is easy thanks to its excellent documentation and vibrant community of enthusiastic users and developers.\nRather than repeat the basic information already available elsewhere, I will share some advanced techniques along with the fundamental knowledge needed to understand how they work. The topics I cover are very technical, but my goal is to make the content on my blog as accessible as possible.\nThe first topic I will delve into is creating and publishing a website with Quarto. To follow the Quarto documentation on creating a website, you will need Visual Studio Code (VSCode), VSCodium, RStudio, or a terminal.",
    "crumbs": [
      "Software",
      "Reveal"
    ]
  },
  {
    "objectID": "reveal/index.html#sec-pub",
    "href": "reveal/index.html#sec-pub",
    "title": "Quarto",
    "section": "Publishing Quarto sites",
    "text": "Publishing Quarto sites\n\nInstalling tools\nIf you use macOS, Linux, or the Windows Subsystem for Linux (WSL), you can install all of the aforementioned tools with the Homebrew package manager. To install everything you will need to follow along with this blog post, you can first install Homebrew and then run brew bundle in a directory that contains the Brewfile shown in Example¬†1.\n\nExample 1 ¬†\n\n\nBrewfile\n\nbrew \"gh\"\nbrew \"git\"\nbrew \"glab\"\ncask \"github\"\ncask \"quarto\"\ncask \"rstudio\"\ncask \"vscodium\"\ncask \"visual-studio-code\"\nvscode \"quarto.quarto\"\nvscode \"REditorSupport.r\"\n\n\nUsing a package manager like Homebrew to install all the requirements with a single shell command like brew bundle is the fastest and easiest way to get ready to follow along with this blog post. If you are curious about how I set up my computer, you can take a look at my Brewfile and other configuration files in my setup repository (repo) on GitHub and GitLab.\nApart from RStudio, VSCode, and VSCodium, the Brewfile in Example¬†1 will install the Git version control system, the GitHub and GitLab command line interfaces (CLIs), and GitHub Desktop, a Git Graphical User Interface (GUI). For more information on Git, a tool used by 93% of software developers worldwide according to survey results published by StackOverflow on 2022+314, take a look at the ‚ÄúGitHub for supporting, reusing, contributing, and failing safely‚Äù post by Allison Horst and Julie Lowndes on the Openscapes blog.\nAs an alternative to installing tools on your computer, you can use the web interface provided by GitHub Codespaces. To set up a Codespace, you can remove the lines that start with cask from the Brewfile provided in Example¬†1 and add the file to a repo called dotfiles and along with a setup.sh file like the one shown in Example¬†2.\n\nExample 2 ¬†\n\n\nsetup.sh\n\necho | /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n(echo; echo 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"') &gt;&gt; /home/codespace/.profile\neval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"\nbrew bundle\n\n\n\n\nPublishing overview\nOnce you are done setting up your computer or Codespace, you create a Quarto website template and make your site publicly available on the internet using one of the many available publishing services. To explore and assess different publishing workflows and free website hosting options, I set up my personal website on four different web hosts: Quarto Pub, Netlify, GitHub Pages, and GitLab Pages.\nThere are so many different ways to publish a Quarto site that I decided to come up with a naming system for Quarto publishing methods. The naming system derives a code for each publishing method from the numbered lists in the Quarto publishing documentation. For example, I refer to the two methods to publish to Quarto Pub as Q1 and Q2:\nTable¬†1 uses this naming system in its Code column to identify the publishing methods I discuss in this blog post. Each publishing method targets a particular web Host, Renders content locally or on a remote server, and deploys sites using either the quarto publish or the git push shell Command.\n\n\n\n\n\n\nCode\nHost\nRender\nCommand\n\n\n\n\nG1\nGitHub\nLocal\npush\n\n\nG2\nGitHub\nLocal\npublish\n\n\nG3\nGitHub\nRemote\npush\n\n\nN1\nNetlify\nLocal\npublish\n\n\nN2\nNetlify\nLocal\npush\n\n\nN3\nNetlify\nRemote\npush\n\n\nQ1\nQuarto\nLocal\npublish\n\n\nQ2\nQuarto\nRemote\npush\n\n\n\n\n\nTable¬†1: Quarto website publishing methods\n\n\n\n\n\nGit workflow\nThe first publishing method I tried for my personal site was G1, which requires the use of Git to push all website content to a Git provider like GitHub or GitLab. After I set up GitHub Pages and GitLab Pages, I could update my website on both of these web hosts just by going through the standard Git workflow shown in Figure¬†2.\n\n\n\n\n\n\nflowchart LR\n   A[working&lt;br/&gt;directory]-.git&lt;br/&gt;add.-&gt;B{{staging&lt;br/&gt;area}}-.git&lt;br/&gt;commit.-&gt;C([local&lt;br/&gt;repo])-.git&lt;br/&gt;push.-&gt;D(remote&lt;br/&gt;repo)\n\n\n\n\nFigure¬†2: Git workflow\n\n\n\n\n\nTo make it easier to make incremental changes to my website and frequently release new content, I combined all of the git shell commands in Figure¬†2 into a shell alias. You can add shell aliases to a shell configuration file like .bashrc or .zshrc on your computer to shorten commands or combine any sequence of commands into one step.\nThe aacmp alias in the .zshrc file in my setup repo allows me to enter a free-form commit message directly on the command line without quotes, e.g.¬†qp edit first blog. If you decide to try my aacmp alias, please exercise extreme caution as any un-escaped or un-quoted metacharacters may yield surprising effects instead of being included verbatim in the commit message. For example, qp * will list the contents of the current directory in the commit message in place of the asterisk!\nAn alternative to a shell alias that combines git commands is a keyboard shortcut in Git-enabled GUI. Example¬†3 shows two files, tasks.json and update.sh, that we can use to set up VSCode, VSCodium, and GitHub Codespaces to go through the Git workflow whenever we press Ctrl+Shift+B on Linux/Windows or ‚åò+Shift+B on Mac (mnemonic: B is for Build).\n\nExample 3 ¬†\n\nupdate.shtasks.json\n\n\n\n\n\n\n\n\n\n\nThis mechanism is called Tasks and is used to automate software build tasks, which can include any steps required to build and publish a website. Importantly, the Tasks mechanism requires that the tasks.json file be added to the .vscode directory and that we enable execution of the update.sh script by running chmod +x update.sh in our project root.\nShell aliases and keyboard shortcuts can greatly facilitate the Git workflow which is essential not only for G1, but also G3, N3, and Q2. Unlike these other publishing methods, G1 leads to messy commits that contain changes to both source and output files.\n\n\nquarto publish\nTo have cleaner commits, I switched from G1 to G2 by adding quarto publish to my publishing workflow. With G2, I can track changes to my source files on my main branch and publish my output files to GitHub Pages and GitLab Pages from my gh-pages branch.\nQ1, N1, and G2 all use quarto publish to render website content locally and then deploy it in one fell swoop. If you do not plan to use the Git version control system or the advanced features offered by GitHub, GitLab, or Netlify, then I recommend deploying your site to Quarto Pub by running quarto publish quarto-pub (Q1 in Table¬†1).\nLike Q1, N1 is a deployment method that does not require Git and makes it possible to deploy our site with a single shell command: quarto publish netlify. N1 provides access to the advanced web hosting features offered by Netlify and can even render content as long as code execution is frozen.\nTo deploy my site to GitHub Pages, GitLab Pages, and Netlify, I combined G2 and N2. When I run quarto publish gh-pages, Quarto renders my site into my output directory, copies the output directory contents to the gh-pages branch of my local repo, and then commits and pushes the changes to my remote repos on GitHub and GitLab, which triggers Netlify to build my site from the gh-pages branch.\nTo summarize the Quarto publishing methods I discussed so far, Q1 and N1 are easy to configure and use, N2 automatically builds sites from Git repos, G1 is not recommended because it pollutes commits with output file changes, and G2 is more difficult to set up and use but provides clean commits and a nice separation of source and output files.\n\n\nGitHub Actions\nAll of the publishing methods I have discussed so far require us to generate output files locally by rendering our source files. In contrast, Q2, G3, and N3 make it possible to skip local rendering in favor of relying on GitHub Actions to handle all of the necessary steps.\nG3 is noteworthy, because it offers the same convenience of G1 but without messy commits that mix changes to source and output files. An added bonus of G3 is that rendering with GitHub Actions provides a reproducible computational environment that is not dependent on what you have installed on your computer.\nInstead of using GitHub Actions, I could have used GitLab CI/CD to build my site. I decided not to go down this route because the Quarto dev team has many GitHub Actions workflows available but currently no official support for GitLab CI/CD.\nBefore trying to use GitHub Actions or any other continuous integration systems in your publishing workflow, I suggest getting used to working with quarto publish (Q1, G2, or N1). You can always set up other publishing methods later without sacrificing anything, because all of the publishing methods except G1 can be combined together.\nIn Section¬†4, I will walk through the setup of both G2 and G3 to provide the option of rendering locally by running quarto publish or rendering remotely with GitHub Actions by pushing to the main branch. Along the way, I will share many practical tips and general advice that you can apply to any project.",
    "crumbs": [
      "Software",
      "Reveal"
    ]
  },
  {
    "objectID": "reveal/index.html#sec-set",
    "href": "reveal/index.html#sec-set",
    "title": "Quarto",
    "section": "Publishing setup",
    "text": "Publishing setup\n\nRepo setup\nBefore you can use GitHub Actions to publish your site, you will need a GitHub, an SSH key, and a repo like maptv.github.io that has a default branch called main and another branch which must be called gh-pages. If you want to publish on GitLab Pages, you will also need a GitLab account and an analogous GitLab repo like maptv.gitlab.io.\nYou can create the repo and the gh-pages branch using the web interface of https://github.com or https://gitlab.com in your browser, but the best way to start a new project is using the CLI for GitHub or GitLab in your terminal. First, run gh auth login or glab auth login and follow the prompts to authenticate via your web browser or with an authentication token.\nThe GitHub CLI allows you to add an SSH key to your account during or after authentication. The GitLab CLI does not handle SSH keys during authentication, but has a similar command for adding an SSH key to your GitLab account.\nAfter authentication and SSH key setup, you can run the code in either of the code chunks in Example¬†4 to set up your local and remote repos and create a Quarto website project in the local repo. You can create shell alias that combine all of the repo creation steps like I did in my .zshrc.\n\nExample 4 ¬†\n\nGitHubGitLab\n\n\ncd # start in home directory\nmkdir -p USERNAME\ncd USERNAME\ngh repo create USERNAME.github.io --add-readme --clone --public\ncd SITENAME\nquarto create project website USERNAME.github.io\n\n\ncd # start in home directory\nmkdir -p USERNAME\ncd USERNAME\nglab repo create USERNAME.gitlab.io --readme --defaultBranch main --public\ncd SITENAME\ngit pull origin main\ngit branch --set-upstream-to=origin/main main\nquarto create project website USERNAME.gitlab.io\n\n\n\n\nTo make it easier to maintain my site on both GitHub and GitLab Pages, I set up my local repo cloned to have two origin remote URLs using the code as shown in Example¬†5. Now, running quarto publish or git push in my local repo, updates my content on both GitHub and GitLab.\n\nExample 5 ¬†\ngit remote add lab git@gitlab.com:maptv/maptv.gitlab.io\ngit remote add hub git@github.com:maptv/maptv.github.io\ngit remote set-url --add origin $(git remote get-url lab)\n\nIf you want to have your website hosted on GitHub Pages, you will need to set gh-pages as your source branch in your repo settings. For GitLab Pages, you will need to add a .gitlab-ci.yml file to your repo and update your _quarto.yml file as shown in Example¬†6 to include .gitlab-ci.yml as a resource in your output directory.\n\nExample 6 ¬†\n\n.gitlab-ci.yml_quarto.yml\n\n\n\n\n\n\n\n\n\n\nBy default, GitLab Pages includes a random hash in site URLs. To shorten the URL of my GitLab Pages site to &lt;maptv.gitlab.io&gt;, I had to uncheck Use unique domain under Deploy &gt; Pages in the GitLab sidebar.\nAt this point, we have completed G2 setup and you should be able to run quarto publish gh-pages from your main branch to render your site and deploy it to GitHub and/or GitLab Pages. Deploying with quarto publish at least once is a prerequisite for setting up any of the publishing methods that rely on GitHub Actions, because quarto publish creates a _publish.yml file in the root of your project that is required for publishing via GitHub Actions.\n\n\nGitHub Actions\nIn addition to the steps described above, G3 setup requires that we create a .github/workflows directory and add a YAML file to that directory. Example¬†7 contains the gh-pages.yml file I use for my own site and the shell code that can used to obtain this file.\n\nExample 7 ¬†\n\ncurlgh-pages.yml\n\n\nmkdir -p .github/workflows\ncd .github/workflows\ncurl -O https://raw.githubusercontent.com/maptv/maptv.github.io/main/.github/workflows/gh-pages.yml\n\n\n\n\n\n\n\nThe gh-pages.yml file in Example¬†7 installs Quarto, the R and Python programming languages, and the packages in the renv.lock and requirements.txt files. If you do not need R and/or Python, you can remove any unnecessary portions of the file.\nTo modify the Python files that are installed by GitHub Actions, you can edit the requirements.txt file in your repo. To update your renv.lock file so that it includes all of the R packages your site requires, run renv::snapshot() in an R session or Rscript -e renv::snapshot() in a shell.\nAfter pushing the gh-pages.yml file, you can visit the Actions tab in your remote repo on GitHub to check the progress of the deployment of your site. If your site did not build successfully, you can go through the logs to try to diagnose the problem.\nI added a ‚ÄúPush to GitLab‚Äù step to my gh-pages.yml to make GitHub Actions push my remote gh-pages to GitLab so that my site is kept in sync on both GitHub and GitLab Pages. This required manually creating a token on GitLab and adding it to GitHub, which I accomplished using the GitHub CLI as shown in Example¬†8.\n\nExample 8 ¬†\ngh secret set GITLAB_AUTH_TOKEN\n\nAfter the setup described above, I now have two options for publishing my Quarto site: quarto publish and 2) git push. In addition to GitHub and GitLab Pages, both of these options automatically update my site on Netlify via N2.\nTo also automatically update my site on Quarto Pub, I created a separate GitHub Actions workflow by adding another YAML file to the .github/workflows directory in my repo. Example¬†9 shows my quarto-pub.yml file and the shell code that can be used to obtain it.\n\nExample 9 ¬†\n\ncurlquarto-pub.yml\n\n\nmkdir -p .github/workflows\ncd .github/workflows\ncurl -O https://raw.githubusercontent.com/maptv/maptv.github.io/main/.github/workflows/gh-pages.yml\n\n\n\n\n\n\n\nMy quarto-pub.yml file is based on Q2, but it runs upon completion of the pages-build-deployment workflow instead of a push to main. I changed the workflow trigger so that it runs after my GitHub Pages site is built, regardless of whether I triggered the build by running quarto publish gh-pages or pushing to main.\nFigure¬†3 summarizes all of the steps that occur during my Quarto publishing workflow. This workflow allows me to publish my site on four web hosts every time I run quarto publish gh-pages (G2) or git push (G3)!\n\n\n\n\n\n\nflowchart LR\n    A[local&lt;br/&gt;main]-.G2.-&gt;B[local&lt;br/&gt;gh-pages]-.G2.-&gt;C[GitHub&lt;br/&gt;gh-pages]\n    B[local&lt;br/&gt;gh-pages]-.G2.-&gt;D[GitLab&lt;br/&gt;gh-pages]\n    A[local&lt;br/&gt;main]-.G3.-&gt;F[GitHub&lt;br/&gt;main]-.G3.-&gt;C[GitHub&lt;br/&gt;gh-pages]-.G3.-&gt;D[GitLab&lt;br/&gt;gh-pages]\n    A[local&lt;br/&gt;main]-.G3.-&gt;G[GitLab&lt;br/&gt;main]\n    C[GitHub&lt;br/&gt;gh-pages]-.N2.-&gt;E[Netlify]\n    C[GitHub&lt;br/&gt;gh-pages]-.Q2.-&gt;H[Quarto&lt;br/&gt;Pub]\n\n\n\n\nFigure¬†3: Quarto publishing workflow\n\n\n\n\n\nSo far I have only noticed one difference between the four web hosts I use for my site: GitHub Pages is the only web host that properly differentiates between internal and external links. All of the other web hosts include the external link icon on all links regardless of whether they target my site or an external site.\nI tried unsuccessfully to solve this issue by setting the link-external-filter property to a regular expression. If you notice a problem with the link-external-icon feature on other web hosts, I suggest switching to GitHub Pages.",
    "crumbs": [
      "Software",
      "Reveal"
    ]
  },
  {
    "objectID": "reveal/index.html#sec-cust",
    "href": "reveal/index.html#sec-cust",
    "title": "Quarto",
    "section": "Customizing Quarto sites",
    "text": "Customizing Quarto sites\n\nSite navigation\nOnce your site is built and published, you can make it easier to navigate with a customized navigation bar (navbar) and sidebar, as described in the Quarto documentation. Check out the _quarto.yml files for my site and the Quarto documentation site to see how the navigation components are set up.\nIn my navbar, I added toggle buttons for reader mode and dark mode. The names of the other icons on right side of the navbar are included in the sidebar.\n\n\nHTML blocks\nMy navbar also provides the current date and time in Dec ordinal (deco) format, which counts the years since 1 BC and the days since March 1. Dec is a calendar and time system that I created and use throughout my blog.\nTo add a custom timestamp to the navbar, I put a &lt;script&gt; element that runs time.js in an HTML block in every Quarto markdown (.qmd) file, as shown in Example¬†10. Mine √áetinkaya-Rundel wrote about HTML blocks as part of her A Quarto tip a day project.\n\nExample 10 ¬†\n\n*.qmdtime.js\n\n\n```{=html}\n&lt;script src=\"time.js\"&gt;&lt;/script&gt;\n```\n\n\n\n\n\n\n\nHTML blocks are useful for running JavaScript code in the context of a single page on your site without affecting the others. I also use HTML blocks to add a &lt;style&gt; element to my .qmd files as a last ditch effort to fine tune the style of my site.\nBefore I resort to the &lt;style&gt; element approach, I try writing CSS in my style.css, light.css, and dark.css files. So far, this approach has been sufficient to make any styling changes I want, but if it every fails, I can use JavaScript to override the default styling provided by Quarto by modifying style attributes, which have the highest specificity in CSS.\n\n\nPost-render script\nI wanted to my blog‚Äôs listing page to show dates in the same format as the navbar timestamp. To accomplish this, I used a post-render script written in the Python programming language.\nPre- and post-render scripts are set as project options in the _quarto.yml file in the root of your Quarto project. Example¬†11 shows the date.py post-render script and how this script is referenced in _quarto.yml.\n\nExample 11 ¬†\n\n_quarto.ymldate.py\n\n\n\n\n\n\n\n\n\n\nNormally, formatting dates in Quarto is as easy as setting the date-format YAML property. In my case it was more difficult, because I wanted dates based on Dec, the calendar and time system I created, instead of the ubiquitous Gregorian calendar.\nTo facilitate the calculations in date.py, I set date-format to x in my _metadata.yml file so all of the dates would be in millisecond UNIX time and I would not have to deal with Gregorian calendar date formats or time zones. After all of the dates are generated, my date.py script traverses the HTML in the output directory using Beautiful Soup and converts millisecond UNIX time dates into Dec dates (year+day).\n\n\nPandoc filter\nIn addition to customizing dates on the listing page of my blog, I wanted to customize the date format in every blog post. To complete this task, I used a Lua script as a Pandoc filter.\nPandoc is a program that converts documents into practically any format. The ‚Äúpan‚Äù in Pandoc comes from the Ancient Greek word for all. Pandoc strives to convert all document formats, just like Pangea contained all the land and a panacea solves all problems.\nQuarto uses Pandoc to convert markdown files into target format(s) like html or pdf. If the source files contain executable code, Quarto executes the code via one of two computational engines: Jupyter or Knitr. Figure¬†4 shows the Quarto workflow.\n\n\n\n\n\n\nflowchart LR\n   A[qmd&lt;br/&gt;ipynb]-.Knitr&lt;br/&gt;Jupyter.-&gt;B((md))-.Pandoc with&lt;br/&gt;Lua filters.-&gt;C(html&lt;br/&gt;pdf&lt;br/&gt;docx&lt;br/&gt;etc.)\n\n\n\n\nFigure¬†4: Quarto rendering workflow\n\n\n\n\n\nMine √áetinkaya-Rundel‚Äôs Quarto tip series includes a similar Quarto workflow mermaid diagram and her ‚ÄúHello, Quarto!‚Äù rstudio::conf(2022) keynote with Julia Stewart Lowndes contains truly beautiful Quarto workflow images by Allison Horst: 1, 2, 3, and 4.\nQuarto controls Pandoc, Jupyter, and Knitr in two ways: 1) with arguments passed to the Quarto CLI commands and 2) with YAML key-value pairs in .qmd, .ipynb, or .yml files.\nExample¬†12 shows how I set up every qmd file to generate the current date in millisecond UNIX time and designated date.lua as a Pandoc filter. Unlike post-render scripts, Pandoc filters are executed during the creation of the output files.\n\nExample 12 ¬†\n\n*.qmddate.lua\n\n\ndate: now\ndate-format: x\nfilters: date.lua\n\n\n\n\n\n\n\nAll three of the customizations I described above convert millisecond UNIX time into a custom date format, but you can adapt these approaches to make all sorts of edits to your Quarto site. HTML blocks can run JavaScript which excels at making content dynamic and interactive, pre- and post-render scripts can be in any programming language, while Pandoc filters are written in Lua and modify output during rendering.\nComing up next on my blog is a post that Observable graphics. Get ready for an animated and interactive data visualization extravaganza!",
    "crumbs": [
      "Software",
      "Reveal"
    ]
  },
  {
    "objectID": "quarto/index.html",
    "href": "quarto/index.html",
    "title": "Quarto",
    "section": "",
    "text": "This blog post is the most important post in my Tools blog post series, as indicated by its centrality in Figure¬†1, node of the netw focuses on the use of Quarto to author and publish digital content. As the third post in my , which is summarized by Figure¬†1, and depends on the. is my blog post on Quarto. The subsequent posts in the series demonstrate how to use Observable, Jupyter, and Knitr to execute code in Quarto documents.\n\n\n\n\n\n\n\nflowchart TB\n   A[Git]--&gt;B[VSCode]--&gt;C[Quarto]\n   C--&gt;D[Observable]\n   C--&gt;E[Jupyter]\n   C--&gt;F[Knitr]\n   click A \"../git\"\n   click B \"../vscode\"\n   click C \"../quarto\"\n   click D \"../observable\"\n   click E \"../jupyter\"\n   click F \"../knitr\"\n   style C stroke:#99f,stroke-width:5px\n\n\n\n\nFigure¬†1: Tools series navigation chart\n\n\n\n\nIf you do not have such a repo, you can create one by following along with the previous post in my tools blog post series, which is shown in Figure¬†1.",
    "crumbs": [
      "Software",
      "Quarto"
    ]
  },
  {
    "objectID": "quarto/index.html#tldr",
    "href": "quarto/index.html#tldr",
    "title": "Quarto",
    "section": "",
    "text": "This blog post is the most important post in my Tools blog post series, as indicated by its centrality in Figure¬†1, node of the netw focuses on the use of Quarto to author and publish digital content. As the third post in my , which is summarized by Figure¬†1, and depends on the. is my blog post on Quarto. The subsequent posts in the series demonstrate how to use Observable, Jupyter, and Knitr to execute code in Quarto documents.\n\n\n\n\n\n\n\nflowchart TB\n   A[Git]--&gt;B[VSCode]--&gt;C[Quarto]\n   C--&gt;D[Observable]\n   C--&gt;E[Jupyter]\n   C--&gt;F[Knitr]\n   click A \"../git\"\n   click B \"../vscode\"\n   click C \"../quarto\"\n   click D \"../observable\"\n   click E \"../jupyter\"\n   click F \"../knitr\"\n   style C stroke:#99f,stroke-width:5px\n\n\n\n\nFigure¬†1: Tools series navigation chart\n\n\n\n\nIf you do not have such a repo, you can create one by following along with the previous post in my tools blog post series, which is shown in Figure¬†1.",
    "crumbs": [
      "Software",
      "Quarto"
    ]
  },
  {
    "objectID": "quarto/index.html#sec-intro",
    "href": "quarto/index.html#sec-intro",
    "title": "Quarto",
    "section": "Introduction",
    "text": "Introduction\nQuarto is an open-source software system for turning plain-text source files into outputs like articles, books, blogs, dashboards, presentations, reports, and websites. Announced on 2022+149 by Posit CEO JJ Allaire, Quarto is already taking the worldüåêby storm‚õàÔ∏è!\nI strongly believe that everyone, regardless of their background and current technical skill level, can learn and benefit from Quarto. Getting started with Quarto is easy thanks to its excellent documentation and vibrant community of enthusiastic users and developers.\nRather than repeat the basic information already available elsewhere, I will share some advanced techniques along with the fundamental knowledge needed to understand how they work. The topics I cover are very technical, but my goal is to make the content on my blog as accessible as possible.\nThe first topic I will delve into is creating and publishing a website with Quarto. To follow the Quarto documentation on creating a website, you will need Visual Studio Code (VSCode), VSCodium, RStudio, or a terminal.",
    "crumbs": [
      "Software",
      "Quarto"
    ]
  },
  {
    "objectID": "quarto/index.html#sec-pub",
    "href": "quarto/index.html#sec-pub",
    "title": "Quarto",
    "section": "Publishing Quarto sites",
    "text": "Publishing Quarto sites\n\nInstalling tools\nIf you use macOS, Linux, or the Windows Subsystem for Linux (WSL), you can install all of the aforementioned tools with the Homebrew package manager. To install everything you will need to follow along with this blog post, you can first install Homebrew and then run brew bundle in a directory that contains the Brewfile shown in Example¬†1.\n\nExample 1 ¬†\n\n\nBrewfile\n\nbrew \"gh\"\nbrew \"git\"\nbrew \"glab\"\ncask \"github\"\ncask \"quarto\"\ncask \"rstudio\"\ncask \"vscodium\"\ncask \"visual-studio-code\"\nvscode \"quarto.quarto\"\nvscode \"REditorSupport.r\"\n\n\nUsing a package manager like Homebrew to install all the requirements with a single shell command like brew bundle is the fastest and easiest way to get ready to follow along with this blog post. If you are curious about how I set up my computer, you can take a look at my Brewfile and other configuration files in my setup repository (repo) on GitHub and GitLab.\nApart from RStudio, VSCode, and VSCodium, the Brewfile in Example¬†1 will install the Git version control system, the GitHub and GitLab command line interfaces (CLIs), and GitHub Desktop, a Git Graphical User Interface (GUI). For more information on Git, a tool used by 93% of software developers worldwide according to survey results published by StackOverflow on 2022+314, take a look at the ‚ÄúGitHub for supporting, reusing, contributing, and failing safely‚Äù post by Allison Horst and Julie Lowndes on the Openscapes blog.\nAs an alternative to installing tools on your computer, you can use the web interface provided by GitHub Codespaces. To set up a Codespace, you can remove the lines that start with cask from the Brewfile provided in Example¬†1 and add the file to a repo called dotfiles and along with a setup.sh file like the one shown in Example¬†2.\n\nExample 2 ¬†\n\n\nsetup.sh\n\necho | /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n(echo; echo 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"') &gt;&gt; /home/codespace/.profile\neval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"\nbrew bundle\n\n\n\n\nPublishing overview\nOnce you are done setting up your computer or Codespace, you create a Quarto website template and make your site publicly available on the internet using one of the many available publishing services. To explore and assess different publishing workflows and free website hosting options, I set up my personal website on four different web hosts: Quarto Pub, Netlify, GitHub Pages, and GitLab Pages.\nThere are so many different ways to publish a Quarto site that I decided to come up with a naming system for Quarto publishing methods. The naming system derives a code for each publishing method from the numbered lists in the Quarto publishing documentation. For example, I refer to the two methods to publish to Quarto Pub as Q1 and Q2:\nTable¬†1 uses this naming system in its Code column to identify the publishing methods I discuss in this blog post. Each publishing method targets a particular web Host, Renders content locally or on a remote server, and deploys sites using either the quarto publish or the git push shell Command.\n\n\n\n\n\n\nCode\nHost\nRender\nCommand\n\n\n\n\nG1\nGitHub\nLocal\npush\n\n\nG2\nGitHub\nLocal\npublish\n\n\nG3\nGitHub\nRemote\npush\n\n\nN1\nNetlify\nLocal\npublish\n\n\nN2\nNetlify\nLocal\npush\n\n\nN3\nNetlify\nRemote\npush\n\n\nQ1\nQuarto\nLocal\npublish\n\n\nQ2\nQuarto\nRemote\npush\n\n\n\n\n\nTable¬†1: Quarto website publishing methods\n\n\n\n\n\nGit workflow\nThe first publishing method I tried for my personal site was G1, which requires the use of Git to push all website content to a Git provider like GitHub or GitLab. After I set up GitHub Pages and GitLab Pages, I could update my website on both of these web hosts just by going through the standard Git workflow shown in Figure¬†2.\n\n\n\n\n\n\nflowchart LR\n   A[working&lt;br/&gt;directory]-.git&lt;br/&gt;add.-&gt;B{{staging&lt;br/&gt;area}}-.git&lt;br/&gt;commit.-&gt;C([local&lt;br/&gt;repo])-.git&lt;br/&gt;push.-&gt;D(remote&lt;br/&gt;repo)\n\n\n\n\nFigure¬†2: Git workflow\n\n\n\n\n\nTo make it easier to make incremental changes to my website and frequently release new content, I combined all of the git shell commands in Figure¬†2 into a shell alias. You can add shell aliases to a shell configuration file like .bashrc or .zshrc on your computer to shorten commands or combine any sequence of commands into one step.\nThe aacmp alias in the .zshrc file in my setup repo allows me to enter a free-form commit message directly on the command line without quotes, e.g.¬†qp edit first blog. If you decide to try my aacmp alias, please exercise extreme caution as any un-escaped or un-quoted metacharacters may yield surprising effects instead of being included verbatim in the commit message. For example, qp * will list the contents of the current directory in the commit message in place of the asterisk!\nAn alternative to a shell alias that combines git commands is a keyboard shortcut in Git-enabled GUI. Example¬†3 shows two files, tasks.json and update.sh, that we can use to set up VSCode, VSCodium, and GitHub Codespaces to go through the Git workflow whenever we press Ctrl+Shift+B on Linux/Windows or ‚åò+Shift+B on Mac (mnemonic: B is for Build).\n\nExample 3 ¬†\n\nupdate.shtasks.json\n\n\n\n\n\n\n\n\n\n\nThis mechanism is called Tasks and is used to automate software build tasks, which can include any steps required to build and publish a website. Importantly, the Tasks mechanism requires that the tasks.json file be added to the .vscode directory and that we enable execution of the update.sh script by running chmod +x update.sh in our project root.\nShell aliases and keyboard shortcuts can greatly facilitate the Git workflow which is essential not only for G1, but also G3, N3, and Q2. Unlike these other publishing methods, G1 leads to messy commits that contain changes to both source and output files.\n\n\nquarto publish\nTo have cleaner commits, I switched from G1 to G2 by adding quarto publish to my publishing workflow. With G2, I can track changes to my source files on my main branch and publish my output files to GitHub Pages and GitLab Pages from my gh-pages branch.\nQ1, N1, and G2 all use quarto publish to render website content locally and then deploy it in one fell swoop. If you do not plan to use the Git version control system or the advanced features offered by GitHub, GitLab, or Netlify, then I recommend deploying your site to Quarto Pub by running quarto publish quarto-pub (Q1 in Table¬†1).\nLike Q1, N1 is a deployment method that does not require Git and makes it possible to deploy our site with a single shell command: quarto publish netlify. N1 provides access to the advanced web hosting features offered by Netlify and can even render content as long as code execution is frozen.\nTo deploy my site to GitHub Pages, GitLab Pages, and Netlify, I combined G2 and N2. When I run quarto publish gh-pages, Quarto renders my site into my output directory, copies the output directory contents to the gh-pages branch of my local repo, and then commits and pushes the changes to my remote repos on GitHub and GitLab, which triggers Netlify to build my site from the gh-pages branch.\nTo summarize the Quarto publishing methods I discussed so far, Q1 and N1 are easy to configure and use, N2 automatically builds sites from Git repos, G1 is not recommended because it pollutes commits with output file changes, and G2 is more difficult to set up and use but provides clean commits and a nice separation of source and output files.\n\n\nGitHub Actions\nAll of the publishing methods I have discussed so far require us to generate output files locally by rendering our source files. In contrast, Q2, G3, and N3 make it possible to skip local rendering in favor of relying on GitHub Actions to handle all of the necessary steps.\nG3 is noteworthy, because it offers the same convenience of G1 but without messy commits that mix changes to source and output files. An added bonus of G3 is that rendering with GitHub Actions provides a reproducible computational environment that is not dependent on what you have installed on your computer.\nInstead of using GitHub Actions, I could have used GitLab CI/CD to build my site. I decided not to go down this route because the Quarto dev team has many GitHub Actions workflows available but currently no official support for GitLab CI/CD.\nBefore trying to use GitHub Actions or any other continuous integration systems in your publishing workflow, I suggest getting used to working with quarto publish (Q1, G2, or N1). You can always set up other publishing methods later without sacrificing anything, because all of the publishing methods except G1 can be combined together.\nIn Section¬†4, I will walk through the setup of both G2 and G3 to provide the option of rendering locally by running quarto publish or rendering remotely with GitHub Actions by pushing to the main branch. Along the way, I will share many practical tips and general advice that you can apply to any project.",
    "crumbs": [
      "Software",
      "Quarto"
    ]
  },
  {
    "objectID": "quarto/index.html#sec-set",
    "href": "quarto/index.html#sec-set",
    "title": "Quarto",
    "section": "Publishing setup",
    "text": "Publishing setup\n\nRepo setup\nBefore you can use GitHub Actions to publish your site, you will need a GitHub, an SSH key, and a repo like maptv.github.io that has a default branch called main and another branch which must be called gh-pages. If you want to publish on GitLab Pages, you will also need a GitLab account and an analogous GitLab repo like maptv.gitlab.io.\nYou can create the repo and the gh-pages branch using the web interface of https://github.com or https://gitlab.com in your browser, but the best way to start a new project is using the CLI for GitHub or GitLab in your terminal. First, run gh auth login or glab auth login and follow the prompts to authenticate via your web browser or with an authentication token.\nThe GitHub CLI allows you to add an SSH key to your account during or after authentication. The GitLab CLI does not handle SSH keys during authentication, but has a similar command for adding an SSH key to your GitLab account.\nAfter authentication and SSH key setup, you can run the code in either of the code chunks in Example¬†4 to set up your local and remote repos and create a Quarto website project in the local repo. You can create shell alias that combine all of the repo creation steps like I did in my .zshrc.\n\nExample 4 ¬†\n\nGitHubGitLab\n\n\ncd # start in home directory\nmkdir -p USERNAME\ncd USERNAME\ngh repo create USERNAME.github.io --add-readme --clone --public\ncd SITENAME\nquarto create project website USERNAME.github.io\n\n\ncd # start in home directory\nmkdir -p USERNAME\ncd USERNAME\nglab repo create USERNAME.gitlab.io --readme --defaultBranch main --public\ncd SITENAME\ngit pull origin main\ngit branch --set-upstream-to=origin/main main\nquarto create project website USERNAME.gitlab.io\n\n\n\n\nTo make it easier to maintain my site on both GitHub and GitLab Pages, I set up my local repo cloned to have two origin remote URLs using the code as shown in Example¬†5. Now, running quarto publish or git push in my local repo, updates my content on both GitHub and GitLab.\n\nExample 5 ¬†\ngit remote add lab git@gitlab.com:maptv/maptv.gitlab.io\ngit remote add hub git@github.com:maptv/maptv.github.io\ngit remote set-url --add origin $(git remote get-url lab)\n\nIf you want to have your website hosted on GitHub Pages, you will need to set gh-pages as your source branch in your repo settings. For GitLab Pages, you will need to add a .gitlab-ci.yml file to your repo and update your _quarto.yml file as shown in Example¬†6 to include .gitlab-ci.yml as a resource in your output directory.\n\nExample 6 ¬†\n\n.gitlab-ci.yml_quarto.yml\n\n\n\n\n\n\n\n\n\n\nBy default, GitLab Pages includes a random hash in site URLs. To shorten the URL of my GitLab Pages site to &lt;maptv.gitlab.io&gt;, I had to uncheck Use unique domain under Deploy &gt; Pages in the GitLab sidebar.\nAt this point, we have completed G2 setup and you should be able to run quarto publish gh-pages from your main branch to render your site and deploy it to GitHub and/or GitLab Pages. Deploying with quarto publish at least once is a prerequisite for setting up any of the publishing methods that rely on GitHub Actions, because quarto publish creates a _publish.yml file in the root of your project that is required for publishing via GitHub Actions.\n\n\nGitHub Actions\nIn addition to the steps described above, G3 setup requires that we create a .github/workflows directory and add a YAML file to that directory. Example¬†7 contains the gh-pages.yml file I use for my own site and the shell code that can used to obtain this file.\n\nExample 7 ¬†\n\ncurlgh-pages.yml\n\n\nmkdir -p .github/workflows\ncd .github/workflows\ncurl -O https://raw.githubusercontent.com/maptv/maptv.github.io/main/.github/workflows/gh-pages.yml\n\n\n\n\n\n\n\nThe gh-pages.yml file in Example¬†7 installs Quarto, the R and Python programming languages, and the packages in the renv.lock and requirements.txt files. If you do not need R and/or Python, you can remove any unnecessary portions of the file.\nTo modify the Python files that are installed by GitHub Actions, you can edit the requirements.txt file in your repo. To update your renv.lock file so that it includes all of the R packages your site requires, run renv::snapshot() in an R session or Rscript -e renv::snapshot() in a shell.\nAfter pushing the gh-pages.yml file, you can visit the Actions tab in your remote repo on GitHub to check the progress of the deployment of your site. If your site did not build successfully, you can go through the logs to try to diagnose the problem.\nI added a ‚ÄúPush to GitLab‚Äù step to my gh-pages.yml to make GitHub Actions push my remote gh-pages to GitLab so that my site is kept in sync on both GitHub and GitLab Pages. This required manually creating a token on GitLab and adding it to GitHub, which I accomplished using the GitHub CLI as shown in Example¬†8.\n\nExample 8 ¬†\ngh secret set GITLAB_AUTH_TOKEN\n\nAfter the setup described above, I now have two options for publishing my Quarto site: quarto publish and 2) git push. In addition to GitHub and GitLab Pages, both of these options automatically update my site on Netlify via N2.\nTo also automatically update my site on Quarto Pub, I created a separate GitHub Actions workflow by adding another YAML file to the .github/workflows directory in my repo. Example¬†9 shows my quarto-pub.yml file and the shell code that can be used to obtain it.\n\nExample 9 ¬†\n\ncurlquarto-pub.yml\n\n\nmkdir -p .github/workflows\ncd .github/workflows\ncurl -O https://raw.githubusercontent.com/maptv/maptv.github.io/main/.github/workflows/gh-pages.yml\n\n\n\n\n\n\n\nMy quarto-pub.yml file is based on Q2, but it runs upon completion of the pages-build-deployment workflow instead of a push to main. I changed the workflow trigger so that it runs after my GitHub Pages site is built, regardless of whether I triggered the build by running quarto publish gh-pages or pushing to main.\nFigure¬†3 summarizes all of the steps that occur during my Quarto publishing workflow. This workflow allows me to publish my site on four web hosts every time I run quarto publish gh-pages (G2) or git push (G3)!\n\n\n\n\n\n\nflowchart LR\n    A[local&lt;br/&gt;main]-.G2.-&gt;B[local&lt;br/&gt;gh-pages]-.G2.-&gt;C[GitHub&lt;br/&gt;gh-pages]\n    B[local&lt;br/&gt;gh-pages]-.G2.-&gt;D[GitLab&lt;br/&gt;gh-pages]\n    A[local&lt;br/&gt;main]-.G3.-&gt;F[GitHub&lt;br/&gt;main]-.G3.-&gt;C[GitHub&lt;br/&gt;gh-pages]-.G3.-&gt;D[GitLab&lt;br/&gt;gh-pages]\n    A[local&lt;br/&gt;main]-.G3.-&gt;G[GitLab&lt;br/&gt;main]\n    C[GitHub&lt;br/&gt;gh-pages]-.N2.-&gt;E[Netlify]\n    C[GitHub&lt;br/&gt;gh-pages]-.Q2.-&gt;H[Quarto&lt;br/&gt;Pub]\n\n\n\n\nFigure¬†3: Quarto publishing workflow\n\n\n\n\n\nSo far I have only noticed one difference between the four web hosts I use for my site: GitHub Pages is the only web host that properly differentiates between internal and external links. All of the other web hosts include the external link icon on all links regardless of whether they target my site or an external site.\nI tried unsuccessfully to solve this issue by setting the link-external-filter property to a regular expression. If you notice a problem with the link-external-icon feature on other web hosts, I suggest switching to GitHub Pages.",
    "crumbs": [
      "Software",
      "Quarto"
    ]
  },
  {
    "objectID": "quarto/index.html#sec-cust",
    "href": "quarto/index.html#sec-cust",
    "title": "Quarto",
    "section": "Customizing Quarto sites",
    "text": "Customizing Quarto sites\n\nSite navigation\nOnce your site is built and published, you can make it easier to navigate with a customized navigation bar (navbar) and sidebar, as described in the Quarto documentation. Check out the _quarto.yml files for my site and the Quarto documentation site to see how the navigation components are set up.\nIn my navbar, I added toggle buttons for reader mode and dark mode. The names of the other icons on right side of the navbar are included in the sidebar.\n\n\nHTML blocks\nMy navbar also provides the current date and time in Dec ordinal (deco) format, which counts the years since 1 BC and the days since March 1. Dec is a calendar and time system that I created and use throughout my blog.\nTo add a custom timestamp to the navbar, I put a &lt;script&gt; element that runs time.js in an HTML block in every Quarto markdown (.qmd) file, as shown in Example¬†10. Mine √áetinkaya-Rundel wrote about HTML blocks as part of her A Quarto tip a day project.\n\nExample 10 ¬†\n\n*.qmdtime.js\n\n\n```{=html}\n&lt;script src=\"time.js\"&gt;&lt;/script&gt;\n```\n\n\n\n\n\n\n\nHTML blocks are useful for running JavaScript code in the context of a single page on your site without affecting the others. I also use HTML blocks to add a &lt;style&gt; element to my .qmd files as a last ditch effort to fine tune the style of my site.\nBefore I resort to the &lt;style&gt; element approach, I try writing CSS in my style.css, light.css, and dark.css files. So far, this approach has been sufficient to make any styling changes I want, but if it every fails, I can use JavaScript to override the default styling provided by Quarto by modifying style attributes, which have the highest specificity in CSS.\n\n\nPost-render script\nI wanted to my blog‚Äôs listing page to show dates in the same format as the navbar timestamp. To accomplish this, I used a post-render script written in the Python programming language.\nPre- and post-render scripts are set as project options in the _quarto.yml file in the root of your Quarto project. Example¬†11 shows the date.py post-render script and how this script is referenced in _quarto.yml.\n\nExample 11 ¬†\n\n_quarto.ymldate.py\n\n\n\n\n\n\n\n\n\n\nNormally, formatting dates in Quarto is as easy as setting the date-format YAML property. In my case it was more difficult, because I wanted dates based on Dec, the calendar and time system I created, instead of the ubiquitous Gregorian calendar.\nTo facilitate the calculations in date.py, I set date-format to x in my _metadata.yml file so all of the dates would be in millisecond UNIX time and I would not have to deal with Gregorian calendar date formats or time zones. After all of the dates are generated, my date.py script traverses the HTML in the output directory using Beautiful Soup and converts millisecond UNIX time dates into Dec dates (year+day).\n\n\nPandoc filter\nIn addition to customizing dates on the listing page of my blog, I wanted to customize the date format in every blog post. To complete this task, I used a Lua script as a Pandoc filter.\nPandoc is a program that converts documents into practically any format. The ‚Äúpan‚Äù in Pandoc comes from the Ancient Greek word for all. Pandoc strives to convert all document formats, just like Pangea contained all the land and a panacea solves all problems.\nQuarto uses Pandoc to convert markdown files into target format(s) like html or pdf. If the source files contain executable code, Quarto executes the code via one of two computational engines: Jupyter or Knitr. Figure¬†4 shows the Quarto workflow.\n\n\n\n\n\n\nflowchart LR\n   A[qmd&lt;br/&gt;ipynb]-.Knitr&lt;br/&gt;Jupyter.-&gt;B((md))-.Pandoc with&lt;br/&gt;Lua filters.-&gt;C(html&lt;br/&gt;pdf&lt;br/&gt;docx&lt;br/&gt;etc.)\n\n\n\n\nFigure¬†4: Quarto rendering workflow\n\n\n\n\n\nMine √áetinkaya-Rundel‚Äôs Quarto tip series includes a similar Quarto workflow mermaid diagram and her ‚ÄúHello, Quarto!‚Äù rstudio::conf(2022) keynote with Julia Stewart Lowndes contains truly beautiful Quarto workflow images by Allison Horst: 1, 2, 3, and 4.\nQuarto controls Pandoc, Jupyter, and Knitr in two ways: 1) with arguments passed to the Quarto CLI commands and 2) with YAML key-value pairs in .qmd, .ipynb, or .yml files.\nExample¬†12 shows how I set up every qmd file to generate the current date in millisecond UNIX time and designated date.lua as a Pandoc filter. Unlike post-render scripts, Pandoc filters are executed during the creation of the output files.\n\nExample 12 ¬†\n\n*.qmddate.lua\n\n\ndate: now\ndate-format: x\nfilters: date.lua\n\n\n\n\n\n\n\nAll three of the customizations I described above convert millisecond UNIX time into a custom date format, but you can adapt these approaches to make all sorts of edits to your Quarto site. HTML blocks can run JavaScript which excels at making content dynamic and interactive, pre- and post-render scripts can be in any programming language, while Pandoc filters are written in Lua and modify output during rendering.\nComing up next on my blog is a post that Observable graphics. Get ready for an animated and interactive data visualization extravaganza!",
    "crumbs": [
      "Software",
      "Quarto"
    ]
  },
  {
    "objectID": "quarto/filter/index.html",
    "href": "quarto/filter/index.html",
    "title": "Quarto",
    "section": "",
    "text": "This blog post is the most important post in my Tools blog post series, as indicated by its centrality in Figure¬†1, node of the netw focuses on the use of Quarto to author and publish digital content. As the third post in my , which is summarized by Figure¬†1, and depends on the. is my blog post on Quarto. The subsequent posts in the series demonstrate how to use Observable, Jupyter, and Knitr to execute code in Quarto documents.\n\n\n\n\n\n\n\nflowchart TB\n   A[Git]--&gt;B[VSCode]--&gt;C[Quarto]\n   C--&gt;D[Observable]\n   C--&gt;E[Jupyter]\n   C--&gt;F[Knitr]\n   click A \"../git\"\n   click B \"../vscode\"\n   click C \"../quarto\"\n   click D \"../observable\"\n   click E \"../jupyter\"\n   click F \"../knitr\"\n   style C stroke:#99f,stroke-width:5px\n\n\n\n\nFigure¬†1: Tools series navigation chart\n\n\n\n\nIf you do not have such a repo, you can create one by following along with the previous post in my tools blog post series, which is shown in Figure¬†1.",
    "crumbs": [
      "Software",
      "Quarto",
      "Filter"
    ]
  },
  {
    "objectID": "quarto/filter/index.html#tldr",
    "href": "quarto/filter/index.html#tldr",
    "title": "Quarto",
    "section": "",
    "text": "This blog post is the most important post in my Tools blog post series, as indicated by its centrality in Figure¬†1, node of the netw focuses on the use of Quarto to author and publish digital content. As the third post in my , which is summarized by Figure¬†1, and depends on the. is my blog post on Quarto. The subsequent posts in the series demonstrate how to use Observable, Jupyter, and Knitr to execute code in Quarto documents.\n\n\n\n\n\n\n\nflowchart TB\n   A[Git]--&gt;B[VSCode]--&gt;C[Quarto]\n   C--&gt;D[Observable]\n   C--&gt;E[Jupyter]\n   C--&gt;F[Knitr]\n   click A \"../git\"\n   click B \"../vscode\"\n   click C \"../quarto\"\n   click D \"../observable\"\n   click E \"../jupyter\"\n   click F \"../knitr\"\n   style C stroke:#99f,stroke-width:5px\n\n\n\n\nFigure¬†1: Tools series navigation chart\n\n\n\n\nIf you do not have such a repo, you can create one by following along with the previous post in my tools blog post series, which is shown in Figure¬†1.",
    "crumbs": [
      "Software",
      "Quarto",
      "Filter"
    ]
  },
  {
    "objectID": "quarto/filter/index.html#sec-intro",
    "href": "quarto/filter/index.html#sec-intro",
    "title": "Quarto",
    "section": "Introduction",
    "text": "Introduction\nQuarto is an open-source software system for turning plain-text source files into outputs like articles, books, blogs, dashboards, presentations, reports, and websites. Announced on 2022+149 by Posit CEO JJ Allaire, Quarto is already taking the worldüåêby storm‚õàÔ∏è!\nI strongly believe that everyone, regardless of their background and current technical skill level, can learn and benefit from Quarto. Getting started with Quarto is easy thanks to its excellent documentation and vibrant community of enthusiastic users and developers.\nRather than repeat the basic information already available elsewhere, I will share some advanced techniques along with the fundamental knowledge needed to understand how they work. The topics I cover are very technical, but my goal is to make the content on my blog as accessible as possible.\nThe first topic I will delve into is creating and publishing a website with Quarto. To follow the Quarto documentation on creating a website, you will need Visual Studio Code (VSCode), VSCodium, RStudio, or a terminal.",
    "crumbs": [
      "Software",
      "Quarto",
      "Filter"
    ]
  },
  {
    "objectID": "quarto/filter/index.html#sec-pub",
    "href": "quarto/filter/index.html#sec-pub",
    "title": "Quarto",
    "section": "Publishing Quarto sites",
    "text": "Publishing Quarto sites\n\nInstalling tools\nIf you use macOS, Linux, or the Windows Subsystem for Linux (WSL), you can install all of the aforementioned tools with the Homebrew package manager. To install everything you will need to follow along with this blog post, you can first install Homebrew and then run brew bundle in a directory that contains the Brewfile shown in Example¬†1.\n\nExample 1 ¬†\n\n\nBrewfile\n\nbrew \"gh\"\nbrew \"git\"\nbrew \"glab\"\ncask \"github\"\ncask \"quarto\"\ncask \"rstudio\"\ncask \"vscodium\"\ncask \"visual-studio-code\"\nvscode \"quarto.quarto\"\nvscode \"REditorSupport.r\"\n\n\nUsing a package manager like Homebrew to install all the requirements with a single shell command like brew bundle is the fastest and easiest way to get ready to follow along with this blog post. If you are curious about how I set up my computer, you can take a look at my Brewfile and other configuration files in my setup repository (repo) on GitHub and GitLab.\nApart from RStudio, VSCode, and VSCodium, the Brewfile in Example¬†1 will install the Git version control system, the GitHub and GitLab command line interfaces (CLIs), and GitHub Desktop, a Git Graphical User Interface (GUI). For more information on Git, a tool used by 93% of software developers worldwide according to survey results published by StackOverflow on 2022+314, take a look at the ‚ÄúGitHub for supporting, reusing, contributing, and failing safely‚Äù post by Allison Horst and Julie Lowndes on the Openscapes blog.\nAs an alternative to installing tools on your computer, you can use the web interface provided by GitHub Codespaces. To set up a Codespace, you can remove the lines that start with cask from the Brewfile provided in Example¬†1 and add the file to a repo called dotfiles and along with a setup.sh file like the one shown in Example¬†2.\n\nExample 2 ¬†\n\n\nsetup.sh\n\necho | /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n(echo; echo 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"') &gt;&gt; /home/codespace/.profile\neval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"\nbrew bundle\n\n\n\n\nPublishing overview\nOnce you are done setting up your computer or Codespace, you create a Quarto website template and make your site publicly available on the internet using one of the many available publishing services. To explore and assess different publishing workflows and free website hosting options, I set up my personal website on four different web hosts: Quarto Pub, Netlify, GitHub Pages, and GitLab Pages.\nThere are so many different ways to publish a Quarto site that I decided to come up with a naming system for Quarto publishing methods. The naming system derives a code for each publishing method from the numbered lists in the Quarto publishing documentation. For example, I refer to the two methods to publish to Quarto Pub as Q1 and Q2:\nTable¬†1 uses this naming system in its Code column to identify the publishing methods I discuss in this blog post. Each publishing method targets a particular web Host, Renders content locally or on a remote server, and deploys sites using either the quarto publish or the git push shell Command.\n\n\n\n\n\n\nCode\nHost\nRender\nCommand\n\n\n\n\nG1\nGitHub\nLocal\npush\n\n\nG2\nGitHub\nLocal\npublish\n\n\nG3\nGitHub\nRemote\npush\n\n\nN1\nNetlify\nLocal\npublish\n\n\nN2\nNetlify\nLocal\npush\n\n\nN3\nNetlify\nRemote\npush\n\n\nQ1\nQuarto\nLocal\npublish\n\n\nQ2\nQuarto\nRemote\npush\n\n\n\n\n\nTable¬†1: Quarto website publishing methods\n\n\n\n\n\nGit workflow\nThe first publishing method I tried for my personal site was G1, which requires the use of Git to push all website content to a Git provider like GitHub or GitLab. After I set up GitHub Pages and GitLab Pages, I could update my website on both of these web hosts just by going through the standard Git workflow shown in Figure¬†2.\n\n\n\n\n\n\nflowchart LR\n   A[working&lt;br/&gt;directory]-.git&lt;br/&gt;add.-&gt;B{{staging&lt;br/&gt;area}}-.git&lt;br/&gt;commit.-&gt;C([local&lt;br/&gt;repo])-.git&lt;br/&gt;push.-&gt;D(remote&lt;br/&gt;repo)\n\n\n\n\nFigure¬†2: Git workflow\n\n\n\n\n\nTo make it easier to make incremental changes to my website and frequently release new content, I combined all of the git shell commands in Figure¬†2 into a shell alias. You can add shell aliases to a shell configuration file like .bashrc or .zshrc on your computer to shorten commands or combine any sequence of commands into one step.\nThe aacmp alias in the .zshrc file in my setup repo allows me to enter a free-form commit message directly on the command line without quotes, e.g.¬†qp edit first blog. If you decide to try my aacmp alias, please exercise extreme caution as any un-escaped or un-quoted metacharacters may yield surprising effects instead of being included verbatim in the commit message. For example, qp * will list the contents of the current directory in the commit message in place of the asterisk!\nAn alternative to a shell alias that combines git commands is a keyboard shortcut in Git-enabled GUI. Example¬†3 shows two files, tasks.json and update.sh, that we can use to set up VSCode, VSCodium, and GitHub Codespaces to go through the Git workflow whenever we press Ctrl+Shift+B on Linux/Windows or ‚åò+Shift+B on Mac (mnemonic: B is for Build).\n\nExample 3 ¬†\n\nupdate.shtasks.json\n\n\n\n\n\n\n\n\n\n\nThis mechanism is called Tasks and is used to automate software build tasks, which can include any steps required to build and publish a website. Importantly, the Tasks mechanism requires that the tasks.json file be added to the .vscode directory and that we enable execution of the update.sh script by running chmod +x update.sh in our project root.\nShell aliases and keyboard shortcuts can greatly facilitate the Git workflow which is essential not only for G1, but also G3, N3, and Q2. Unlike these other publishing methods, G1 leads to messy commits that contain changes to both source and output files.\n\n\nquarto publish\nTo have cleaner commits, I switched from G1 to G2 by adding quarto publish to my publishing workflow. With G2, I can track changes to my source files on my main branch and publish my output files to GitHub Pages and GitLab Pages from my gh-pages branch.\nQ1, N1, and G2 all use quarto publish to render website content locally and then deploy it in one fell swoop. If you do not plan to use the Git version control system or the advanced features offered by GitHub, GitLab, or Netlify, then I recommend deploying your site to Quarto Pub by running quarto publish quarto-pub (Q1 in Table¬†1).\nLike Q1, N1 is a deployment method that does not require Git and makes it possible to deploy our site with a single shell command: quarto publish netlify. N1 provides access to the advanced web hosting features offered by Netlify and can even render content as long as code execution is frozen.\nTo deploy my site to GitHub Pages, GitLab Pages, and Netlify, I combined G2 and N2. When I run quarto publish gh-pages, Quarto renders my site into my output directory, copies the output directory contents to the gh-pages branch of my local repo, and then commits and pushes the changes to my remote repos on GitHub and GitLab, which triggers Netlify to build my site from the gh-pages branch.\nTo summarize the Quarto publishing methods I discussed so far, Q1 and N1 are easy to configure and use, N2 automatically builds sites from Git repos, G1 is not recommended because it pollutes commits with output file changes, and G2 is more difficult to set up and use but provides clean commits and a nice separation of source and output files.\n\n\nGitHub Actions\nAll of the publishing methods I have discussed so far require us to generate output files locally by rendering our source files. In contrast, Q2, G3, and N3 make it possible to skip local rendering in favor of relying on GitHub Actions to handle all of the necessary steps.\nG3 is noteworthy, because it offers the same convenience of G1 but without messy commits that mix changes to source and output files. An added bonus of G3 is that rendering with GitHub Actions provides a reproducible computational environment that is not dependent on what you have installed on your computer.\nInstead of using GitHub Actions, I could have used GitLab CI/CD to build my site. I decided not to go down this route because the Quarto dev team has many GitHub Actions workflows available but currently no official support for GitLab CI/CD.\nBefore trying to use GitHub Actions or any other continuous integration systems in your publishing workflow, I suggest getting used to working with quarto publish (Q1, G2, or N1). You can always set up other publishing methods later without sacrificing anything, because all of the publishing methods except G1 can be combined together.\nIn Section¬†4, I will walk through the setup of both G2 and G3 to provide the option of rendering locally by running quarto publish or rendering remotely with GitHub Actions by pushing to the main branch. Along the way, I will share many practical tips and general advice that you can apply to any project.",
    "crumbs": [
      "Software",
      "Quarto",
      "Filter"
    ]
  },
  {
    "objectID": "quarto/filter/index.html#sec-set",
    "href": "quarto/filter/index.html#sec-set",
    "title": "Quarto",
    "section": "Publishing setup",
    "text": "Publishing setup\n\nRepo setup\nBefore you can use GitHub Actions to publish your site, you will need a GitHub, an SSH key, and a repo like maptv.github.io that has a default branch called main and another branch which must be called gh-pages. If you want to publish on GitLab Pages, you will also need a GitLab account and an analogous GitLab repo like maptv.gitlab.io.\nYou can create the repo and the gh-pages branch using the web interface of https://github.com or https://gitlab.com in your browser, but the best way to start a new project is using the CLI for GitHub or GitLab in your terminal. First, run gh auth login or glab auth login and follow the prompts to authenticate via your web browser or with an authentication token.\nThe GitHub CLI allows you to add an SSH key to your account during or after authentication. The GitLab CLI does not handle SSH keys during authentication, but has a similar command for adding an SSH key to your GitLab account.\nAfter authentication and SSH key setup, you can run the code in either of the code chunks in Example¬†4 to set up your local and remote repos and create a Quarto website project in the local repo. You can create shell alias that combine all of the repo creation steps like I did in my .zshrc.\n\nExample 4 ¬†\n\nGitHubGitLab\n\n\ncd # start in home directory\nmkdir -p USERNAME\ncd USERNAME\ngh repo create USERNAME.github.io --add-readme --clone --public\ncd SITENAME\nquarto create project website USERNAME.github.io\n\n\ncd # start in home directory\nmkdir -p USERNAME\ncd USERNAME\nglab repo create USERNAME.gitlab.io --readme --defaultBranch main --public\ncd SITENAME\ngit pull origin main\ngit branch --set-upstream-to=origin/main main\nquarto create project website USERNAME.gitlab.io\n\n\n\n\nTo make it easier to maintain my site on both GitHub and GitLab Pages, I set up my local repo cloned to have two origin remote URLs using the code as shown in Example¬†5. Now, running quarto publish or git push in my local repo, updates my content on both GitHub and GitLab.\n\nExample 5 ¬†\ngit remote add lab git@gitlab.com:maptv/maptv.gitlab.io\ngit remote add hub git@github.com:maptv/maptv.github.io\ngit remote set-url --add origin $(git remote get-url lab)\n\nIf you want to have your website hosted on GitHub Pages, you will need to set gh-pages as your source branch in your repo settings. For GitLab Pages, you will need to add a .gitlab-ci.yml file to your repo and update your _quarto.yml file as shown in Example¬†6 to include .gitlab-ci.yml as a resource in your output directory.\n\nExample 6 ¬†\n\n.gitlab-ci.yml_quarto.yml\n\n\n# https://docs.gitlab.com/ee/user/project/pages/introduction.html#customize-the-default-folder\npages:\n  script: echo \"The site will be deployed to $CI_PAGES_URL\"\n  artifacts:\n    paths:\n      - \".\"\n  publish: \".\"\n  only:\n    - gh-pages\n\n\nauthor:\n  - name: Martin Laptev\n    url: https://maptv.github.io\n\n\n\n\nBy default, GitLab Pages includes a random hash in site URLs. To shorten the URL of my GitLab Pages site to &lt;maptv.gitlab.io&gt;, I had to uncheck Use unique domain under Deploy &gt; Pages in the GitLab sidebar.\nAt this point, we have completed G2 setup and you should be able to run quarto publish gh-pages from your main branch to render your site and deploy it to GitHub and/or GitLab Pages. Deploying with quarto publish at least once is a prerequisite for setting up any of the publishing methods that rely on GitHub Actions, because quarto publish creates a _publish.yml file in the root of your project that is required for publishing via GitHub Actions.\n\n\nGitHub Actions\nIn addition to the steps described above, G3 setup requires that we create a .github/workflows directory and add a YAML file to that directory. Example¬†7 contains the gh-pages.yml file I use for my own site and the shell code that can used to obtain this file.\n\nExample 7 ¬†\n\ncurlgh-pages.yml\n\n\nmkdir -p .github/workflows\ncd .github/workflows\ncurl -O https://raw.githubusercontent.com/maptv/maptv.github.io/main/.github/workflows/gh-pages.yml\n\n\non:\n  workflow_dispatch:\n  push:\n    branches: [main]\n\nname: Quarto Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v4\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n        with:\n          version: '1.4.489'\n          tinytex: true\n\n      - name: Install R\n        uses: r-lib/actions/setup-r@v2\n        with:\n          r-version: '4.2.0'\n\n      - name: Install R Dependencies\n        uses: r-lib/actions/setup-renv@v2\n        with:\n          cache-version: 1\n\n      - name: Install Python and Dependencies\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.10'\n          cache: 'pip'\n      - run: pip install jupyter\n      - run: pip install -r requirements.txt\n\n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Push To GitLab\n        env:\n          token: ${{ secrets.GITLAB_AUTH_TOKEN }}\n        run: |\n          echo Starting to push gh-pages branch to GitLab\n          git config user.name \"maptv\"\n          git config user.email \"129316885+maptv@users.noreply.github.com\"\n          git remote set-url origin \"https://oauth2:${token}@gitlab.com/maptv/maptv.gitlab.io\"\n          git push origin gh-pages\n\n\n\n\nThe gh-pages.yml file in Example¬†7 installs Quarto, the R and Python programming languages, and the packages in the renv.lock and requirements.txt files. If you do not need R and/or Python, you can remove any unnecessary portions of the file.\nTo modify the Python files that are installed by GitHub Actions, you can edit the requirements.txt file in your repo. To update your renv.lock file so that it includes all of the R packages your site requires, run renv::snapshot() in an R session or Rscript -e renv::snapshot() in a shell.\nAfter pushing the gh-pages.yml file, you can visit the Actions tab in your remote repo on GitHub to check the progress of the deployment of your site. If your site did not build successfully, you can go through the logs to try to diagnose the problem.\nI added a ‚ÄúPush to GitLab‚Äù step to my gh-pages.yml to make GitHub Actions push my remote gh-pages to GitLab so that my site is kept in sync on both GitHub and GitLab Pages. This required manually creating a token on GitLab and adding it to GitHub, which I accomplished using the GitHub CLI as shown in Example¬†8.\n\nExample 8 ¬†\ngh secret set GITLAB_AUTH_TOKEN\n\nAfter the setup described above, I now have two options for publishing my Quarto site: quarto publish and 2) git push. In addition to GitHub and GitLab Pages, both of these options automatically update my site on Netlify via N2.\nTo also automatically update my site on Quarto Pub, I created a separate GitHub Actions workflow by adding another YAML file to the .github/workflows directory in my repo. Example¬†9 shows my quarto-pub.yml file and the shell code that can be used to obtain it.\n\nExample 9 ¬†\n\ncurlquarto-pub.yml\n\n\nmkdir -p .github/workflows\ncd .github/workflows\ncurl -O https://raw.githubusercontent.com/maptv/maptv.github.io/main/.github/workflows/gh-pages.yml\n\n\non:\n  workflow_run:\n    workflows: [pages-build-deployment]\n    types: [completed]\n\nname: Update Quarto Pub\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out main repository\n        uses: actions/checkout@v4\n\n      - name: Check out _site\n        uses: actions/checkout@v4\n        with:\n          ref: gh-pages\n          path: _site\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n\n      - name: Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: quarto-pub\n          render: false\n          QUARTO_PUB_AUTH_TOKEN: ${{ secrets.QUARTO_PUB_AUTH_TOKEN }}\n          GITHUB_USERNAME: maptv\n\n\n\n\nMy quarto-pub.yml file is based on Q2, but it runs upon completion of the pages-build-deployment workflow instead of a push to main. I changed the workflow trigger so that it runs after my GitHub Pages site is built, regardless of whether I triggered the build by running quarto publish gh-pages or pushing to main.\nFigure¬†3 summarizes all of the steps that occur during my Quarto publishing workflow. This workflow allows me to publish my site on four web hosts every time I run quarto publish gh-pages (G2) or git push (G3)!\n\n\n\n\n\n\nflowchart LR\n    A[local&lt;br/&gt;main]-.G2.-&gt;B[local&lt;br/&gt;gh-pages]-.G2.-&gt;C[GitHub&lt;br/&gt;gh-pages]\n    B[local&lt;br/&gt;gh-pages]-.G2.-&gt;D[GitLab&lt;br/&gt;gh-pages]\n    A[local&lt;br/&gt;main]-.G3.-&gt;F[GitHub&lt;br/&gt;main]-.G3.-&gt;C[GitHub&lt;br/&gt;gh-pages]-.G3.-&gt;D[GitLab&lt;br/&gt;gh-pages]\n    A[local&lt;br/&gt;main]-.G3.-&gt;G[GitLab&lt;br/&gt;main]\n    C[GitHub&lt;br/&gt;gh-pages]-.N2.-&gt;E[Netlify]\n    C[GitHub&lt;br/&gt;gh-pages]-.Q2.-&gt;H[Quarto&lt;br/&gt;Pub]\n\n\n\n\nFigure¬†3: Quarto publishing workflow\n\n\n\n\n\nSo far I have only noticed one difference between the four web hosts I use for my site: GitHub Pages is the only web host that properly differentiates between internal and external links. All of the other web hosts include the external link icon on all links regardless of whether they target my site or an external site.\nI tried unsuccessfully to solve this issue by setting the link-external-filter property to a regular expression. If you notice a problem with the link-external-icon feature on other web hosts, I suggest switching to GitHub Pages.",
    "crumbs": [
      "Software",
      "Quarto",
      "Filter"
    ]
  },
  {
    "objectID": "quarto/filter/index.html#sec-cust",
    "href": "quarto/filter/index.html#sec-cust",
    "title": "Quarto",
    "section": "Customizing Quarto sites",
    "text": "Customizing Quarto sites\n\nSite navigation\nOnce your site is built and published, you can make it easier to navigate with a customized navigation bar (navbar) and sidebar, as described in the Quarto documentation. Check out the _quarto.yml files for my site and the Quarto documentation site to see how the navigation components are set up.\nIn my navbar, I added toggle buttons for reader mode and dark mode. The names of the other icons on right side of the navbar are included in the sidebar.\n\n\nHTML blocks\nMy navbar also provides the current date and time in Dec ordinal (deco) format, which counts the years since 1 BC and the days since March 1. Dec is a calendar and time system that I created and use throughout my blog.\nTo add a custom timestamp to the navbar, I put a &lt;script&gt; element that runs time.js in an HTML block in every Quarto markdown (.qmd) file, as shown in Example¬†10. Mine √áetinkaya-Rundel wrote about HTML blocks as part of her A Quarto tip a day project.\n\nExample 10 ¬†\n\n*.qmdtime.js\n\n\n```{=html}\n&lt;script src=\"time.js\"&gt;&lt;/script&gt;\n```\n\n\n\n\n\n\n\nHTML blocks are useful for running JavaScript code in the context of a single page on your site without affecting the others. I also use HTML blocks to add a &lt;style&gt; element to my .qmd files as a last ditch effort to fine tune the style of my site.\nBefore I resort to the &lt;style&gt; element approach, I try writing CSS in my style.css, light.css, and dark.css files. So far, this approach has been sufficient to make any styling changes I want, but if it every fails, I can use JavaScript to override the default styling provided by Quarto by modifying style attributes, which have the highest specificity in CSS.\n\n\nPost-render script\nI wanted to my blog‚Äôs listing page to show dates in the same format as the navbar timestamp. To accomplish this, I used a post-render script written in the Python programming language.\nPre- and post-render scripts are set as project options in the _quarto.yml file in the root of your Quarto project. Example¬†11 shows the date.py post-render script and how this script is referenced in _quarto.yml.\n\nExample 11 ¬†\n\n_quarto.ymldate.py\n\n\nauthor:\n  - name: Martin Laptev\n    url: https://maptv.github.io\ndate-format: x\n\n\n# https://howardhinnant.github.io/date_algorithms.html#days_from_civil\nimport bs4\n\ndef unix2doty(ms):\n    dote = ms / 86400000 + 719468\n    cykl = (\n        dote if dote &gt;= 0\n        else dote - 146096\n    ) // 146097\n    dotc = dote - cykl * 146097\n    yotc = (dotc\n        - dotc // 1460\n        + dotc // 36524\n        - dotc // 146096\n    ) // 365\n    return [\n        int(yotc + cykl * 400),\n        dotc - (yotc * 365\n            + yotc // 4\n            - yotc // 100\n        )\n    ]\n\nwith open(\"_site/list/index.html\") as infile:\n    txt = infile.read()\n    soup = bs4.BeautifulSoup(txt, features=\"html.parser\")\nfor div in soup.find_all(\"div\", {\"class\": \"card-file-modified\"}):\n    if \"+\" not in div.text:\n        y, d = unix2doty(int(div.text))\n        div.string.replace_with(f\"{y:&gt;04}+{d.__floor__():&gt;03}\")\nfor div in soup.find_all(\"div\", {\"class\": \"listing-reading-time\"}):\n    if \"min\" in div.text:\n        div.string.replace_with(f\"{(int(div.text.split()[0]) / 1.44).__floor__()} milliday\")\nwith open(\"_site/list/index.html\", \"w\") as outfile:\n    outfile.write(str(soup))\n\n\n\n\nNormally, formatting dates in Quarto is as easy as setting the date-format YAML property. In my case it was more difficult, because I wanted dates based on Dec, the calendar and time system I created, instead of the ubiquitous Gregorian calendar.\nTo facilitate the calculations in date.py, I set date-format to x in my _metadata.yml file so all of the dates would be in millisecond UNIX time and I would not have to deal with Gregorian calendar date formats or time zones. After all of the dates are generated, my date.py script traverses the HTML in the output directory using Beautiful Soup and converts millisecond UNIX time dates into Dec dates (year+day).\n\n\nPandoc filter\nIn addition to customizing dates on the listing page of my blog, I wanted to customize the date format in every blog post. To complete this task, I used a Lua script as a Pandoc filter.\nPandoc is a program that converts documents into practically any format. The ‚Äúpan‚Äù in Pandoc comes from the Ancient Greek word for all. Pandoc strives to convert all document formats, just like Pangea contained all the land and a panacea solves all problems.\nQuarto uses Pandoc to convert markdown files into target format(s) like html or pdf. If the source files contain executable code, Quarto executes the code via one of two computational engines: Jupyter or Knitr. Figure¬†4 shows the Quarto workflow.\n\n\n\n\n\n\nflowchart LR\n   A[qmd&lt;br/&gt;ipynb]-.Knitr&lt;br/&gt;Jupyter.-&gt;B((md))-.Pandoc with&lt;br/&gt;Lua filters.-&gt;C(html&lt;br/&gt;pdf&lt;br/&gt;docx&lt;br/&gt;etc.)\n\n\n\n\nFigure¬†4: Quarto rendering workflow\n\n\n\n\n\nMine √áetinkaya-Rundel‚Äôs Quarto tip series includes a similar Quarto workflow mermaid diagram and her ‚ÄúHello, Quarto!‚Äù rstudio::conf(2022) keynote with Julia Stewart Lowndes contains truly beautiful Quarto workflow images by Allison Horst: 1, 2, 3, and 4.\nQuarto controls Pandoc, Jupyter, and Knitr in two ways: 1) with arguments passed to the Quarto CLI commands and 2) with YAML key-value pairs in .qmd, .ipynb, or .yml files.\nExample¬†12 shows how I set up every qmd file to generate the current date in millisecond UNIX time and designated date.lua as a Pandoc filter. Unlike post-render scripts, Pandoc filters are executed during the creation of the output files.\n\nExample 12 ¬†\n\n*.qmddate.lua\n\n\ndate: now\ndate-format: x\nfilters: date.lua\n\n\n-- https://howardhinnant.github.io/date_algorithms.html#days_from_civil\nfunction unix2deco(ms)\n  local dote = ms / 86400000 + 719468\n  local cykl = (\n    dote &gt;= 0 and dote\n    or dote - 146096\n  ) // 146097\n  local dotc = dote - cykl * 146097\n  local yotc = (\n    dotc - dotc // 1460\n    + dotc // 36524\n    - dotc // 146096\n  ) // 365\n  return string.format(\n    \"%s+%03d\",\n    math.floor(yotc + cykl * 400),\n    math.floor(dotc - (yotc * 365\n      + yotc // 4\n      - yotc // 100)))\nend\n\nlocal function to_decalendar(date)\n  local date = pandoc.utils.stringify(date)\n  local unix = date:match(\"(%d+)\")\n  return date:gsub(unix, unix2deco(unix))\nend\n\nfunction Meta(m)\n  m.date = to_decalendar(m.date)\n  return m\nend\n\n\n\n\nAll three of the customizations I described above convert millisecond UNIX time into a custom date format, but you can adapt these approaches to make all sorts of edits to your Quarto site. HTML blocks can run JavaScript which excels at making content dynamic and interactive, pre- and post-render scripts can be in any programming language, while Pandoc filters are written in Lua and modify output during rendering.\nComing up next on my blog is a post that Observable graphics. Get ready for an animated and interactive data visualization extravaganza!",
    "crumbs": [
      "Software",
      "Quarto",
      "Filter"
    ]
  },
  {
    "objectID": "observable/index.html",
    "href": "observable/index.html",
    "title": "Observable",
    "section": "",
    "text": "The goal of this blog post, the fourth in my Tools blog post series, is to set up the Visual Studio Code (VSCode) source-code editor to run in the remote development environments provided by the Codespaces and GitPod computing platforms. To accomplish this goal, we will use VSCode to edit a setup script and configuration files in a Git repository (repo) named dotfiles.\n\n\n\n\n\n\n\nflowchart TB\n   A[Git]--&gt;B[VSCode]--&gt;C[Quarto]\n   C--&gt;D[Observable]\n   C--&gt;E[Jupyter]\n   C--&gt;F[Knitr]\n   click A \"../git\"\n   click B \"../vscode\"\n   click C \"../quarto\"\n   click D \"../observable\"\n   click E \"../jupyter\"\n   click F \"../knitr\"\n   style D stroke:#99f,stroke-width:5px\n\n\n\n\nFigure¬†1: Tools series navigation chart",
    "crumbs": [
      "Software",
      "Observable"
    ]
  },
  {
    "objectID": "observable/index.html#tldr",
    "href": "observable/index.html#tldr",
    "title": "Observable",
    "section": "",
    "text": "The goal of this blog post, the fourth in my Tools blog post series, is to set up the Visual Studio Code (VSCode) source-code editor to run in the remote development environments provided by the Codespaces and GitPod computing platforms. To accomplish this goal, we will use VSCode to edit a setup script and configuration files in a Git repository (repo) named dotfiles.\n\n\n\n\n\n\n\nflowchart TB\n   A[Git]--&gt;B[VSCode]--&gt;C[Quarto]\n   C--&gt;D[Observable]\n   C--&gt;E[Jupyter]\n   C--&gt;F[Knitr]\n   click A \"../git\"\n   click B \"../vscode\"\n   click C \"../quarto\"\n   click D \"../observable\"\n   click E \"../jupyter\"\n   click F \"../knitr\"\n   style D stroke:#99f,stroke-width:5px\n\n\n\n\nFigure¬†1: Tools series navigation chart",
    "crumbs": [
      "Software",
      "Observable"
    ]
  },
  {
    "objectID": "observable/index.html#sec-intro",
    "href": "observable/index.html#sec-intro",
    "title": "Observable",
    "section": "Introduction",
    "text": "Introduction\nIf you do not have such a repo, you can create one by following along with the previous post in my tools blog post series, which is shown in Figure¬†1.",
    "crumbs": [
      "Software",
      "Observable"
    ]
  },
  {
    "objectID": "observable/index.html#sec-intro-doty",
    "href": "observable/index.html#sec-intro-doty",
    "title": "Observable",
    "section": "Day-of-the-year",
    "text": "Day-of-the-year\nDecalendar1 is a decimal calendarüóìÔ∏èsystem and Declock2 is a decimal timekeeping‚è≥system. Instead of months, weeks, hours, minutes, and seconds, Decalendar and Declock use a number called the day-of-the-year (doty)3. Figure¬†2 displays the current doty () as a bar chart. The integer part of the doty is the Decalendar date4 () and the fractional part is the Declock time5 ().\nThe top two bars in Figure¬†2 (Êó¨ and Êó•) show the two components of the Decalendar date (): the dek6 () and the day-of-the-dek7 (). A dek is a group of 10 days that fulfills the role of months and weeks in Decalendar. Therefore, the dek and the day-of-the-dek (dotd) in Decalendar dates are analogous to the month and day-of-the-month (dotm) in calendar dates (mm-dd) and the week and day-of-the-week (dotw) in week dates (Www-d).\nThe bottom three bars in Figure¬†2 (%, ‚Ä∞, and ‚ô´) show components of the Declock time (): cents8 (), mils9 (), and beats10 (). A cent is 1% of the day, which is a little less than a quarter hour. A mil (‚Ä∞) is a tenth of a cent, which is close to a minute and a half. A beat is 1% of a mil, which is almost as long as a second, and can be thought of as a heart‚ù§Ô∏èbeat or musicalüéµbeat with a constant rate or tempo of 69.4ÃÖ beats per minute. In addition to displaying time on clocksüï∞Ô∏èand‚åöÔ∏èwatches, beats can be used to measure durations, such as the time since this webpage was loaded: .\n\n// https://observablehq.com/@fheyen/barchart-clock\n{\nconst W = width &gt; 1250 ? width * 2 / 3 : width &gt; 1150 ? width * 3 / 4 : width &gt; 1050 ? width * 4 / 5 : width &gt; 950 ? width * 5 / 6 : width &gt; 850 ? width : width &gt; 750 ? width * 1.02 : width &gt; 650 ? width * 1.06 : width &gt; 550 ? width * 1.1 : width &gt; 450 ? width * 1.14 : width * 1.18;\n  const H = 156;\n  const barX = 1;\n  const firstBarY = 1;\n  const svg = d3\n    .create(\"svg\")\n    .attr(\"width\", W)\n    .attr(\"viewBox\", [0, 0, W, H]);\n  const xRange = [0, W - 100];\n  const scaleM = d3.scaleLinear()\n    .domain([0, 10])\n    .range(xRange);\n  const scaleCandB = d3.scaleLinear()\n    .domain([0, 100])\n    .range(xRange);\n  const scaleDek = d3.scaleLinear()\n    .domain([0, 37])\n    .range(xRange);\n  // Background bars to show where 100% lies\n  svg.selectAll('.background')\n    .data(['dek', 'dotd', 'cents', \"mils\", 'beats'])\n    .enter()\n    .append('rect')\n    .attr('class', 'background timeBar')\n    .attr('width', W-100)\n    .attr('y', (d,i)=&gt;i*30+firstBarY)\n  // Dek/Dotd\n  svg\n    .append('rect')\n    .attr('class', 'timeBar')\n    .attr('y', firstBarY)\n    .attr('width', d =&gt; scaleDek(Number(dotyDek)+Number(dotyDotd)/10+Number(barCents)/1000))\n  svg\n    .append('rect')\n    .attr('class', 'timeBarFull')\n    .attr('y', firstBarY)\n    .attr('width', d =&gt; scaleDek(dotyDek))\n  svg\n    .append('rect')\n    .attr('class', 'timeBar')\n    .attr('y', firstBarY+30)\n    .attr('width', d =&gt; scaleM(Number(dotyDotd)+Number(barCents)/100+Number(barMils)/1000))\n  svg\n    .append('rect')\n    .attr('class', 'timeBarFull')\n    .attr('y', firstBarY+30)\n    .attr('width', d =&gt; scaleM(dotyDotd))\n  svg.selectAll('.tickDek')\n    .data(d3.range(width &gt; 500 ? 4: 6, 37))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickDek')\n    .attr('x', d=&gt;scaleDek(d)+barX)\n    .attr('y', firstBarY)\n    .attr('height', d=&gt;d%(width &gt; 500 ? 2 : 3)===0? 6:4)\n  // Cent ticks\n  svg.selectAll('.tickDotd')\n    .data(d3.range(width &gt; 500 ? 1: 2, 10))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickDotd')\n    .attr('x', d=&gt;scaleM(d)+barX)\n    .attr('y', firstBarY+49)\n    .attr('height', 6)\n  svg.selectAll('.tickLabel')\n    .data(d3.range(width &gt; 500 ? 4: 6, width &gt; 500 ? 37: 35, width &gt; 500 ? 2: 3))\n    .enter()\n    .append('text')\n    .attr('class', 'tickLabel')\n    .attr('x', d=&gt;scaleDek(d)+barX+.5)\n    .attr('y', firstBarY+22)\n    .text(d=&gt;d)\n  // Cents/Mils\n  svg\n    .append('rect')\n    .attr('class', 'timeBar')\n    .attr('y', firstBarY+60)\n    .attr('width', d =&gt; scaleCandB(Number(barCents)+Number(barMils)/10+Number(barBeats)/1000))\n  svg\n    .append('rect')\n    .attr('class', 'timeBarFull')\n    .attr('y', firstBarY+60)\n    .attr('width', d =&gt; scaleCandB(barCents))\n  svg\n    .append('rect')\n    .attr('class', 'timeBar')\n    .attr('y', firstBarY+90)\n    .attr('width', d =&gt; scaleM(Number(barMils)+Number(barBeats)/100+Number(barMb)/100000))\n  svg\n    .append('rect')\n    .attr('class', 'timeBarFull')\n    .attr('y', firstBarY+90)\n    .attr('width', d =&gt; scaleM(barMils))\n  // Cent ticks\n  svg.selectAll('.tickC')\n    .data(d3.range(width &gt; 500 ? 10 : 20, 100))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickC')\n    .attr('x', d=&gt;scaleM(d/10)+barX)\n    .attr('y', firstBarY+60)\n    .attr('height', d=&gt;d%2===0? 8:5)\n  svg.selectAll('.tickC1')\n    .data(d3.range(width &gt; 500 ? 10 : 20, 100))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickC1')\n    .attr('x', d=&gt;scaleM(d/10)+barX)\n    .attr('y', d=&gt;d%2===0? firstBarY+77:firstBarY+80)\n    .attr('height', d=&gt;d%2===0? 8:5)\n  // Mil ticks\n  svg.selectAll('.tickM')\n    .data(d3.range(width &gt; 500 ? 1 : 2, 10))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickM')\n    .attr('x', d=&gt;scaleM(d)+barX)\n    .attr('y', firstBarY+90)\n    .attr('height', 6)\n  svg.selectAll('.tickM1')\n    .data(d3.range(width &gt; 500 ? 1 : 2, 10))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickM1')\n    .attr('x', d=&gt;scaleM(d)+barX)\n    .attr('y', firstBarY+92.5)\n    .attr('height', 2.5)\n  svg.selectAll('.tickLabel1')\n    .data(d3.range(width &gt; 500 ? 1 : 2, 10))\n    .enter()\n    .append('text')\n    .attr('class', 'tickLabel1')\n    .attr('x', d=&gt;scaleM(d)+barX+.5)\n    .attr('y', firstBarY+47)\n    .text(d=&gt;d)\n  svg.selectAll('.tickLabel2')\n    .data(d3.range(width &gt; 500 ? 1 : 2, 10))\n    .enter()\n    .append('text')\n    .attr('class', 'tickLabel2')\n    .attr('x', d=&gt;scaleM(d)+barX+.5)\n    .attr('y', firstBarY+112)\n    .text(d=&gt;d)\n  // Beats\n  svg\n    .append('rect')\n    .attr('class', 'timeBar')\n    .attr('y', firstBarY+120)\n    .attr('width', d =&gt; scaleCandB(Number(barBeats)+Number(barMb)/1000))\n  svg\n    .append('rect')\n    .attr('class', 'timeBarFull')\n    .attr('y', firstBarY+120)\n    .attr('width', d =&gt; scaleCandB(barBeats))\n  // Beat ticks\n  svg.selectAll('.tickB')\n    .data(d3.range(width &gt; 500 ? 10 : 20, 100))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickB')\n    .attr('x', d=&gt;scaleM(d/10)+barX)\n    .attr('y', firstBarY+120)\n    .attr('height', d=&gt;d%2===0? 9:6)\n  // Labels\n  svg.selectAll('.timeLabel')\n    .data([`${dotyDek}Êó¨`, `${dotyDotd}Êó•`, `${barCents}%`, `${barMils}‚Ä∞`, `${barBeats}‚ô´`])\n    .enter()\n    .append('text')\n    .attr('class', 'timeLabel')\n    .attr('x', barX+2)\n    .attr('y', (d,i)=&gt;i*30+firstBarY+20)\n    .text(d=&gt;d)\n  return svg.node();\n}\n\n\n\n\n\n\n\n\nFigure¬†2: Doty bar chart\n\n\n\n\n\nhtml`&lt;style&gt;\n  .tickLabel, .tickLabel1, .tickLabel2, .timeLabel {\n    fill: #000;\n    font-family: sans-serif;\n    font-size: 20px;\n    text-anchor: middle;\n  }\n  .timeLabel {\n    text-anchor: start;\n  }\n  .timeBar, .timeBarFull {\n    x: 1px;\n    height: 25px;\n    rx: 5px;\n    stroke: #aaa;\n  }\n  .timeBar {\n    fill: #e8e8e8;\n  }\n  .timeBarFull {\n    fill: #ccffff;\n  }\n  .background {\n    fill: white;\n  }\n  .tickDek, .tickDotd, .tickDotd1, .tickC, .tickC1, .tickM, .tickM1, .tickB {\n    stroke: none;\n    fill: #666;\n    width: 1px;\n  }\n&lt;/style&gt;`\n\n\n\n\n\n\nAs an alternative to doty dates, Decalendar can express dates in fractional years, which are similar to the fractional days used in doty times. Fractional year dates11 can be combined with years into one number and are useful for marking periods of 73 days in the Decalendar year. Every 73 days, the Decalendar fractional year date increases by .2 (‚Öï). The current Decalendar fractional year date is .\nNow it‚Äôs your turn! Move the slidersüéöÔ∏èin Example¬†1 to adjust the doty, fractional year, month, and dotm values and see the corresponding 1) Northern Hemisphere season, 2) Southern Hemisphere season, and 3) Zodiac sign in ../List¬†1. Try selecting a special date, like your birthdayüéÇ! You can also press the Play‚ñ∂Ô∏èbutton and then sit back and watch the sliders cycleüîÑback and forth from the start to the end of the Decalendar year. The sliders cycle through an entire year in 36.5 beats, a million times fasterüèéÔ∏èthan the actual speed of time!\n\nExample 1 ¬†\n\n\n\nviewof inputDoty = Inputs.range([0, 365], {value: 306, step: 1, label: \"doty\"});\n\nviewof year = transformInput(\n    Inputs.range([0, .999], {step: .001, label: \"year\"}),\n    {bind: viewof inputDoty, transform: (x =&gt; x / 365), invert: (x =&gt; x * 365)}\n);\n\nviewof monthInput = transformInput(\n    Inputs.range([1, 12], {step: 1, label: \"month\"}),\n    {bind: viewof inputDoty, transform: doty2month, invert: month2doty}\n);\n\nviewof dotmInput = transformInput(\n    Inputs.range([1, 31], {step: 1, label: \"dotm\"}),\n    {bind: viewof inputDoty, transform: doty2dotm, invert: (x =&gt; Math.floor(( 153 * (\n        viewof monthInput.value &gt; 2\n        ? viewof monthInput.value - 3\n        : viewof monthInput.value + 9) + 2\n    ) / 5 + x - 1\n))});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nviewof scrubberDoty = Scrubber(numbers, {autoplay: false, alternate: true, delay: 86.4, loopDelay: 864})\n\n\n\n\n\n\n\n\n\n\n\n\n\n../List¬†1: Date to season conversion",
    "crumbs": [
      "Software",
      "Observable"
    ]
  },
  {
    "objectID": "observable/index.html#sec-intro-year",
    "href": "observable/index.html#sec-intro-year",
    "title": "Observable",
    "section": "Year",
    "text": "Year\nDoty dates (day) and timestamps (day.stamp) do not include years and thus can be reused from year to year. When a doty is combined with a year, it forms a Decalendar ordinal12 (deco) and represents a specific date (year+day) or time (year+day.stamp) in a specific year, instead of a date (day) or time (day.stamp) that occurs every year or every leap year. Using the Observable datetime input in Example¬†2, you can select a year, month, dotm, hour, and minute to see the equivalent 1) deco timestamp (year+day.clock) and 2) year date (year.yyy) in ../List¬†2. For comparison, the current deco timestamp is .\n\nExample 2 ¬†\n\n\n\nviewof inputDatetime = Inputs.datetime({label: \"date\", value: \"1970-01-01T00:00\"})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n../List¬†2: Date and time conversion\n\n\n\n\nIn Example¬†3, you can enter numeric year and doty values or type in a free-form deco to see the resulting 1) ISO 8601 timestamp (year-mm-ddThh:mm:ss) and 2) year date in ../List¬†3. Example¬†3 also has a Play‚ñ∂Ô∏èbutton in that cycles from Day 0 to Day 365 of Year 1969. The cycle goes up to Day 0 of Year 1970, because Year 1969 is a common year and does not have a Day 365.\nInteracting with the number inputs in Example¬†3, standardizes the deco in the text input to ensure years are integers and doty values are positive numbers below 366. Nevertheless, all of the inputs in Example¬†3 support negative and fractional year and doty values. Negative doty values shift dates backward in time from the start of a given year into a previous year. Similarly, negative years shift dates backward starting from Year 0, which is 1 BCE (Before the Common Era).\n\nExample 3 ¬†\n\n\n\nviewof yd = Inputs.form([\n  Inputs.number({label: \"year\", value: \"1969\"}),\n  Inputs.number({label: \"doty\", value: \"306\"})\n])\n\n\n\n\n\n\n\nviewof decoOutput = transformInput(\n  Inputs.text({label: \"deco\", placeholder: \"year+day.ddd\", value: \"1969+306\"}),\n  {bind: viewof yd, transform: doty2deco, invert: deco2doty});\n\n\n\n\n\n\n\n\n\n\n\n\n\nviewof scrubberDeco = Scrubber(numbers, {autoplay: false, alternate: true, delay: 86.4, loopDelay: 864})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n../List¬†3: Deco timestamp conversion",
    "crumbs": [
      "Software",
      "Observable"
    ]
  },
  {
    "objectID": "observable/index.html#sec-intro-dek",
    "href": "observable/index.html#sec-intro-dek",
    "title": "Observable",
    "section": "Dek",
    "text": "Dek\nAs mentioned in Section¬†0.3, deks function as both months and weeks in Decalendar. A dek consists of 2 groups of 5 days called pents13. Each pent can follow a sequence of workdays and restdays called a pently schedule14. fig-schedules compares the typical weekly schedule and the Schedule 3 pently schedule. Like other pently schedules, Schedule 3 is named after the number of workdays it contains. The 3 workdays in Schedule 3 are followed by a 2-day pentend, the Decalender equivalent of a weekend.\nUnlike Schedule 3 and the other pently schedules, the weekly schedule is asymmetric and divides up workdays into proportions that are easier to express as fractions: 3/8 (.375), 1/3 (.3ÃÖ), and 7/24 (0.2916ÃÖ). In contrast, pently schedules divides each workday into simple, symmetrical proportions that are never repeating decimal numbers. The Schedule 3 workday is longer the typical 9-to-5, but the longer workday is compensated by more frequent restdays.\nExample¬†4 provides the opportunity to explore all four of the pently schedules. Schedule 3 is the default pently schedule, and should be followed unless there is a compelling reason to do otherwise. Despite having different numbers of workdays, all pently schedules keep the amount of spent at work constant at 1.2 days (120 cents) per pent. Every pently schedule also splits up workdays symmetrically so that the time before work is equal to the time after work. You can select which schedule to view in Example¬†4 using the Observable radio inputs.\nYou can also use the interval sliders to create a custom schedule and the Download‚¨áÔ∏èbutton to obtain the schedule data. Each interval is summarized by a Declock slice shown next to its slider. Decalendar and Declock slices are inspired by array slicing in computer programming and are used to represent date and time intervals. The slice that summarizes the Schedule 3 workday is .3:.7, where .3 (7.2 hours) is the start and .7 (16.8 hours) is the stop.\n\nExample 4 ¬†\n\n\n\nviewof intervals = Inputs.form([\n  interval([0, 1], {step: .01, value: [.3, .7], label: '0 or 5', width: 250, format: ([start, end]) =&gt; start === end ? \"\" : `${formatDecimal(start)}:${formatDecimal(end)}`}),\n  interval([0, 1], {step: .01, value: [.3, .7], label: '1 or 6', width: 250, format: ([start, end]) =&gt; start === end ? \"\" : `${formatDecimal(start)}:${formatDecimal(end)}`}),\n  interval([0, 1], {step: .01, value: [.3, .7], label: '2 or 7', width: 250, format: ([start, end]) =&gt; start === end ? \"\" : `${formatDecimal(start)}:${formatDecimal(end)}`}),\n  interval([0, 1], {step: .01, value: [0, 0], label: '3 or 8', width: 250, format: ([start, end]) =&gt; start === end ? \"\" : `${formatDecimal(start)}:${formatDecimal(end)}`}),\n  interval([0, 1], {step: .01, value: [0, 0], label: '4 or 9', width: 250, format: ([start, end]) =&gt; start === end ? \"\" : `${formatDecimal(start)}:${formatDecimal(end)}`}),\n])\n\n\n\n\n\n\n\n\n\nviewof schedule = Inputs.radio([2, 3, 4, 5], {label: \"sched.\", value: 3})\n\nviewof filename = Inputs.text({label: \"name\", placeholder: \"Enter the filename\", value: `schedule${schedule}.csv`})\n\nbutton(durations, filename)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// https://observablehq.com/@dec/pent\nPlot.plot({\n  className: \"schedule-explorer\",\n  x: {label: null},\n  color: {scheme: \"Set1\", legend: \"swatches\", reverse: true},\n  y: {label: null, domain: [1, 0]},\n  marks: [\n  Plot.barY(durations, {x: \"label\", y: \"duration\", fill: \"group\"}),\n  Plot.textY(\n      durations,\n      Plot.stackY(\n        Plot.groupX(\n          { y: \"first\", text: \"first\" },\n          {\n            x: \"label\",\n            z: \"group\",\n            y: \"duration\",\n            text: (d) =&gt; (d.duration &lt; .0001 ? null : formatDecimal(d.duration)),\n            fill: \"white\",\n            stroke: \"black\",\n            fontSize: 36,\n          }\n        )\n      )\n    ),\n  ]})\n\n\n\n\n\n\n\n\nFigure¬†3: Pently schedule explorer\n\n\n\n\n\nSlices can be used to select Declock time intervals, as in Example¬†4 above, or Decalendar date intervals, as in Example¬†5 below. Decalendar date intervals can represent events take place over multiple days. In addition to slices, Decalendar and Declock intervals can also be chosen using spreads. Use the Observable button and checkbox inputs in Example¬†5 to display different dotd combinations in Figure¬†4. Figure¬†4 shows dates selected by a slice in blue, dates selected by a spread in orange, dates selected by both in green, and dates selected by neither in gray.\nThe Example¬†5 button and checkbox inputs will modify the associated slice and spread text and numeric inputs as needed to select the desired days-of-the-dek. The numeric inputs for slices are the startüé¨index, the stopüõëindex, and the stepüë£size, which are separated by colons (start:stop:step) when combined into a slice. Similarly, the numeric inputs for spreads are the startüé¨orüõëstop index, the spanü™Ωsize, the split size, and the space size, which are typically delimited by greater-than signs (start&gt;span&gt;split&gt;space) or a mix of greater-than and less-than signs (stop&lt;span&gt;split&gt;space).\nThe numeric inputs in Example¬†5 cannot capture the full power of spreads and slices, because slices can have any number of steps and, likewise, spreads can have any number of alternating split and space sizes. We can select all even or odd days-of-the-dek using a slice with a single step (::2 or 1::2) or a spread with one split-space pair (&gt;&gt;&gt;1 or 1&gt;&gt;&gt;1). More complex patterns, such as prime or composite days-of-the-dek, require multiple step sizes for slices (2:::2:2:5 or 4::2:2::5) or multiple split-space pairs (2&gt;&gt;2&gt;1&gt;&gt;1&gt;&gt;4 or 4&gt;&gt;&gt;1&gt;&gt;1&gt;2&gt;4).\n\nExample 5 ¬†\n\nviewof sliceDotd = Inputs.checkbox([...Array(10).keys()], {label: \"slice\", value: [1, 6]})\n\n\n\n\n\n\n\nviewof spreadDotd = Inputs.checkbox([...Array(10).keys()], {label: \"spread\", value: [1, 6]})\n\n\n\n\n\n\n\nviewof togglePlot = Inputs.button([\n  [invertDotd ? \"None\" : \"All\", value =&gt; [...Array(10).keys()]],\n  [invertDotd ? \"Even\" : \"Odd\", value =&gt; [1, 3, 5, 7, 9]],\n  [invertDotd ? html`&lt;s&gt;Prime&lt;/s&gt;` : \"Prime\", value =&gt; [2, 3, 5, 7]],\n  [invertDotd ? html`&lt;s&gt;Composite&lt;/s&gt;` : \"Composite\", value =&gt; [4, 6, 8, 9]],\n  [invertDotd ? html`&lt;s&gt;Schedule2&lt;/s&gt;` : \"Schedule2\", value =&gt; [0, 1, 5, 6]],\n  [invertDotd ? html`&lt;s&gt;Schedule3&lt;/s&gt;` : \"Schedule3\", value =&gt; [0, 1, 2, 5, 6, 7]],\n  [invertDotd ? html`&lt;s&gt;Schedule4&lt;/s&gt;` : \"Schedule4\", value =&gt; [0, 1, 2, 3, 5, 6, 7, 8]],\n], {value: [], label: \"select\"})\n\n\n\n\n\n\n\n\n\nviewof invertDotd = Inputs.toggle({label: \"invert\"})\nviewof sliceOrSpread = toggleSwitch({textOn: invertDotd ? \"Spread\" : 'Slice' , textOff: invertDotd ? \"Slice\" : 'Spread'})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nviewof sliceInputs = Inputs.form([\n    Inputs.number([-366, 366], {step: 1, label: \"start\", value: 1, placeholder: \"Enter start index\"}),\n    Inputs.number([-366, 366], {step: 1, label: \"stop\", value: 366, placeholder: \"Enter stop index\"}),\n    Inputs.number([-366, 366], {step: 1, label: \"step\", value: 5, placeholder: \"Enter step size\"}),\n])\nviewof sliceString = transformInput(\n  Inputs.text({label: \"slice\", placeholder: \"Enter slice string\", value: \"0:366\"}),\n{bind: viewof sliceInputs, transform: encodeSlice, invert: decodeSlice});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nviewof spreadInputs = Inputs.form([\n    Inputs.number([-366, 366], {step: 1, label: \"start\", value: 0, placeholder: \"Enter start index\"}),\n    Inputs.number([-366, 366], {step: 1, label: \"span\", value: 366, placeholder: \"Enter span size\"}),\n    Inputs.number([-366, 366], {step: 1, label: \"split\", value: 3, placeholder: \"Enter split size\"}),\n    Inputs.number([-366, 366], {step: 1, label: \"space\", value: 2, placeholder: \"Enter space size\"}),\n])\nviewof spreadString = transformInput(\n  Inputs.text({label: \"spread\", placeholder: \"Enter spread string\", value: \"0&gt;366&gt;3&gt;2\"}),\n{bind: viewof spreadInputs, transform: encodeSpread, invert: decodeSpread});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// https://observablehq.com/@dec/dotd\nPlot.plot({\n  className: \"date-selector\",\n  padding: 0,\n  x: {axis: \"top\", label: null, type: \"band\"},\n  y: {label: null, type: \"band\"},\n  marks: [\n    Plot.cell(dates, {x: d =&gt; d[2], y: d =&gt; d.slice(0, 2), fill: d =&gt;\n      sliceArray.includes(d) && spreadArray.includes(d) ? \"green\" :\n      sliceArray.includes(d) && !spreadArray.includes(d) ? \"blue\" :\n      !sliceArray.includes(d) && spreadArray.includes(d) ? \"orange\" : \"grey\",\n      inset: 0.5}),\n    Plot.text(dates, {\n    x: d =&gt; d[2],\n    y: d =&gt; d.slice(0, 2),\n    fill: \"white\",\n    stroke: \"black\",\n    fontSize: 20})\n  ]\n})\n\n\n\n\n\n\n\n\nFigure¬†4: Decalendar date selector",
    "crumbs": [
      "Software",
      "Observable"
    ]
  },
  {
    "objectID": "observable/index.html#footnotes",
    "href": "observable/index.html#footnotes",
    "title": "Observable",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nDecalendar: a calendar system that uses deks instead of months and weeks‚Ü©Ô∏é\nDeclock: a timekeeping system that uses fractional days instead of hours, minutes, and seconds‚Ü©Ô∏é\ndoty: day-of-the-year; an alternative to months, weeks, hours, minutes, and seconds‚Ü©Ô∏é\ndoty date: the integer part of the doty; an alternate to calendar dates and week dates‚Ü©Ô∏é\ndoty time: the fractional part of the doty; an alternate to hours, minutes and seconds‚Ü©Ô∏é\ndek: a group of 10 days; the first two digits of the Decalendar date; an alternate to month and weeks‚Ü©Ô∏é\ndotd: one of the 10 days in a dek; the last digit of the Decalendar date; an alternate to the day-of-the-month and day-of-the-week‚Ü©Ô∏é\ncent: a hundredth (\\(10^{-2}\\)) of a day; the first 2 digits of the doty time; an alternate to quarter hours‚Ü©Ô∏é\nmil: a thousandth (\\(10^{-3}\\)) of a day; the first 3 digits of the doty time; an alternate to minutes‚Ü©Ô∏é\nbeat: a hundred thousandth (\\(10^{-5}\\)) of a day; the first 5 digits of the doty time; an alternate to seconds‚Ü©Ô∏é\nfractional year date: a year and the proportion of that year that has passed; an alternative to Decalendar dates‚Ü©Ô∏é\ndeco: a date and time format consisting of a year and a doty; analogous to ISO 8601 dates‚Ü©Ô∏é\npent: a group of 5 days; half of a dek‚Ü©Ô∏é\npently schedule: one of a set of workday and restday schedules for the 5 days of the pent‚Ü©Ô∏é",
    "crumbs": [
      "Software",
      "Observable"
    ]
  },
  {
    "objectID": "ml/llm/index.html",
    "href": "ml/llm/index.html",
    "title": "LLM",
    "section": "",
    "text": "Large Language Models (LLMs) are a way to automatically generate text. more informative commit messages based on the currently staged changes.\n\n\n\n\n\n Back to topCitationBibTeX citation:@online{laptev2024,\n  author = {Laptev, Martin},\n  title = {LLM},\n  date = {2024},\n  urldate = {2024},\n  url = {https://maptv.github.io/ml/llm/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nLaptev, Martin. 2024. ‚ÄúLLM.‚Äù 2024. https://maptv.github.io/ml/llm/.",
    "crumbs": [
      "Machine Learning",
      "Language Models"
    ]
  },
  {
    "objectID": "knitr/index.html",
    "href": "knitr/index.html",
    "title": "Knitr",
    "section": "",
    "text": "The goal of this blog post, the last (index: -1) in my Tools blog post series, is to\n\n\n\n\n\n\n\nflowchart TB\n   A[Git]--&gt;B[VSCode]--&gt;C[Quarto]\n   C--&gt;D[Observable]\n   C--&gt;E[Jupyter]\n   C--&gt;F[Knitr]\n   click A \"../git\"\n   click B \"../vscode\"\n   click C \"../quarto\"\n   click D \"../observable\"\n   click E \"../jupyter\"\n   click F \"../knitr\"\n   style F stroke:#99f,stroke-width:5px\n\n\n\n\nFigure¬†1: Tools series navigation chart"
  },
  {
    "objectID": "knitr/index.html#tldr",
    "href": "knitr/index.html#tldr",
    "title": "Knitr",
    "section": "",
    "text": "The goal of this blog post, the last (index: -1) in my Tools blog post series, is to\n\n\n\n\n\n\n\nflowchart TB\n   A[Git]--&gt;B[VSCode]--&gt;C[Quarto]\n   C--&gt;D[Observable]\n   C--&gt;E[Jupyter]\n   C--&gt;F[Knitr]\n   click A \"../git\"\n   click B \"../vscode\"\n   click C \"../quarto\"\n   click D \"../observable\"\n   click E \"../jupyter\"\n   click F \"../knitr\"\n   style F stroke:#99f,stroke-width:5px\n\n\n\n\nFigure¬†1: Tools series navigation chart"
  },
  {
    "objectID": "knitr/index.html#sec-intro",
    "href": "knitr/index.html#sec-intro",
    "title": "Knitr",
    "section": "Introduction",
    "text": "Introduction"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "Greetings! \nWelcome to my personal website, which I created using the Quarto publishing system.\nYou are currently on the ‚ÄâHome page of my site. You can use the ‚ÄâSidebar on the left to go to the ‚ÄâAbout, ‚ÄâArticle List, and ‚ÄâCurriculum Vitae (CV) pages of my site or my profile pages on  GitHub and ‚ÄâLinkedIn. The remaining items in the sidebar are sections that contain articles on many different topics. In addition to the sidebar, you can also use the arrows at the bottom to move between articles in a given section or on to the next section.\nIf you are not sure where to begin, I recommend starting with my articles on ‚ÄâDec, a measurement system that I created, and then continuing on my ‚ÄâQuarto section to learn about how I customized my website to show Dec dates in every article and the navigation bar.\nEach article contains at least one navigation chart (navchart). As with breadcrumb navigation, you can click on any node in the navchart below to go to the article that it represents.\nPlease feel free to take a look around!\n\n\n\n\n%%{init: {'theme': 'default', 'themeVariables': { 'fontSize': '32px'}}}%%\nflowchart LR\n   A[Dec]--&gt;B[date]--&gt;C[time]--&gt;D[snap]--&gt;E[span]\n   Z[  ]:::empty~~~F[Quarto]--&gt;G[filter]--&gt;H[include]--&gt;I[script]\n   classDef empty width:0px;\n   click A \"/dec\"\n   click B \"/dec/date\"\n   click C \"/dec/time\"\n   click D \"/dec/snap\"\n   click E \"/dec/span\"\n   click F \"/quarto\"\n   click G \"/quarto/filter\"\n   click H \"/quarto/include\"\n   click I \"/quarto/script\"\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "git/index.html",
    "href": "git/index.html",
    "title": "Git",
    "section": "",
    "text": "In this blog post, I show how to use the Git version control system and the command line interfaces (CLIs) for the GitHub and GitLab Git repository hosts to create a Git repository that contains setup files for the Codespaces and GitPod computing platforms.",
    "crumbs": [
      "Software",
      "Git"
    ]
  },
  {
    "objectID": "git/index.html#tldr",
    "href": "git/index.html#tldr",
    "title": "Git",
    "section": "",
    "text": "In this blog post, I show how to use the Git version control system and the command line interfaces (CLIs) for the GitHub and GitLab Git repository hosts to create a Git repository that contains setup files for the Codespaces and GitPod computing platforms.",
    "crumbs": [
      "Software",
      "Git"
    ]
  },
  {
    "objectID": "git/index.html#navigation-chart",
    "href": "git/index.html#navigation-chart",
    "title": "Git",
    "section": "Navigation Chart",
    "text": "Navigation Chart\nFigure¬†1 summarizes the relationship between this post (highlighted with a violet border) and the subsequent posts in my Tools blog post series. Click/tap on a node in Figure¬†1 to navigate to the corresponding post. If you cannot see Figure¬†1, rotate your smartphone screen to a horizontal (landscape) position.\n\n\n\n\n\n\n\nflowchart TB\n   A[Git]--&gt;B[VSCode]--&gt;C[Quarto]\n   C--&gt;D[Observable]\n   C--&gt;E[Jupyter]\n   C--&gt;F[Knitr]\n   click A \"../git\"\n   click B \"../vscode\"\n   click C \"../quarto\"\n   click D \"../observable\"\n   click E \"../jupyter\"\n   click F \"../knitr\"\n   style A stroke:#99f,stroke-width:5px\n\n\n\n\nFigure¬†1: Tools series navigation chart",
    "crumbs": [
      "Software",
      "Git"
    ]
  },
  {
    "objectID": "git/index.html#sec-intro",
    "href": "git/index.html#sec-intro",
    "title": "Git",
    "section": "Introduction",
    "text": "Introduction\nGit is a version control system developed by Linux creator Linus Torvalds. Since its first release in 2005+037, Git has largely replaced other version control systems and is used by 93% of software developers worldwide, according to survey results published by StackOverflow on 2022+314.\nThanks to Git, I can sleepüí§soundly at night, reassured by the knowledge that all of my progress on all of my ongoing projects is recorded. My progress is not only stored on my local computer, but also on Git repository hosts such as GitHub and GitLab.\nA Git repository (repo) is a directory that tracks the changes made to its contents. For more information on GitHub, the largest Git repo host, take a look at the ‚ÄúGitHub for supporting, reusing, contributing, and failing safely‚Äù post by Allison Horst and Julie Lowndes on the Openscapes blog.\nGitHub and GitLab do not only host repos, but also websites via GitHub Pages and GitLab Pages. In addition to providing basic web hosting for free, GitHub and GitLab offer free access to continuous integration (CI) systems called GitHub Actions and GitLab CI/CD that can automatically build and deploy software.\nAnother advantage of using Git is the availability of free web-based editors, such as github.dev, vscode.dev, and Web IDE, that make it possible to modify repo contents via a web browser without the need to keep local copies of repos or have anything installed locally. Cloud-based computing platforms like GitHub Codespaces and GitPod offer the same benefits of web-based editors, but also provide compute for running code and building software, thus enabling remote development on any computer with a web browser.\nBefore you can benefit from everything GitHub and/or GitLab have to offer, you will need to set up your computer so that you can work locally and/or configure a service like GitHub Codespaces or GitLab Web IDE for remote development in your web browser. In this post, I discuss local development environment setup with the Homebrew package manager and repo setup with the GitHub and GitLab CLI.\nIf you follow along to end of this post, you will have a repo called dotfiles that can be used for Codespaces and GitPod setup. I cover how to set up Codespaces and GitPod in my next blog post, which focuses on the Visual Studio Code (VSCode) and VSCodium source-code editors.",
    "crumbs": [
      "Software",
      "Git"
    ]
  },
  {
    "objectID": "git/index.html#sec-setup",
    "href": "git/index.html#sec-setup",
    "title": "Git",
    "section": "Setup",
    "text": "Setup\n\nHomebrew\nLinux, macOS, or Windows Subsystem for Linux (WSL) users can install everything needed to work through all of the examples in this blog post via the Homebrew](https://brew.sh) package manager. First, install Homebrew itself with the latest .pkg installer for macOS or by running the Example¬†1 Unix shell code in your terminal.\n\nExample 1 ¬†\n/bin/bash -c \"$(curl -fsSL https://\\\nraw.githubusercontent.com/Homebrew/\\\ninstall/HEAD/install.sh)\"\n\nIf you are not completely satisfied with the terminal that comes with your operating system (OS), you can use Homebrew to install a new terminal. The terminals I use most often are the iTerm2 standalone terminal and the integrated terminal built into my preferred source-code editor VSCodium. Unfortunately, iTerm2 is only for macOS, but there is an abundance of great multi-OS standalone terminals, such as Alacritty, Hyper, Kitty, and Tabby.\nAfter installing Homebrew, you can run brew doctor in your terminal to confirm that everything is set up correctly. If the brew command is not available, you need to follow the instructions provided after installation to add brew to your PATH variable.\nOnce Homebrew is ready, you can run the shell code in Example¬†2 to create a file called Brewfile with the echo shell command and install everything listed in this newly created Brewfile with the brew bundle shell command.\n\nExample 2 ¬†\necho 'brew \"gh\"\\nbrew \"git\"\nbrew \"glab\"\\ncask \"github\"' &gt; Brewfile\nbrew bundle\n\nThe Brewfile created by the shell code in Example¬†2 installs:\n\nGit,\nthe command line interfaces (CLIs) for\n\nGitHub and\nGitLab, and\n\nthe GitHub Desktop Git Graphical User Interface (GUI).\n\nAfter installing Git, you should go through the First-Time Git Setup or make sure you have a Git configuration file with the correct name and location, either ~/.gitconfig or ~/.config/git/config, where ~ represents the home directory and / is the directory delimiter used in Unix paths. When configuring Git, I recommend that you set your default editor to VSCode (code) or VSCodium (codium) as shown in Example¬†3.\n\nExample 3 ¬†\n\nShell.gitconfig\n\n\ngit config --global core.editor \"codium --wait\"\n\n\n[core]\n    editor = codium --wait\n\n\n\n\nIf you are curious about how I set up my computer, you can take a look at my Brewfile, .gitconfig, and other configuration files in my setup repo on GitHub and GitLab. In particular, I will highlight my Z shell configuration file (.zshrc) in Section¬†5.\n\n\nAuthentication\nBefore we get started, you will need to have created an account on GitHub and/or GitLab. You will need two authentication methods: 1) to sign into github.com or gitlab.com in your browser and 2) to run the git push shell command in your terminal. For git push to work, you will need either a Personal Access Token (PAT) or a Secure Shell (SSH) key.\nCreating a PAT on GitHub or GitLab is easy, but then you must also store your PAT in Keychain Access on Mac or Git Credential Manager on Windows and Linux to avoid having to enter your PAT every time you run git push in your terminal. In contrast, setting up an SSH key on GitHub or GitLab requires much more effort but you can set up a single SSH key and reuse it for GitHub, GitLab, and any other service that supports authentication via SSH key.\nWhen I set up a new computer, I create a SSH key using the command in ?@exm-keygen. I can add this key to my SSH agent simply by running ssh-add, but I also\nssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -C \\((uname -n)_\\)(sysctl hw.model | cut -f2 -d¬†)\nI use the\nIf you enter an empty passphrase when creating your SSH key, then you will not need Keychain Access or Git Credential Manager. frictionless experience by default, whereas PATs are more difficult than need to entered every time your. This major limitation of PATs can be circumvented by storing your PAT in Keychain Access on Mac or Git Credential Manager on Windows and Linux.\nThe instructions for setting up an SSH key can use your newly created key for both GitHub and GitLab, but if you have more than one account on the same Git repo host, you will need to create a separate key for each account and include each identity file in your ~/.ssh/config file as shown in Example¬†5.\nI can add this key that one SSH key is named ~/.ssh/id_rsa, ~/.ssh/id_ecdsa, ~/.ssh/id_ecdsa_sk, ~/.ssh/id_ed25519, ~/.ssh/id_ed25519_sk, or ~/.ssh/id_dsa.\nIso I can add it to my SSH agent simply by running ssh-add. unless I need to sign into multiple accounts on the same Git repository host.\nFor example, if I have separate accounts for work and personal projects, I create a separate SSH key for each account and include each identity file in my ~/.ssh/config file as shown in Example¬†5. If including ‚ÄúAddKeysToAgent yes‚Äù does not automatically add your SSH keys to your SSH agent, run ssh-add ~/.ssh/USERNAME to add each SSH key.\n\nExample 4 ¬†\n\n\n~/.ssh/config\n\nHost github-WORKUSERNAME\n    AddKeysToAgent yes\n    HostName github.com\n    IdentityFile ~/.ssh/WORKUSERNAME\n    IdentitiesOnly yes\n\nHost github-PERSONALUSERNAME\n    AddKeysToAgent yes\n    HostName github.com\n    IdentityFile ~/.ssh/PERSONALUSERNAME\n    IdentitiesOnly yes\n\n\nOf the many authentication methods, passkeys stand out because they can function as both a password and two-factor authentication (2FA), thus combining the two steps in the 2FA sign-in process into one. Passkeys will certainly become more common in the future, especially now that GitHub recently announced its plan to make 2FA mandatory for code contributors.\nWhen authenticating via SSH, we use SSH URLs, such as git@github.com:maptv/dotfiles.With PATs, we use HTTPS URLs such as https://github.com/maptv/dotfiles, instead of the\n\nExample 5 ¬†\n\n\n~/.ssh/config\n\nHost github-USERNAME1\n   HostName github.com\n   IdentityFile ~/.ssh/USERNAME1\n   IdentitiesOnly yes\n\nHost github-USERNAME2\n   HostName github.com\n   IdentityFile ~/.ssh/USERNAME2\n   IdentitiesOnly yes\n\n\nIf you have an identity file in your ~/.ssh/ directory that follows the naming convention, you can add it to your current shell session by running ssh-add. If not, you will need to provide the identity file as an argument, e.g.¬†ssh-add ~/.ssh/USERNAME1.\nYou can create a repo using the web interface of https://github.com or https://gitlab.com in your browser, but the best way to start a new project is using the CLI for GitHub or GitLab in your terminal. First, run gh auth login or glab auth login and follow the prompts to authenticate via your web browser or with an authentication token.\nThe GitHub CLI allows you to add an SSH key to your account during or after authentication. The GitLab CLI does not handle SSH keys during authentication, but has a similar command for adding an SSH key to your GitLab account.\n\n\nRepository\nAfter authentication and SSH key setup, you can run the code in either of the code chunks in Example¬†6 to set up your local and remote repos and create a Quarto website project in the local repo. You can create shell alias that combine all of the repo creation steps like I did in my .zshrc.\n\nExample 6 ¬†\n\nGitHubGitLab\n\n\ncd # start in home directory\nmkdir USERNAME\ncd USERNAME\ngh repo create REPONAME --add-readme --clone --public\ncd REPONAME\n\n\ncd # start in home directory\nmkdir USERNAME\ncd USERNAME\nglab repo create REPONAME --readme --defaultBranch main --public\ncd REPONAME\ngit pull origin main\ngit branch --set-upstream-to=origin/main main\n\n\n\n\nTo make it easier to backup my repos on both GitHub and GitLab, I set up each local repo to have two origin remote URLs using the code as shown in Example¬†7. With this setting, running git push in my local repo updates my remote repos on both GitHub and GitLab.\n\nExample 7 ¬†\ngit remote add lab git@gitlab.com:maptv/maptv.gitlab.io\ngit remote add hub git@github.com:maptv/maptv.github.io\ngit remote set-url --add origin $(git remote get-url lab)",
    "crumbs": [
      "Software",
      "Git"
    ]
  },
  {
    "objectID": "git/index.html#sec-workflow",
    "href": "git/index.html#sec-workflow",
    "title": "Git",
    "section": "Git workflow",
    "text": "Git workflow\nWhen I want to add or update the content on my site, I go through the steps in the standard Git workflow shown in Figure¬†2. Every time I ‚Äúpush‚Äù a collection of changes called a commit to my maptv.github.io repo on GitHub, a continuous integration (CI) system called GitHub Actions automatically completes the steps required to build and publish my website.\n\n\n\n\n\n\nflowchart LR\n   A[working&lt;br/&gt;directory]-.git&lt;br/&gt;add.-&gt;B{{staging&lt;br/&gt;area}}-.git&lt;br/&gt;commit.-&gt;C([local&lt;br/&gt;repo])-.git&lt;br/&gt;push.-&gt;D(remote&lt;br/&gt;repo)\n\n\n\n\nFigure¬†2: Git workflow\n\n\n\n\n\n\nShell aliases\nTo make it easier to make incremental changes to my website and frequently release new content, I combined all of the git shell commands in Figure¬†2 into shell aliases. You can add shell aliases to a shell configuration file like .bashrc or .zshrc on your computer to shorten one or more commands and any associated command arguments.\nThe git commit aliases in the .zshrc file in my setup repo on GitHub and GitLab target different groups of files for inclusion in the next commit. For example, cmp targets staged files, camp targets tracked files, a.cmp targets files in the current directory, and aacmp targets files in the repo.\nExample¬†8 shows the aacmp alias as an example of the shell alias syntax. The mnemonic device for this alias is add all, commit with a message, and push.\n\nExample 8 ¬†\n\n\n.zshrc\n\nalias aacmp=\"func() { git add --all && git commit --message \\\n    \\\"$(echo '${*:-$(echo $(git diff --name-status --cached \\\n    | tr \"[:space:]\" \" \"))}')\\\" && git push; }; func\"\n\n\nAliases like aacmp allow me to enter free-form commit messages directly on the command line without quotes, e.g.¬†aacmp edit first post. If you decide to try one of these aliases, please exercise extreme caution as any un-escaped or un-quoted metacharacters may yield surprising effects instead of being included verbatim in the commit message, e.g.¬†* is replaced by all of the file and directory names in the current directory!\nIf no commit message is provided after the aliases, a generic commit message is created that includes the change type and name of each changed file. In Section¬†5.2, I describe how I used this generic commit message approach to further simplify the Git workflow.\n\n\nKeybindings\nAn alternative to a shell alias that combines git commands is to use a keyboard shortcut in a Git Graphical User Interface (GUI) such as GitHub Desktop or the Git interface in a code editor like VSCode, VSCodium, or RStudio. I use keyboard shortcuts in VSCode and VSCodium to send shell commands to the integrated terminal without moving my focus away from the files I am editing.\nI created different shortcuts to control which files are included in each commit: ‚å•‚áßF for the current file only, ‚å•‚áßS for already staged files, ‚å•‚áßT for all tracked files, and ‚å•‚áßU for all files including untracked files. I also have keyboard shortcuts that affect a specific directory (and all of its subdirectories): ‚å•‚áßD for the current file‚Äôs directory, ‚å•‚áß. for shell‚Äôs current directory, ‚å•‚áßC for the current working directory according to VSCode/VSCodium, ‚å•‚áßW for the Workspace directory.\nExample¬†9 displays the ‚å•‚áßF shortcut as an example of the VSCode/VSCodium shortcut syntax. This shortcut uses the escape code for the return key (\\u000D) to run several git commands and predefined variables to insert the absolute (${file}) and relative (${relativeFile}) path to the currently open file.\n\nExample 9 ¬†\n\n\nkeybindings.json\n\n{\n  \"key\": \"shift+alt+f\",\n  \"command\": \"workbench.action.terminal.sendSequence\", \"args\": { \"text\":\n    \"git add ${file} && git commit -m \\\"M ${relativeFile}\\\" && git push\\u000D\" },\n  \"when\": \"terminalIsOpen\"\n}\n\n\nIf you want to set up similar shortcuts for yourself, take a look at my keybindings.json in my setup repo on GitHub and GitLab. As you create keyboard shortcuts, please be mindful of keybinding conflicts that may arise.\nTo set up a keyboard shortcut that runs a series of steps rather than a single line of shell code, I suggest you use the VSCode/VSCodium Tasks mechanism, a system designed to automate software build tasks. The default keyboard shortcut to run all tasks in a local or global task.json file is ‚åÉ‚áßB on Linux/Windows or ‚åò‚áßB on Mac (mnemonic: B is for Build), but you can bind other shortcuts to specific tasks.\nIf you use a text editor like Vim or Emacs, you can create keybindings for Vim plugins like fugitive or Emacs packages like magit that run through the entire Git workflow. Example¬†10 shows the Vim+fugitive equivalent of my ‚å•‚áßF VSCode/VSCodium keybinding.\n\nExample 10 ¬†\n\n\n.vimrc\n\nnnoremap &lt;A-S-f&gt; :Gw&lt;bar&gt;G! commit -m \"M \"%&lt;bar&gt;G! push&lt;CR&gt;\n\n\nThe drawback of my keyboard shortcut approach for the Git workflow is that it produces generic commit messages that are no very informative. Anyone reading the messages will not be able to tell what changes were made and more importantly why the changes were made.\nTo automatically generate commit messages based on the currently staged changes, we can use a Large Language Model (LLM). Generative artificial intelligence models like LLMs tend to be large in size and have atypical computational requirements, so I will save my adventures with LLMs for a different post.\nI really enjoy using Git, especially with shell aliases in my terminal and keyboard shortcuts in my favorite text editors. If we ever collaborate on a project together, you can be sure that I will insist on using Git!",
    "crumbs": [
      "Software",
      "Git"
    ]
  },
  {
    "objectID": "dec/span/index.html",
    "href": "dec/span/index.html",
    "title": "Dec span",
    "section": "",
    "text": "%%{init: {'theme': 'default', 'themeVariables': { 'fontSize': '32px'}}}%%\nflowchart LR\n   A[Dec]--&gt;B[date]--&gt;C[time]--&gt;D[snap]--&gt;E[span]\n   click A \"/dec\"\n   click B \"/dec/date\"\n   click C \"/dec/time\"\n   click D \"/dec/snap\"\n   click E \"/dec/span\"\n\n\n\n\n\nMy website provides many examples of the Quarto publishing and the Dec measurement systems in action. I leverage Quarto support for the Observable data analysis and visualization system to display animated or interactive plots like the bar chart, clocks, solar terminator map, and line chart below.\n\n\n\n\n%%{init: {'theme': 'default', 'themeVariables': { 'fontSize': '32px'}}}%%\nflowchart LR\n   A[Dec]--&gt;B[date]--&gt;C[time]--&gt;D[snap]--&gt;E[span]\n   click A \"/dec\"\n   click B \"/dec/date\"\n   click C \"/dec/time\"\n   click D \"/dec/snap\"\n   click E \"/dec/span\"\n\n\n\n\n\n\n\n\n\n\n\n Back to topReuseCC BY-SA 4.0CitationBibTeX citation:@online{laptev2024,\n  author = {Laptev, Martin},\n  title = {Dec Span},\n  date = {2024},\n  urldate = {2024},\n  url = {https://maptv.github.io/dec/span},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nLaptev, Martin. 2024. ‚ÄúDec Span.‚Äù 2024. https://maptv.github.io/dec/span.",
    "crumbs": [
      "Dec",
      "Span"
    ]
  },
  {
    "objectID": "dec/index.html",
    "href": "dec/index.html",
    "title": "Dec",
    "section": "",
    "text": "%%{init: {'theme': 'default', 'themeVariables': { 'fontSize': '32px'}}}%%\nflowchart LR\n   A[Dec]--&gt;B[date]--&gt;C[time]--&gt;D[snap]--&gt;E[span]\n   click A \"/dec\"\n   click B \"/dec/date\"\n   click C \"/dec/time\"\n   click D \"/dec/snap\"\n   click E \"/dec/span\"\n\n\n\n\n\n\n\n\nDec measurement system\nThis part of my website focuses on Dec, a measurement system that I created. All Dec measurements are based on turns. When measuring anglesüìê, a turn represents a full‚≠ïÔ∏ècircle and equals 2\\(\\pi\\) (\\(\\underline\\tau\\)) radians (rad) or 360 degrees (¬∞). Geographic coordinates and compassüß≠directions are anglesüìêand thus can, and shouldüòÑ, be measured in turns instead of rad or ¬∞.\n\nLongitude latitude course\nDec measures longitude in parallels (\\(\\lambda\\)), latitude in meridians (\\(\\phi\\)), and compassüß≠directions in windroses (\\(\\alpha\\)). To measure certain kinds of anglesüìê, Dec uses specific types of turns with distinct names like \\(\\lambda\\), \\(\\phi\\), or \\(\\alpha\\). All turn types can be combined with metric prefixes, like deci, centi, or milli, to create turn submultiples, such as deciturns, centiturns, or milliturns.\nThe table below provides the current longitude in milliparallels (\\(\\text m\\lambda\\)) and latitude in millimeridians (\\(\\text m\\phi\\)) of Points 0 and 1 on the mapüó∫Ô∏èbeneath the table. By default, Point 0 is at 800 \\(\\text m\\lambda\\) and 0 \\(\\text m\\phi\\), near the Gal√°pagosüèùÔ∏èarchipelago of Ecuadorüá™üá®, and Point 1 is at 800 \\(\\text m\\lambda\\) and 100 \\(\\text m\\phi\\), near the bottom of the Missouri bootheel in the United Statesüá∫üá∏.\nTo move the points, click the mapüó∫Ô∏èor edit their coordinates in the table. The toggle‚úÖinputs above the table add layers to the mapüó∫Ô∏è: country borders, a rainbowüåàcoloredüé®grid of Dec graticules, a choropleth of UTC time zones, and solar terminator shading with a yellowüü°dot denoting the point where the Sun‚òÄÔ∏èis directly overhead:  \\(\\text m\\lambda\\) and  \\(\\text m\\phi\\).\nAlongside the geographic coordinates of a point, each row of the table contains the course in milliwindroses (\\(\\text m\\alpha\\)) we would need to maintain to travelüß≥the shortest distance to the other point. The shortest distance is shown as orangeüü†dots on the mapüó∫Ô∏è. The default courses in \\(\\text m\\alpha\\) are 0 (North) from Point 0 to 1 and 500 (South) from Point 1 to 0.\n\n\nDistance speed duration\nDec measures distance in taurs (c), speed in omegars (v), and time in years (y) and days (d). Each of these four turn types approximates (\\(\\approx\\)) a physical property of the Earthüåç: c = \\(\\tau r\\) \\(\\approx\\) its circumference, y \\(\\approx\\) the duration of its orbit around the Sun‚òÄÔ∏è, d \\(\\approx\\) the duration of its rotation on its axis, and \\(\\text c\\over\\text d\\) = v = \\(\\omega r\\) \\(\\approx\\) the speed of its rotation at the Equator.\nAt a speed of 0.5 v or 500 milliomegars (mv), we could travelüß≥the 0.1 c or 100 millitaurs (mc) between the default positionsüìçof Points 0 and 1 in 0.2 d or 200 millidays (md). The time required to travelüß≥between two points is the distance divided by the speed:  mc √∑  v =  md =  c √∑  v =  mc √∑  mv =  d.\n\n\nInteractive world map\n\n\nviewof travelspeed = Inputs.range([0, 1000], {label: \"Speed\", value: 500, step: 1})\n\n\n\n\n\n\n\nviewof yaw = Inputs.range([0, 1000], {label: \"Yaw\", value: 500, step: 1})\n\n\n\n\n\n\n\nviewof pitch = Inputs.range([-500, 500], {label: \"Pitch\", value: 0, step: 1})\n\n\n\n\n\n\n\nviewof roll = Inputs.range([-500, 500], {label: \"Roll\", value: 0, step: 1})\n\n\n\n\n\n\n\nviewof mapsize = Inputs.range([0, 100], {label: \"Size\", value: 100, step: 1})\n\n\n\n\n\n\n\nviewof select = Inputs.select(\n  projections, {format: x =&gt; x.name, value: projections.find(t =&gt; t.name === \"Equirectangular (plate carr√©e)\")})\n\n\n\n\n\n\n\n\nviewof bordertoggle = labelToggle(Inputs.toggle, \"Border\", false, \"bordertoggle\")\nviewof gridtoggle = labelToggle(Inputs.toggle, \"Grid\", false, \"gridtoggle\")\nviewof utctoggle = labelToggle(Inputs.toggle, \"UTC\", false, \"utctoggle\")\nviewof suntoggle = labelToggle(Inputs.toggle, \"Sun\", false, \"suntoggle\")\nrstbtn.node();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntable = createTable([\n  { Point: 0, Milliparallel: 800, Millimeridian: 0, Milliwindrose: 0 },\n  { Point: 1, Milliparallel: 800, Millimeridian: 100, Milliwindrose: 500 },\n], { headerEditable: false, appendRows: false })\n//   {Point: 0, Milliparallel: `${Math.floor(long2turn(Place_A[0], 3))}`, Millimeridian: `${Math.floor(lati2turn(Place_A[1], 3))}`, Milliwindrose: `${Math.floor(lati2turn(coor2bear(Place_A, Place_B)))}`},\n//   {Point: 1, Milliparallel: `${Math.floor(long2turn(Place_B[0], 3))}`, Millimeridian: `${Math.floor(lati2turn(Place_B[1], 3))}`, Milliwindrose: `${Math.floor(lati2turn(coor2bear(Place_B, Place_A)))}`},\n// ], {headerEditable: false, appendRows: false})\n\n\n\n\n\n\n\n\n// https://observablehq.com/@d3/solar-terminator\n// https://observablehq.com/@mbostock/time-zones\nviewof coordinates = worldMapCoordinates([[turn2long(table.rows[1].cells[1].childNodes[0].innerText), turn2degr(table.rows[1].cells[2].childNodes[0].innerText % 250)], [turn2long(table.rows[2].cells[1].childNodes[0].innerText), turn2degr(table.rows[2].cells[2].childNodes[0].innerText % 250)], projection], [width, height * mapsize / 100])\n//viewof coordinates = worldMapCoordinates([\n//  [turn2long(table.rows[1].cells[1].childNodes[0].innerText), turn2degr(table.rows[1].cells[2].childNodes[0].innerText % 250)],\n//  [turn2long(table.rows[2].cells[1].childNodes[0].innerText), turn2degr(table.rows[2].cells[2].childNodes[0].innerText % 250)],\n//  projection], [width, height])\n\n\n\n\n\n\n\n\n\nColor wheel compass\n\npreview()\n\n\n\n\n\n\n\n// https://observablehq.com/@maddievision/enneagram\nquickRender(326, 326, context =&gt; {\n  const center = 163\n  const ringRadius = 140\n  const ringLineWidth = 4\n  // Ring\n  context.beginPath();\n  context.lineWidth = ringLineWidth\n  context.strokeStyle = \"#ddd\"\n  context.arc(center, center, ringRadius, 0, 2 * Math.PI);\n  context.stroke();\n  context.font = \"Bold 16px Arial\"\n  context.textAlign = 'center'\n  let octPoints = []\n  for (let i = 0; i &lt; 8; i++) {\n    const xPhase = Math.sin(i / 8 * 2 * Math.PI)\n    const yPhase = Math.cos(i / 8 * 2 * Math.PI)\n    const x = center + ringRadius * xPhase\n    const y = center - ringRadius * yPhase\n    octPoints.push([x, y])\n  }\n  // Lines\n  octConnections.forEach(([a, b], i ) =&gt; {\n    const [x1, y1] = octPoints[a]\n    const [x2, y2] = octPoints[b]\n    const lineAngle = Math.atan2(y2 - y1, x2 - x1)\n    // Draw just short of the label circumference\n    const x2a = x2 - 28 * Math.cos(lineAngle)\n    const y2a = y2 - 28 * Math.sin(lineAngle)\n    const x1a = x1 + 28 * Math.cos(lineAngle)\n    const y1a = y1 + 28 * Math.sin(lineAngle)\n    context.lineWidth = ringLineWidth\n    context.strokeStyle = \"#ddd\"\n    context.beginPath();\n    context.moveTo(x2a, y2a);\n    context.lineTo(x1a, y1a);\n    context.stroke();\n  })\n  // Arrow Heads\n  octConnections.forEach(([a, b], i ) =&gt; {\n    const [x1, y1] = octPoints[a]\n    const [x2, y2] = octPoints[b]\n    const lineAngle = Math.atan2(y2 - y1, x2 - x1)\n    const xl = x2 - 88 * Math.cos(lineAngle - (15 / 360) * 2 * Math.PI)\n    const yl = y2 - 88 * Math.sin(lineAngle - (15 / 360) * 2 * Math.PI)\n    const xr = x2 - 88 * Math.cos(lineAngle + (15 / 360) * 2 * Math.PI)\n    const yr = y2 - 88 * Math.sin(lineAngle + (15 / 360) * 2 * Math.PI)\n    const x2a = x2 - 22 * Math.cos(lineAngle)\n    const y2a = y2 - 22 * Math.sin(lineAngle)\n    const x = x2 - 69 * Math.cos(lineAngle)\n    const y = y2 - 69 * Math.sin(lineAngle)\n    context.fillStyle = hsl8[i]\n    context.strokeStyle = window.darkmode ? \"#aaa\" : \"#333\";\n    context.lineWidth = 1\n    context.beginPath();\n    context.moveTo(x2a, y2a);\n    context.lineTo(xl, yl);\n    context.lineTo(xr, yr);\n    context.lineTo(x2a, y2a);\n    context.fill();\n    context.stroke();\n    context.fillStyle = yiq(hsl8[i]) &gt; 0.51 ? \"#000\" : \"white\"\n    context.fillText([\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\"][i], x, y + 6)\n  })\n  // Labels\n  octPoints.forEach(([x, y], i) =&gt; {\n    context.lineWidth = 1\n    context.fillStyle = hsl8[i]\n    context.strokeStyle = window.darkmode ? \"#aaa\" : \"#333\";\n    context.beginPath();\n    context.arc(x, y, 22, 0, 2 * Math.PI);\n    context.fill();\n    context.stroke();\n    context.fillStyle = yiq(hsl8[i]) &gt; 0.51 ? \"#000\" : \"white\";\n    context.fillText([\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\"][i], x, y + 6)\n  })\n})\n\n\n\n\n\n\n\n// https://observablehq.com/@observablehq/categorical-palette-tool\ndisplayPalette(hsl8, {darkMode: true})\n\n\n\n\n\n\n\n// https://observablehq.com/@maddievision/enneagram\nquickRender(326, 326, context =&gt; {\n  const center = 163\n  const ringRadius = 140\n  const ringLineWidth = 4\n  // Ring\n  context.beginPath();\n  context.lineWidth = ringLineWidth\n  context.strokeStyle = \"#ddd\"\n  context.arc(center, center, ringRadius, 0, 2 * Math.PI);\n  context.stroke();\n  context.font = \"Bold 24px Arial\"\n  context.textAlign = 'center'\n  let decPoints = []\n  for (let i = 0; i &lt; 10; i++) {\n    const xPhase = Math.sin(i / 10 * 2 * Math.PI)\n    const yPhase = Math.cos(i / 10 * 2 * Math.PI)\n    const x = center + ringRadius * xPhase\n    const y = center - ringRadius * yPhase\n    decPoints.push([x, y])\n  }\n  // Lines\n  decConnections.forEach(([a, b], i ) =&gt; {\n    const [x1, y1] = decPoints[a]\n    const [x2, y2] = decPoints[b]\n    const lineAngle = Math.atan2(y2 - y1, x2 - x1)\n    // Draw just short of the label circumference\n    const x2a = x2 - 28 * Math.cos(lineAngle)\n    const y2a = y2 - 28 * Math.sin(lineAngle)\n    const x1a = x1 + 28 * Math.cos(lineAngle)\n    const y1a = y1 + 28 * Math.sin(lineAngle)\n    context.lineWidth = ringLineWidth\n    context.strokeStyle = \"#ddd\"\n    context.beginPath();\n    context.moveTo(x2a, y2a);\n    context.lineTo(x1a, y1a);\n    context.stroke();\n  })\n  // Arrow Heads\n  decConnections.forEach(([a, b], i ) =&gt; {\n    const [x1, y1] = decPoints[a]\n    const [x2, y2] = decPoints[b]\n    const lineAngle = Math.atan2(y2 - y1, x2 - x1)\n    const xl = x2 - 79 * Math.cos(lineAngle - (15 / 360) * 2 * Math.PI)\n    const yl = y2 - 79 * Math.sin(lineAngle - (15 / 360) * 2 * Math.PI)\n    const xr = x2 - 79 * Math.cos(lineAngle + (15 / 360) * 2 * Math.PI)\n    const yr = y2 - 79 * Math.sin(lineAngle + (15 / 360) * 2 * Math.PI)\n    const x2a = x2 - 22 * Math.cos(lineAngle)\n    const y2a = y2 - 22 * Math.sin(lineAngle)\n    const x = x2 - 60 * Math.cos(lineAngle)\n    const y = y2 - 60 * Math.sin(lineAngle)\n    context.fillStyle = hsl10[i]\n    context.strokeStyle = window.darkmode ? \"#aaa\" : \"#333\";\n    context.lineWidth = 1\n    context.beginPath();\n    context.moveTo(x2a, y2a);\n    context.lineTo(xl, yl);\n    context.lineTo(xr, yr);\n    context.lineTo(x2a, y2a);\n    context.fill();\n    context.stroke();\n    context.fillStyle = yiq(hsl10[i]) &gt; 0.51 ? \"#000\" : \"white\"\n    context.fillText(i, x, y + 8)\n  })\n  // Labels\n  decPoints.forEach(([x, y], i) =&gt; {\n    context.lineWidth = 1\n    context.fillStyle = hsl10[i]\n    context.strokeStyle = window.darkmode ? \"#aaa\" : \"#333\";\n    context.beginPath();\n    context.arc(x, y, 22, 0, 2 * Math.PI);\n    context.fill();\n    context.stroke();\n    context.fillStyle = yiq(hsl10[i]) &gt; 0.51 ? \"#000\" : \"white\";\n    context.fillText(i, x, y + 8)\n  })\n})\n\n\n\n\n\n\n\n// https://observablehq.com/@observablehq/categorical-palette-tool\ndisplayPalette(hsl10.slice(0, 10), {darkMode: true})\n\n\n\n\n\n\n\n// https://observablehq.com/@pjedwards/compass-rose-as-legend-with-colors\nsvg`&lt;svg width=\"${size}\" height=\"${size}\" viewBox=\"${-size/2} ${-size/2} ${size} ${size}\"&gt;\n  &lt;g transform='rotate(${Math.round(-colorD * .36)})'&gt;\n  ${repeat(tick(radius, 5, '#434343'), 5 * 4 * 10)}\n  ${repeat(tick(radius, 8), 10 * 4)}\n  ${repeat(`&lt;path d=\"M 0,-${radius+12} l 3,10 l -6,0 z\" fill=\"black\" stroke=\"black\" stroke-width=\"1\"/&gt;`, 4, 0)}\n  ${repeat(`&lt;path d=\"M 0,-${radius+12} l 3,10 l -6,0 z\" fill=\"white\" stroke=\"black\" stroke-width=\"1\"/&gt;`, 4, 45)}\n  &lt;circle r=\"${radius}\" fill=\"#d3d3d3\" stroke=\"#434343\" stroke-width=\"3\" /&gt;\n  ${repeat(directionMarker(radius+14, 24), 4, 0)}\n  ${repeat(directionMarker(radius+12, 24), 4, 45)}\n  ${repeat(turnMarker(radius+14, 32), 4, 0)}\n  ${repeat(turnMarker(radius+12, 32), 4, 45)}\n  ${repeat(pie(radius-margin/2, 2 * Math.PI * (radius-margin/2) / deccolors.length / 2, 1, deccolors), deccolors.length, 360/deccolors.length)}\n&lt;/svg&gt;\n`\n\n\n\n\n\n\n\n// https://observablehq.com/@paavanb/progressive-color-picker\ndecBar = colorbar({\n  colorFn: t =&gt; hslToRgb(dec2hue(t) / 1000, colorS / 1000, colorL / 1000),\n  onSelect: t =&gt; {\n    set(viewof colorD, t * 1000)\n    onUpdateHSL(dec2hue(t), colorS / 1000, colorL / 1000)\n  }\n})\n\n\n\n\n\n\n\n\nHue saturation lightness (hsl)\n\n// https://observablehq.com/@paavanb/progressive-color-picker\n{ const input = Inputs.range([0, 1000], { label: \"Hue\", value: 0, step: 1 })\n  input.value = initialHSL[0]\n  input.oninput = (evt) =&gt; onUpdateHSL(dec2hue(evt.currentTarget.value / 1000), colorS / 1000, colorL / 1000)\n  return Inputs.bind(input, viewof colorD)\n}\n\n\n\n\n\n\n\n// https://observablehq.com/@paavanb/progressive-color-picker\n{ const input = Inputs.range([0, 1000], { label: \"Saturation\", value: 1000, step: 1, })\n  input.oninput = (evt) =&gt; onUpdateHSL(colorD, evt.currentTarget.value / 1000, colorL / 1000)\n  return Inputs.bind(input, viewof colorS)\n}\n\n\n\n\n\n\n\n// https://observablehq.com/@paavanb/progressive-color-picker\n{ const input = Inputs.range([0, 1000], { label: \"Lightness\", value: 500, step: 1, })\n  input.oninput = (evt) =&gt; onUpdateHSL(colorD, colorS / 1000, evt.currentTarget.value / 1000)\n  return Inputs.bind(input, viewof colorL)\n}\n\n\n\n\n\n\n\n\nCourse color table\n\n\n\n\n\n\n\n\n\n\n\n\n\\(\\text m\\alpha\\)üß≠\nc¬∞üß≠\nh¬∞üé®\nhexüé®\n\n\n\n\n\n\n\n\n\n\n\nNE\n125\n45\n44\nfb0\n\n\nE\n250\n90\n68\ndf0\n\n\nSE\n375\n135\n96\n6f0\n\n\nS\n500\n180\n180\n0ff\n\n\nSW\n625\n225\n216\n06f\n\n\nW\n750\n270\n264\n60f\n\n\nNW\n875\n315\n292\nd0f\n\n\nN\n0\n0\n0\nf00\n\n\n\n\nThe colorüé®wheel compassüß≠above indicates both a hue in milliturns (mt) and a course in \\(\\text m\\alpha\\). We can convert the hue to HSL and HSV degrees (h¬∞) and the course to compassüß≠degrees (c¬∞): 25 \\(\\text m\\alpha\\) = 9 c¬∞. To rotateüîÑthe colorüé®wheel compassüß≠, use the ‚ÄúHue‚Äù rangeüéöÔ∏èand hue bar inputs beneath it or change the course from Point 0 to 1 on the mapüó∫Ô∏è.\n\n\nRed green blue (rgb)\nThe table beneath the hue bar compares the current Point 0 to 1 course in its top row with the cardinal and intercardinal directions. Together, the rangeüéöÔ∏èinputs underneath the hue bar form a ‚ÄúHue Saturation Lightness‚Äù (HSL) triplet. Like ‚ÄúRed Green Blue‚Äù (RGB) or hexadecimal (hex) triplets, HSL triplets specify a full-fledged colorüé®instead of just a hue.\n\n\n\n\n\n\nBad Pun Alert\n\n\n\nFeeling disorientedüòµ‚Äçüí´? Of course you are! Colorüé®labelsüè∑Ô∏ècan help you find your bearings, stay on track, and avoid heading achesü§ï. Orange you glad I couldn‚Äôt think of a colorüé®pun?\n\n\nColorüé®can provide a general idea of angularüìêmeasure, regardless of the metric prefixes or units we use. Therefore, we can reuse‚ôªÔ∏ècolorsüé®across many different contexts. Most often, red designates starting points, like North (0 \\(\\text m\\alpha\\)) and Longitude 0 (0 \\(\\text m\\lambda\\)), and cyan denotes midpoints, such as South (500 \\(\\text m\\alpha\\)) and Longitude 5 (500 \\(\\text m\\lambda\\)).\nThe Equator (0 \\(\\text m\\phi\\)) is the major latitude midway between the South (-250 \\(\\text m\\phi\\)) and North (250 \\(\\text m\\phi\\)) Poles. Unlike the Equator, the Tropics of Cancer‚ôã(65 \\(\\text m\\phi\\)) and Capricorn‚ôëÔ∏è(-65 \\(\\text m\\phi\\)) and the Arctic (250 \\(\\text m\\phi\\) ‚Äì 65 \\(\\text m\\phi\\) = 185 \\(\\text m\\phi\\)) and Antarctic (65 \\(\\text m\\phi\\) ‚Äì 250 \\(\\text m\\phi\\) = -185 \\(\\text m\\phi\\)) Circles are defined by the axial tilt of the Earthüåè(65 mt).\n\n\nDec time zones\nEnable the ‚ÄúGrid‚Äù toggle‚úÖinput to see Latitudes -2 (-200 \\(\\text m\\phi\\)), -1 (-100 \\(\\text m\\phi\\)), 0 (0 \\(\\text m\\phi\\)), 1 (100 \\(\\text m\\phi\\)), and 2 (200 \\(\\text m\\phi\\)) on the mapüó∫Ô∏èabove along with the ten major longitudes that divide the Earthüåéinto the ten Dec time zones. Notably, Longitude 0 is the major longitude that functions as both the Prime Meridian and International Date Line in Dec.\nLike the ten major longitudes that separate them, Dec time zones are numbered 0 to 9. Based on its current deciparallel (d\\(\\lambda\\)) longitude, , Point 0 on the mapüó∫Ô∏èabove is in Zone . The number assigned to each time zone is its offset from Zone 0 in decidays (dd). To obtain the dd offset at a location, we floor its d\\(\\lambda\\) longitude: ‚åä‚åã = .\n\nviewof longitude = Inputs.range([0, 10], {label: \"Longitude\", value: .5, step: .01})\n\n\n\n\n\n\nEach Dec time zone is 1 d\\(\\lambda\\) wide and 0.5 \\(\\phi\\) long. While 1 \\(\\phi\\) is always ~1 c long, the length of a \\(\\lambda\\) varies by latitude. At the Equator, 1 \\(\\lambda\\) is ~1 c long. At the North or South Pole, the length of a \\(\\lambda\\) is zero. The approximate c length of a \\(\\lambda\\) is the cosine of its latitude in \\(\\phi\\), rad, or ¬∞, depending on the input requirement of our cosine function: cos() = .\n\nviewof latitude = Inputs.range([-.25, .25], {label: \"Latitude\", value: 0, step: .001})\n\n\n\n\n\n\n\nviewof costype = Inputs.radio([\"turns\", \"radians\", \"degrees\"], {label: \"Cosine input\", value: \"turns\"})\n\n\n\n\n\n\n\n\nDates and times\nDec dates consist of a year and a ‚Äúday of year‚Äù (doy), whereas Dec times are composed of a ‚Äútime of day‚Äù (tod) and a ‚Äútime zone offset‚Äù (tzo). Each of these components can have its own colorüé®labelüè∑Ô∏è. In Zone 0, the current date is + and the current time is -0. Dates and time can be combined into snapsü´∞: +-0.\n\n\nMillenium Year Day\nYear colorüé®labelsüè∑Ô∏èare based on millimillennia (mk). Every millennium starts with Year 0 (0 mk) and has Year 500 (500 mk) as its midpoint. Doy colorüé®labelsüè∑Ô∏èare derived from milliyears (my). Every year starts on Day 0 (0 my). The midyear point (500 my) is noon (500 md) on Day 182 in common years and midnight (0 md) on Day 183 in leap years.\n\n\nDay of dek (dod)\nEach doy also has two components. The first two digits of a three-digit doy represent a group of ten days called a decaday (dek). The last digit of a doy is the ‚Äúday of dek‚Äù (dod). In Dec, deks are used instead of months and weeks. Likewise, Dec uses dods in lieu of days of month (doms) and days of week (dows). In Zone 0, it is currently Dek  and Dod .\n\n\n\nZone equatorial meter (zem)\n\n Wikimedia\n\nApart from c, Dec also measures distance using a unit called the zone equatorial meter (zem). The width of a Dec time zone at the Equator is approximately ten million (~107) zems. Similarly, the distance from the Equator to one of the Poles is ~107 meters. In other words, a decimeridian (\\(\\text d\\phi\\)) is ~107 zems long and a quarter meridian is ~107 meters long.\n\n\n\n\n    \n        \n            \n            \n        \n        \n            \n                \n                \n            \n        \n\n\n \n  Adobe PDF library 6.66\n \n \n \n \n \n \n  2010-03-06T19:45:34Z\n  2008-03-27T12:07:11+01:00\n  Illustrator\n  2008-03-27T16:40:58+01:00\n  \n   \n    \n     JPEG\n     256\n     160\n     /9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA\nAQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK\nDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f\nHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAoAEAAwER\nAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA\nAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB\nUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE\n1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ\nqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy\nobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp\n0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo\n+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9KaVpWlnS7MmzgJMEdT6\nafyD2xVFfonSv+WKD/kUn9MVd+idK/5YoP8AkUn9MVd+idK/5YoP+RSf0xV36J0r/lig/wCRSf0x\nV36J0r/lig/5FJ/TFXfonSv+WKD/AJFJ/TFXfonSv+WKD/kUn9MVd+idK/5YoP8AkUn9MVd+idK/\n5YoP+RSf0xV5L/zjFaWl1+Wjy3MMc8v6Uvl5yqHagl2FWB6Yq9a/ROlf8sUH/IpP6Yq79E6V/wAs\nUH/IpP6Yq79E6V/yxQf8ik/pirv0TpX/ACxQf8ik/pirv0TpX/LFB/yKT+mKu/ROlf8ALFB/yKT+\n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\n    \n   \n  \n \n \n  uuid:db0c57f4-dad3-11dc-b3c0-003065732f80\n \n \n  image/svg+xml\n  \n   \n    keyboard.ai\n   \n  \n \n\n\n            \n        \n    \nWikimedia\n\nLength area volume\nYou can approximate a zem (z) using your handsü§≤. With your palms flat on a table in front of you and the tips of your thumbsüëçtouching, the maximum distance between the tips of your pinkies is ~1 z. When you spread out the fingers on one hand‚úãor do the ‚Äúcall me‚Äù, ‚Äúdrink‚Äù, or ‚Äúshaka‚Äùü§ôgesture, your thumbüëçand pinky tips are ~0.5 z apart.\n\n\n Wikimedia\nTo visualize a square zem (z2), imagine four people standing in a circle, facing inward, each with their right hand‚úãplaced on top of the elbow of the person to their right. Alternatively, two people can stand in front of each other and raise their armsüí™, placing one hand‚úãon the elbow of the other person and the other hand‚úãon their own elbow.\n\n\n Wikimedia\nYou can approximate a z2 yourself by sitting in a chairü™ëor standingüßçwith your knees and feetü¶∂1 z, 4 decimeters (dm), or 16 inches apart, which is probably about the width of your hips or shoulders. The z2 will be between your shins, its top will be below your knees, and its bottom will be either above your ankles or feetü¶∂, depending on your height.\n\n\n\n\n\n\n\n    \n        \n        \n    \n\n\n\n\n\n\n\n\n\n    \n        \n            \n    \n    \n        \n            \n    \n    \n        \n            \n    \n    \n        \n            \n    \n    \n        \n            \n    \n    \n        \n            \n    \n    \n        \n            \n    \n    \n        \n            \n    \n    \n        \n            \n    \n    \n        \n            \n    \n    \n        \n            \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n    \n        \n            \n    \n    \n    \n    \n    \n    \n    \n\n    \n        \n            \n    \n    \n    \n    \n    \n    \n    \nz3\nDimensions.com\n\n\nTypical seat height\nAccording to dimensions.com, 115 centizems (cz) is the typical seat height for both men and women age 25 to 45. A boxüì¶that is the size of a cubic zem (z3) would likely fit under a typical chairü™ë or in between the shins of two people sitting in front of each other with their knees and feetü¶∂1 z apart and their legsü¶µbent at 25 centiturn (ct) anglesüìê.\nIn Slovaküá∏üá∞, zem means Earthüåç. This is fitting because all Dec units are based on physical attributes of the Earthüåè. At the Equator, the Earthüåérotates on its axis at a speed of 1.00224 v. If we could indefinitely maintain this speed while flying West in an airplane‚úàÔ∏ètowards the setting sun‚òÄÔ∏è, we would be able to perpetually fly into the sunsetüåÖ.\n\n\nSpeed of sound\nTo travel fast enough, the airplane‚úàÔ∏èwould need to surpass the speed of soundüîä, which at 15 ¬∞ Celsius and 1 standard atmosphere is 0.735048 v or Mach 1. Mach numbers are not as reliable as v, because they are relative to the speed of soundüîä, which varies greatly by air temperature and pressure. The cruising speed of a Boeing 747 is 0.54 v or Mach 0.85.\nThe highwayüõ£Ô∏èspeed of a carüöóis roughly tenfold slower than the cruising speed of an airplane‚úàÔ∏è. If we are driving on a highwayüõ£Ô∏èat a speed of 50 mv and our exit is 1000 z away, we will have 20 centimillidays until we have to exit the highwayüõ£Ô∏è. To ensure we do not miss our exit, we can periodically check a countdown of the remaining z: .\n\n\n\nTen equal temperament (Xet)\nDec refers to centimillidays as beats (b) because they are similar in duration to heart‚ù§Ô∏èbeats or musical beats. A d is 100 centiday (cd), 105 b, or 106 microdays (\\(\\micro\\text d\\)). One mc is 100 kilozems (kz), 105 z, 106 decizems (dz), or 106 nanotaurs (nc). Therefore, mv = \\(\\text{mc}\\over\\text d\\) = \\(\\text {kz}\\over\\text {cd}\\) = \\(\\text z\\over\\text b\\) = \\(\\text {dz}\\over\\micro\\text d\\) = \\(\\text {nc}\\over\\micro\\text d\\). A cd is 96% of a quarter hour and a b is 86.4% of a second.\n\nBeats per milliday (bpm)\nA normal resting heart‚ù§Ô∏èrate is between 100 and 166.6 b per md (BPM). The unofficial anthem of the Dec measurement system, ‚ÄúTurn the beat around‚Äù, has a tempo of 188.64 BPM, which corresponds to the allegro tempo marking. A Dec clock‚è∞ticks at a rate of 100 BPM, \\(\\text b^{-1}\\), \\(1\\over\\text b\\), or 1 inverse of b (iob), which is 1.15740 times more frequent than a Hertz.\n\n\nFrequency period wavelength\nWe can divide one by the soundüîäfrequency selected by the ‚ÄúIobs‚Äù rangeüéöÔ∏èinput below to get its period, 1 √∑  kiloiobs (ki) =  millibeats (mb), or divide the speed of soundüîäby it to get its wavelength: 735048 microomegars (\\(\\micro\\text v\\)) √∑  iobs (i) =  millizem (mz). Press the Play‚ñ∂Ô∏èbutton below to hear the chosen frequency for a duration of  b.\n\n// https://observablehq.com/@freedmand/sounds\nviewof iobs = Inputs.range([1, 9999], { step: 1,  value: 380, label: \"Iobs\" })\n\n\n\n\n\n\n\n// https://observablehq.com/@freedmand/sounds\nviewof beats = Inputs.range([1, 999], { step: 1,  value: 1, label: \"Beats\" })\n\n\n\n\n\n\n\n// https://observablehq.com/@freedmand/sounds\nPlay((t) =&gt; Math.sin(iobs / .864 * t * 2 * Math.PI), beats * .864)\n\n\n\n\n\n\nThe positive (+) and negative (‚Äì) indexes, hex triplets, and h¬∞ in the table below are used by Dec to labelüè∑Ô∏ègroups of ten, like dods, ‚Äútop of the dd‚Äù tods, and time zones. In addition to colorsüé®, Dec also labelsüè∑Ô∏ègroups of ten with the musical notes that constitute the Dec chromatic (Dechromatic) scale of the Ten equal temperament (Tenet) musical system.\nTenet (Xet) identifies each Dechromatic scale note with a single-digit integer and expresses all other possible soundüîäfrequencies as decimal numbers. In contrast, the notes of the 12 equal temperament (12ET) musical system have names that consist of a letter from A to G and a symbol such as sharp (‚ôØ), half sharp (ùÑ≤), flat (‚ô≠), and half flat (ùÑ≥).\nThe soundüîäfrequencies of two consecutive Xet Dechromatic scale notes always differ by one step (s), but the differences between consecutive 12ET chromatic scale notes vary from the ~599 millisteps (ms) between A‚ôØ and B to the ~1067 ms between G‚ôØ and A. A typical person can reliably distinguish soundsüîäthat differ by at least 200 ms.\nThe rightmost column of the table below shows the 12ET notes that are closest to the Xet Dechromatic scale notes. 12ET considers BùÑ≤, DùÑ≤, and EùÑ≥ to be microtones. The soundüîäfrequency differences between the nearest Xet and 12ET notes in the table range from the 8 ms between Notes 9 and A to the ~87 ms between Notes 5 and F.\n\n\nColor sound table\n\n\n\n\n\n\n\n\n\n\n\n+\n‚Äì\nhexüé®\nh¬∞üé®\n12ETüé∂\n\n\n\n\n0\n-10\nf00\n0\nA‚ôØ\n\n\n1\n-9\nf90\n36\nBùÑ≤\n\n\n2\n-8\nff0\n60\nC‚ôØ\n\n\n3\n-7\naf0\n80\nDùÑ≤\n\n\n4\n-6\n0f0\n120\nEùÑ≥\n\n\n5\n-5\n0ff\n180\nF\n\n\n6\n-4\n08f\n208\nF‚ôØ\n\n\n7\n-3\n00f\n240\nG\n\n\n8\n-2\n90f\n276\nG‚ôØ\n\n\n9\n-1\nf0f\n300\nA\n\n\n\n\n\npiano(width)\n\n\n\n\n\n\n\n\nOctave + note = tone\nThe image above applies Dec colorüé®labelsüè∑Ô∏èto one octave of pianoüéπkeys. In Xet, an octave is 10 s or 104 ms. The text below the image provides from top to bottom the scientific pitch name, integer i soundüîäfrequency, and integer mz wavelength of the corresponding white key. As octave indexes and frequency increase, wavelength decreases.\nOctave indexes in Xet and 12ET match except for Xet notes with indexes below 2 and 12ET notes from A‚ôØ to BùÑ≤. From the perspective of Xet, all of the labeledüè∑Ô∏èkeys in the image above are in Octave 4. When we append a positive note index that is less than ten to an octave index which is a positive integer, we obtain a Xet musical tone index.\nThe tone indexes of the the labeledüè∑Ô∏èkeys in the image above range from 40.069 to 49.008. Tone 49.008 is A4, the A note widely used to tune musical instruments. Tone 41.302 is C4, the ‚ÄúMiddle C‚Äù in between the bass and trebleüéºclefs of a grand staff. The typical audible range for humans extends from Tone 03 to Tone 104.\nBy default, each Xet note or tone lasts one musical beat. Xet modifies the duration of notes and tones by appending √ó and a multiplier or √∑ and a divisor. The first two measures of the chorus from ‚ÄúTurn the beat around‚Äù are shown below and can be expressed in Xet as Octave 4 and a series of notes followed by a rest (‚àÖ): 9 9√∑2 8 8 6√ó4 ‚àÖ.\n\nabcjs = require('https://bundle.run/abcjs@5.1.2/midi.js')\ncode = `\nM:4/4\nL:1/4\nK:A\ny A A/2G/2- G/2 G F/2- | F3 z |\nw: Turn the~ ~beat _ ~a- ~round\n`\nabc(code, true)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction abc(tune, midi = false, notation = true) {\n    function colorRange(range, color) {\n        if (range && range.elements) {\n            range.elements.forEach(function(set) {\n                set.forEach(function(item) {\n                    item.setAttribute(\"fill\", color);\n                });\n            });\n        }\n    }\n    const result = html `&lt;div/&gt;`;\n    if (notation) {\n        const notation = result.appendChild(html `&lt;div/&gt;`);\n        var abcElem = (abcjs.renderAbc(notation, tune));\n    }\n    if (midi) {\n        result.appendChild(html `&lt;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css\"/&gt;&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"https://unpkg.com/abcjs@5.1.2/abcjs-midi.css\"/&gt;`);\n        const midi = result.appendChild(html `&lt;div/&gt;`);\n        abcjs.renderMidi(midi, tune, {\n            midiListener: function(a, b, c) {},\n            animate: {\n                listener: function(a, b, c) {\n                    colorRange(a, \"#000000\");\n                    colorRange(b, \"#3D9AFC\");\n                },\n                target: abcElem[0],\n                qpm: abcElem[0].getBpm()\n            }\n        });\n        //  abcjs.midi.startPlaying(document.querySelector(\".abcjs-inline-midi\"),true)\n    }\n    return result;\n}\n\n\n\n\n\n\n\n\n\n\n\nUS customary units\nThe unit conversion table below shows the United Statesüá∫üá∏(US) customary units that Dec redefines. The values in the first column are approximate fold changes from original to redefined units. A fold change of 1 means 0 change. Identical fold changes indicate US customary units derived from the same Dec and International System of Units (SI) units.\n\nUnit conversion table\n\n\n\nUS\nDec\nSI\n\n\n\n\n1.0356 miles\n\\(25\\over6\\) kz\n\\(5\\over3\\) km\n\n\n0.9843 yards\n\\(9\\over4\\) z\n9 dm\n\n\n0.9843 feet\n\\(3\\over4\\) z\n3 dm\n\n\n0.9843 inches\n\\(1\\over16\\) z\n25 mm\n\n\n0.9884 acres\n\\(1\\over40\\) kz2\n\\(1\\over250\\) km2\n\n\n1.0725 square miles\n\\(625\\over36\\) kz2\n\\(25\\over9\\) km2\n\n\n0.9688 square yards\n\\(81\\over16\\) z2\n81 dm2\n\n\n0.9688 square feets\n\\(9\\over16\\) z2\n9 dm2\n\n\n0.9688 square inches\n\\(1\\over256\\) z2\n625 mm2\n\n\n1.1023 pounds\n500 g\n500 g\n\n\n1.0567 barrels\n2 z3\n128 L\n\n\n1.0567 kegs\n1 z3\n64 L\n\n\n1.0567 gallons\n\\(1\\over16\\) z3\n4 L\n\n\n1.0567 quarts\n\\(1\\over64\\) z3\n1 L\n\n\n1.0567 pints\n\\(1\\over128\\) z3\n500 mL\n\n\n1.0567 cups\n\\(1\\over256\\) z3\n250 mL\n\n\n1.0821 wineglass\n1 dz3\n64 mL\n\n\n1.0821 ounces\n\\(1\\over2\\) dz3\n32 mL\n\n\n1.0821 tablespoons\n\\(1\\over4\\) dz3\n16 mL\n\n\n\n\n\nMiles per hour (mph)\nUnlike Dec and SI, the US customary measurement system does not use metric prefixes to scale units by powers of ten. Redefined US customary units serve as convenient reference points. US customary volume units have intuitive names and scale by powers of two. Miles are redefined such that 1 mile per hour is equal to 1 mv or \\(5\\over3\\) kilometers (km) per hour.\n\n\nHexamilliare wineglass keg\nA square kilozem (kz2) is 1 hexakilare, 16 hectares, 1600 ares, 40 Dec acres, 0.16 square kilometers (km2), ~0.062 Dec square miles, or 106 z2. A z2 is a hexamilliare (x), 16 square decimeters (dm2), 1.7 Dec square feetü¶∂, or 256 Dec square inches. A square decazem (Dz2) is 1 hexadeciare, 16 square meters (m¬≤), ~19.75 Dec square yards, or 100 x.\nA cubic decizem (dz3) is 1 cubic nanotaur (nc3), 2 Dec ounces, or 64 milliliters (mL). A dz3 of waterüåäweighs 64 grams (g). Even though a Dec ounce of waterüåäweighs close to a sixteenth of a Dec pound, Dec does not measure weights in ounces. A z3 is 16 Dec gallons or 64 liters (L). A z3 of waterüåäweighs 64 kilograms (kg) or 128 Dec pounds.\n\n\n Wikimedia\n\n\nBody mass index (bmi)\nIf Leonardo da Vinci‚Äôs Vitruvian Man were 4 z tall, we could measure 1 z from his knees to his feetü¶∂or from his elbowsüí™to his fingertips. If he also weighed 64 kg, his Body Mass Index (BMI) would be 4 \\(\\text {kg}\\over\\text z^2\\) or 25 \\(\\text {kg}\\over\\text m^2\\). A normal BMI ranges from 2.96 to 4 \\(\\text {kg}\\over\\text z^2\\) or 18.5 to 25 \\(\\text {kg}\\over\\text m^2\\). A BMI of  kg √∑  z2 =  \\(\\text {kg}\\over\\text z^2\\) =  \\(\\text {kg}\\over\\text m^2\\) is considered .\n\nviewof kilograms = Inputs.range([0, 1000], {label: \"Kilograms\", value: 64, step: .1})\n\n\n\n\n\n\n\nviewof zems = Inputs.range([0, 10], {label: \"Zems\", value: 4, step: 0.01})\n\n\n\n\n\n\n\n\nCentizem centimeter inch\n\n Wikimedia\n\nThe longest length depicted in the image of a rulerüìèabove is 1 dz, 1 nc, 4 centimeters (cm), or \\(8\\over5\\) Dec inches, and the shortest length is \\(1\\over2\\) mz, \\(1\\over5\\) millimeters (mm), \\(1\\over125\\) Dec inches, or \\(1\\over127\\) US customary inches. A US customary inch is \\(127\\over2\\) mz, \\(127\\over5\\) mm, or \\(127\\over125\\) Dec inches. A Dec inch is \\(5\\over2\\) cm. A cm is \\(5\\over2\\) cz. A z is 4 dm. A dm is 4 Dec inches.\n\n\n\nSummary\nThis article introduces the Dec measurement system and describes how Dec uses metric prefixes and the properties of the planet Earthüåçto define units based on turns for geographic coordinates, compassüß≠directions, dates, times, speeds, distances, areas, volumes, and weights. Each unit has a unique name, such as \\(\\lambda\\), \\(\\phi\\), \\(\\alpha\\), y, d, b, v, c, z, or x.\nDec attempts to bridge the gap, improve interoperability, and faciliate conversion between the US customary and SI measurement systems by redefining US customary units. Redefinition of US customary units makes inches ~1.58% shorter, miles ~3.56% longer, pints ~5.67% larger, ounces ~8.21% larger, and pounds ~10.23% heavier.\nDec colorüé®labelsüè∑can convey an impression of a value at a glance. Xet soundüîälabelsüè∑allow us to estimate a value without even having to look at it. Both types of labels can help avoid confusion when decimal separators appear, disappear, or move due to a measurement unit change such as the addition, removal, or replacement of a metric prefix.\n\n\nNext\nNow that you have had a taste of Dec, I hope that you are hungry for more! If so, diveü§ødeeper into Dec dates and times before tackling Dec snapsü´∞and spansüåà. My filter, include, and script articles discuss the Quarto publishing system and how I display Dec dates in the navigation bar, title block, and citation section of each article on my website.\n\n\n\n\n\n%%{init: {'theme': 'default', 'themeVariables': { 'fontSize': '32px'}}}%%\nflowchart LR\n   A[Dec]--&gt;B[date]--&gt;C[time]--&gt;D[snap]--&gt;E[span]\n   Z[  ]:::empty~~~F[Quarto]--&gt;G[filter]--&gt;H[include]--&gt;I[script]\n   classDef empty width:0px;\n   click A \"/dec\"\n   click B \"/dec/date\"\n   click C \"/dec/time\"\n   click D \"/dec/snap\"\n   click E \"/dec/span\"\n   click F \"/quarto\"\n   click G \"/quarto/filter\"\n   click H \"/quarto/include\"\n   click I \"/quarto/script\"\n\n\n\n\n\n\n\n\nCite\nPlease support Dec by citing it as shown at the bottom of this article. Listed below are citations for the Observable notebooks that I adapted into the mapüó∫Ô∏è, colorüé®wheel compassüß≠, and other visualizations above. The list also includes citations for three works that predate the French Revolution and three more recent articles published on websites.\nIn his 1704 book entitled Optiks, Isaac Newton presented the first colorüé®wheel and linked its colorsüé®to musical notes. On 2025+080, I read The Color of Sound by Clint Goss, which presents a method of connecting musical notes to colorsüé®via their frequencies. The note and colorüé®pairs in that article are similar to those of the Dechromatic scale.\nIn 1754, Jean le Rond d‚ÄôAlembert lauded the benefits of decimalisation. In 1788, Claude Boniface Collignon proposed measuring length in dz or nc and tracking time in deks, dd, md, \\(\\micro\\text d\\), and nanodays (nd). On 2025+039, I saw the definition of a zem, 1 z = 10-8 c = 40 cm, in a table of ten possible length units from a 2004 arxiv article.\nThe fundamental properties of Dec dates are defined by algorithms developed by Howard Hinnant and described in his 2021 article entitled chrono-Compatible Low-Level Date Algorithms. On 2024+285, I found a 2014 article which proposed a decimal time system with twenty time zones, each five cd wide, based on Longitude 05 (50 \\(\\text m\\lambda\\)).\n\n\nAgnoli, Paolo & D‚ÄôAgostini, Giulio. 2004+330. ‚ÄúWhy does the meter beat the second?‚Äù . https://arxiv.org/abs/physics/0412078.\nArmstrong, Zan 2023+057. ‚ÄúText color annotations in markdown.‚Äù . https://observablehq.com/@observablehq/text-color-annotations-in-markdown.\nBostock, Mike 2020+335. ‚ÄúTime Zones.‚Äù . https://observablehq.com/@mbostock/time-zones.\nBostock, Mike 2022+037. ‚ÄúSolar Terminator.‚Äù . https://observablehq.com/@d3/solar-terminator.\nBostock, Mike 2023+314. ‚ÄúInput: Table.‚Äù . https://observablehq.com/@observablehq/input-table.\nClements, John. 2014+091, ‚ÄúDecimal Time Zones.‚Äù . https://www.brinckerhoff.org/blog/2014/05/31/decimal-time-zones.\nClint Goss. 2022+098. ‚ÄúColor of Sound.‚Äù . https://www.flutopedia.com/sound_color.htm.\nCollignon, Claude Boniface. 1788. ‚ÄúD√©couverte d‚Äô√©talons justes, naturels, invariables et universels.‚Äù . https://archive.org/details/dcouvertedtalon00collgoog/page/n68/mode/2up.\nEdwards, Paul. 2022+171. ‚ÄúCompass Rose as legend with colors.‚Äù . https://observablehq.com/@pjedwards/compass-rose-as-legend-with-colors.\nFreedman, Dylan. 2017+345. ‚ÄúSounds.‚Äù . https://observablehq.com/@freedmand/sounds.\nGordon, Marcus A.. 2018+288. ‚ÄúWavelengths and Spectral Colours.‚Äù . https://observablehq.com/@magfoto/wavelengths-and-spectral-colours.\nHarmath, D√©nes. 2018+104. ‚ÄúABC.‚Äù . https://observablehq.com/@thsoft/abc.\nHinnant, Howard. 2021+184. ‚Äúchrono-Compatible Low-Level Date Algorithms.‚Äù . https://howardhinnant.github.io/date_algorithms.html.\nJohnson, Ian 2021+121. ‚ÄúDraggable World Map Coordinates Input.‚Äù . https://observablehq.com/@enjalot/draggable-world-map-coordinates-input.\nLim, Maddie 2018+330. ‚ÄúEnneagram.‚Äù . https://observablehq.com/@maddievision/enneagram.\nNewton, Issac. 1704. ‚ÄúOpticks.‚Äù . https://doi.org/10.5479/sil.302475.39088000644674.\nPaavanb. 2024+006. ‚ÄúProgressive Color Picker.‚Äù . https://observablehq.com/@paavanb/progressive-color-picker.\nPatel, Amit. 2021+290. ‚ÄúCompass Rose.‚Äù . https://observablehq.com/@paavanb/progressive-color-picker.\nPettiross, Jeff 2024+150. ‚ÄúCategorical color scheme test tool.‚Äù . https://observablehq.com/@observablehq/categorical-palette-tool\nRieder, Lukas 2023+032. ‚ÄúEditable table.‚Äù . https://observablehq.com/@parlant/editable-table.\nRivi√®re, Philippe 2022+259. ‚ÄúAdd a class to an observable input.‚Äù . https://observablehq.com/@recifs/add-a-class-to-an-observable-input--support.\nRivi√®re, Philippe 2023+330. ‚ÄúD3 Projections.‚Äù . https://observablehq.com/@fil/d3-projections.\nYamahata, Christophe 2021+119. ‚ÄúGreat circle: shortest distance between two locations on Earth üåè.‚Äù . https://observablehq.com/@christophe-yamahata/great-circle-shortest-distance-between-two-locations-on-ea.\nd‚ÄôAlembert, Jean le Rond. 1754. ‚ÄúDecimal.‚Äù Encyclop√©die, 4, 670. . https://artflsrv04.uchicago.edu/philologic4.7/encyclopedie0922/navigate/4/3458.\n\n\n\nfunction createTable(data, options) {\n  let table = html`&lt;table class=\"editable-table\"&gt;&lt;/table&gt;`;\n  table.innerHTML = xss.filterXSS(tableify.default(data));\n  makeTableEditable(table, options);\n  return table;\n}\ntable.setAttribute(\"class\", \"table\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntableify = import(\"https://cdn.skypack.dev/tableify@1.1.1?min\")\nxss = import(\"https://cdn.skypack.dev/xss@1.0.14?min\")\nfunction createCellDiv(value, max) {\n  return `&lt;div style=\"\n    width: ${Math.abs(value) / max}%;\n    float: left;\n    padding: 0px 0px 0px 2px;\n    text-indent: 2px;\n    box-sizing: border-box;\n    overflow: visible;\n    white-space: nowrap;\n    display: flex;\n    justify-content: start;\"&gt;${Math.round(value)}&lt;/div&gt;`\n}\nliveTable = observeTable(table)\nfunction makeTableEditable(table, options) {\n  const defaults = {headerEditable: false, appendRows: true};\n  options = options === undefined ? {} : options;\n  for (let key in defaults) {\n    options[key] = options[key] === undefined ? defaults[key] : options[key];\n  }\n  return Generators.observe((_notify) =&gt; {\n    const navigate = (event) =&gt; {\n      const cell = event.target;\n      const row = cell.closest('tr');\n      const table = row.closest('table');\n      const isBody = row.parentNode.tagName === 'TBODY';\n      const isHeader = row.parentNode.tagName === 'THEAD';\n      const colIndex = cell.cellIndex;\n      const colCount = row.cells.length;\n      const rowIndex = row.rowIndex;\n      const rowCount = table.rows.length;\n      const headStop = options.headerEditable ? 0 : 1;\n      let direction = null;\n      let x = colIndex;\n      let y = rowIndex;\n      if (![\n      // https://www.freecodecamp.org/news/javascript-keycode-list-keypress-event-key-codes#heading-a-full-list-of-key-event-values\n        8, 9, 13, 16, 17, 18, 27, 33, 34, 35, 36, 37, 38, 39, 40, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 109, 189\n      ].includes(event.which)) {\n        event.preventDefault();\n      }\n      else {\n      switch(event.code) {\n        // Tab cycles through the table, adding new rows as needed.\n        case 'Tab':\n          event.preventDefault();\n          if (event.altKey || event.shiftKey) {\n            direction = -1;\n            if (x - 1 &lt; 0) {\n              if (y - 1 &lt; headStop) break;\n              x = colCount - 1;\n              y = y - 1;\n            } else {\n              x = x - 1;\n            }\n          } else {\n            direction = 1;\n            if (x + 1 === colCount) {\n              x = 0;\n              y = y + 1;\n            } else {\n              x = x + 1;\n            }\n          }\n          break;\n        // Plain Enter navigates downwards.\n        // Shift + Enter or Alt + Enter goes up to the cell above.\n        case 'Enter':\n          event.preventDefault();\n          if (event.altKey || event.shiftKey) {\n            direction = -1;\n            x = x;\n            y = y - 1;\n          }\n          else {\n            direction = 1;\n            x = x;\n            y = y + 1;\n          }\n          break;\n        // The arrow keys allow you to navigate through cells.\n        // No new rows are added.\n        case 'ArrowUp':\n        case 'ArrowDown':\n        case 'ArrowLeft':\n        case 'ArrowRight':\n        case 'Enter':\n          if (!event.altKey) break;\n          event.preventDefault();\n          switch(event.code) {\n            case 'ArrowUp':\n              direction = -1;\n              y = Math.max(y - 1, headStop);\n              break;\n            case 'ArrowDown':\n              direction = 1;\n              y = Math.min(y + 1, rowCount - 1);\n              break;\n            case 'ArrowLeft':\n              direction = -1;\n              x = Math.max(x - 1, 0);\n              break;\n            case 'ArrowRight':\n              direction = 1;\n              x = Math.min(x + 1, colCount - 1);\n              break;\n          }\n          break;\n      }\n      if (direction !== null) {\n        let nextRow;\n        if (y === rowCount) {\n          nextRow = options.appendRows ? addRowRelativeTo(row, direction) : row;\n        } else {\n          nextRow = table.rows[y];\n        }\n        let nextCell = nextRow.cells[x];\n        focusCell(nextCell);\n      }\n    };\n    }\n    table.addEventListener(\"keydown\", navigate, false);\n    if (table.rows.length &gt; 0) {\n      for (let row of table.rows) {\n        if (!options.headerEditable && row.rowIndex === 0) continue;\n        for (let cell of row.cells) {\n        if (cell.cellIndex === 0) continue;\n          let cellValue = cell.innerText\n          cell.innerHTML = `&lt;div style=\"\n            width: ${Math.abs(cellValue) / (cell.cellIndex === 2 ? 2.5 : 10)}%;\n            float: left;\n            padding: 0px 0px 0px 2px;\n            text-indent: 2px;\n            box-sizing: border-box;\n            overflow: visible;\n            white-space: nowrap;\n            display: flex;\n            justify-content: start;\"&gt;${cellValue}&lt;/div&gt;`\n        if (cell.cellIndex === 3) continue;\n          cell.contentEditable = true;\n        }\n      }\n    }\n    return () =&gt; table.removeEventListener(\"keydown\", navigate);\n  });\n}\nfunction observeTable(table) {\n  return Generators.observe((notify) =&gt; {\n    const keyinput = (event) =&gt; notify(parseTableData(table));\n    table.addEventListener(\"input\", keyinput, false);\n    notify(parseTableData(table));\n    return () =&gt; window.removeEventListener(\"input\", keyinput);\n  });\n}\nfunction parseTableData(table) {\n  const header = [];\n  const data = [];\n  for (let row of table.rows) {\n    const rowIndex = row.rowIndex;\n    const isHeader = row.parentNode.tagName === 'THEAD' && rowIndex === 0;\n    let obj = {};\n    for (let cell of row.cells) {\n      const head = header[cell.cellIndex];\n      if (isHeader) {\n        header.push(cell.innerText);\n      } else {\n        obj[head] = cell.innerText;\n      }\n    }\n    if (!isHeader) data.push(obj);\n  }\n  return JSON.parse(JSON.stringify(data));\n}\nfunction focusCell(td) {\n  const s = window.getSelection();\n  const r = document.createRange();\n  let textNode = td.childNodes[0];\n  const i = td.innerText.length;\n  td.focus();\n  if (textNode) {\n    r.setStart(textNode, i);\n    r.setEnd(textNode, i);\n  } else {\n    r.selectNode(td);\n  }\n  s.removeAllRanges();\n  s.addRange(r);\n}\nfunction addRowRelativeTo(tr, direction) {\n  const newTr = document.createElement('tr');\n  const insertPosition = direction == 1 ? 'afterend' : 'beforebegin';\n  tr.insertAdjacentElement(insertPosition, newTr);\n  for (let _td of Array.from(tr.children)) {\n    const newTd = document.createElement('td');\n    newTd.appendChild(document.createTextNode(''));\n    newTd.contentEditable = true;\n    newTr.appendChild(newTd);\n  }\n  return newTr;\n}\n// https://observablehq.com/@observablehq/text-color-annotations-in-markdown\nrstbtn = d3.create('button').html('Reset').attr(\"id\", \"rstbtn\").attr(\"class\", \"btn btn-quarto\");\n// https://observablehq.com/@recifs/add-a-class-to-an-observable-input--support\nfunction labelToggle(inputType, inputLabel, inputValue, inputId) {\n  const input = inputType({label: inputLabel, value: inputValue});\n  input.setAttribute(\"id\", inputId);\n  return input;\n}\n// https://observablehq.com/@observablehq/synchronized-inputs\nfunction set(input, value) {\n  input.value = value;\n  input.dispatchEvent(new Event(\"input\", {bubbles: true}));\n}\n// https://observablehq.com/@observablehq/input-table\n// https://stackoverflow.com/a/52079217\n// Converts from degrees to radians.\nfunction toRadians(degrees) { return degrees * Math.PI / 180; };\n// Converts from radians to degrees.\nfunction toDegrees(radians) { return radians * 180 / Math.PI; }\nfunction coor2bear(strt, dest) {\n  const [strtLng, strtLat] = strt.map(toRadians);\n  const [destLng, destLat] = dest.map(toRadians);\n  return (toDegrees(Math.atan2(\n    Math.sin(destLng - strtLng) * Math.cos(destLat),\n    Math.cos(strtLat) * Math.sin(destLat) - Math.sin(strtLat) * Math.cos(destLat) * Math.cos(destLng - strtLng)\n  )) + 360) % 360;\n}\nfunction yiq(color) {\n  const {r, g, b} = d3.rgb(color);\n  return (r * 299 + g * 587 + b * 114) / 1000 / 255; // returns values between 0 and 1\n}\nfunction textcolor(content, style = {}) {\n  const {\n    background,\n    color = yiq(background) &gt; 0.51 ? \"#000\" : \"white\",\n    padding = \"0 5px\",\n    borderRadius = \"4px\",\n    fontWeight = 400,\n    fontFamily = \"monospace\",\n    ...rest\n  } = typeof style === \"string\" ? {background: style} : style;\n  return htl.html`&lt;span style=${{\n    background,\n    color,\n    padding,\n    borderRadius,\n    fontWeight,\n    fontFamily,\n    ...rest\n  }}&gt;${content}&lt;/span&gt;`;\n}\nfunction turn2comp(turn) {\n  return [\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\"][Math.round(turn / 125) % 8]\n}\nfunction dec2rgb(d) {\n  const color = d3.color(piecewiseColor(d % 1))\n  return [color.r, color.g, color.b]\n}\nfunction dec2hue(d) {\n  return rgbToHsl(...dec2rgb(d))[0] * 1000\n}\npiecewiseColor = d3.piecewise(d3.interpolateRgb, [\n  \"#f00\",    //  0   0 red\n  \"#f50\",    //  0.25  20 yr\n  \"#f60\",    //  0.5   24 yr orangered\n  \"#f70\",    //  0.75  28 yr\n  \"#f90\",    //  1     36 yr orange\n  \"#fb0\",    //  1.25  44 yr\n  \"#fc0\",    //  1.5   48 yr yelloworange\n  \"#fd0\",    //  1.75  52 yr\n  \"#ff0\",    //  2     60 yellow\n  \"#ef0\",    //  2.25  64 gy\n  \"#df0\",    //  2.5   68 gy limeyellow\n  \"#cf0\",    //  2.75  72 gy\n  \"#af0\",    //  3     80 gy lime\n  \"#8f0\",    //  3.25  88 gy\n  \"#7f0\",    //  3.5   92 gy greenlime\n  \"#6f0\",    //  3.75  96 gy\n  \"#0f0\",    //  4    120 green\n  \"#0f7\",    //  4.25 148 cg\n  \"#0f9\",    //  4.5  156 cg cyangreen\n  \"#0fb\",    //  4.75 164 cg\n  \"#0ff\",    //  5    180 cyan\n  \"#0cf\",    //  5.25 192 bc\n  \"#0bf\",    //  5.5  196 bc azurecyan\n  \"#0af\",    //  5.75 200 bc\n  \"#08f\",    //  6    208 bc azure\n  \"#06f\",    //  6.25 216 bc\n  \"#05f\",    //  6.5  220 bc blueazure\n  \"#04f\",    //  6.75 224 bc\n  \"#00f\",    //  7    240 blue\n  \"#50f\",    //  7.25 260 mb\n  \"#60f\",    //  7.5  264 mb purpleblue\n  \"#70f\",    //  7.75 268 mb\n  \"#90f\",    //  8    276 mb purple\n  \"#b0f\",    //  8.25 284 mb\n  \"#c0f\",    //  8.5  288 mb violetpurple\n  \"#d0f\",    //  8.75 292 mb\n  \"#f0f\",    //  9    300 magenta\n  \"#f0a\",    //  9.25 320 rm\n  \"#f08\",    //  9.5  328 rm\n  \"#f06\",    //  9.75 336 rm\n  \"#f00\",    //  0        0 red\n])\nhueMtr = Math.round(colorD)\nhueDeg = dec2hue(colorD / 1000) * .36\nhStr = `hsl(${hueDeg}`\nslStr = `, ${colorS / 10}%, ${colorL / 10}%)`\nhslStr = hStr + slStr\nbkgH = ({background: hStr + \", 100%, 50%)\"})\nbkgHsl = ({background: hslStr})\nrainbowMtr = textcolor(hueMtr, bkgHsl)\nrainbowDir = textcolor(turn2comp(hueMtr), bkgHsl)\nrainbowDegC = textcolor(Math.round(colorD *.36), bkgHsl)\nrainbowDegH = textcolor(Math.round(hueDeg), bkgHsl)\nrainbowHex = textcolor(shortenHex(d3.color(hslStr).formatHex()).slice(1), bkgHsl)\nrainbowN5zn = textcolor('-5', d3.color(`hsl(180${slStr}`).formatHex())\nrainbowP583 = textcolor('5.83ÃÖ', d3.color(`hsl(129.88235294117646${slStr}`).formatHex())\n// Show preview swatches of color\npreview = () =&gt; {\n  const container = DOM.element('div')\n  d3.select(container).attr('style', 'display: flex;')\n  d3.select(container)\n    .append('div')\n      .text('Selected')\n      .style('font-weight', 'bold')\n    .append('div')\n      .classed('swatch', true)\n      .style('background-color', `hsl(${dec2hue(colorD / 1000) * .36}, ${colorS / 10}%, ${colorL / 10}%`);\n  d3.select(container)\n    .append('div')\n      .text('Preview')\n      .style('font-style', 'italic')\n    .append('div')\n      .classed('swatch', true)\n      .style('background-color', `rgb(${hoverRGB[0]}, ${hoverRGB[1]}, ${hoverRGB[2]}`)\n  d3.select(container).selectAll('div.swatch')\n    .style('width', '100px')\n    .style('height', '100px')\n    .style('margin-right', '8px')\n    .style('padding', '4px')\n  return container\n}\n// The currently hovered color\nmutable hoverRGB = [255, 0, 0]\n/**\n * Draw an interactive color bar\n * @param colorFn (t: number) =&gt; [number, number, number] Given a position on the bar (between 0 and 1), return its RGB\n * @param onSelect (t: number) =&gt; void Callback for when a position is selected on the bar\n */\nfunction colorbar({colorFn, onSelect}) {\n  const WIDTH = 360\n  const HEIGHT = 32\n  const container = DOM.element('div')\n  function handleSelect(coords) {\n    const t = coords[0] / WIDTH\n    onSelect(t)\n  }\n  let isDragging = false\n  const canvas = d3.select(container).append('canvas')\n    .attr('width', WIDTH)\n    .attr('height', HEIGHT)\n    .attr('style', 'cursor: crosshair; border: 1px solid black; border-radius: 2px;')\n    .on('mousedown', function() {\n      isDragging = true\n      handleSelect(d3.mouse(this))\n    })\n    .on('mouseup', () =&gt; { isDragging = false; })\n    .on('mousemove', function() {\n      const coords = d3.mouse(this)\n      if (isDragging) {\n        handleSelect(coords)\n      }\n      mutable hoverRGB = colorFn(coords[0] / WIDTH)\n    })\n  const ctx = canvas.node().getContext('2d')\n  const imgData = ctx.getImageData(0, 0, WIDTH, HEIGHT)\n  // Possible optimization: cache d3.range so we're not recalculating it a million times\n  d3.range(WIDTH).forEach(colIdx =&gt; {\n    const t = colIdx / WIDTH\n    const rgb = colorFn(t)\n    d3.range(HEIGHT).forEach(rowIdx =&gt; {\n      const screenIdx = rowIdx * WIDTH + colIdx\n      const imgDataIdx = 4 * screenIdx\n      imgData.data[imgDataIdx] = rgb[0]\n      imgData.data[imgDataIdx + 1] = rgb[1]\n      imgData.data[imgDataIdx + 2] = rgb[2]\n      imgData.data[imgDataIdx + 3] = 255\n    })\n  });\n  ctx.putImageData(imgData, 0, 0)\n  return container;\n}\ninitialRGB = [255, 0, 0]\ninitialHSL = rgbToHsl(...initialRGB)\nviewof colorR = Inputs.input(initialRGB[0])\nviewof colorG = Inputs.input(initialRGB[1])\nviewof colorB = Inputs.input(initialRGB[2])\nviewof colorD = Inputs.input(dec2hue(initialHSL[0]))\nviewof colorS = Inputs.input(1000)\nviewof colorL = Inputs.input(500)\nviewof colorA = Inputs.input(1000)\n/**\n * Update all color values based on current HSL\n */\nonUpdateHSL = function(h, s, l) {\n  const rgb = hslToRgb(h / 1000, s / 1000, l / 1000)\n  console.log(h)\n  set(viewof colorR, rgb[0])\n  set(viewof colorG, rgb[1])\n  set(viewof colorB, rgb[2])\n}\n/**\n * Credit to github.com/mjackson Source: https://gist.github.com/mjackson/5311256\n * Converts an RGB color value to HSL. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and l in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSL representation\n */\nfunction rgbToHsl(r, g, b) {\n  r /= 255, g /= 255, b /= 255;\n  var max = Math.max(r, g, b), min = Math.min(r, g, b);\n  var h, s, l = (max + min) / 2;\n  if (max == min) {\n    h = s = 0; // achromatic\n  } else {\n    var d = max - min;\n    s = l &gt; 0.5 ? d / (2 - max - min) : d / (max + min);\n    switch (max) {\n      case r: h = (g - b) / d + (g &lt; b ? 6 : 0); break;\n      case g: h = (b - r) / d + 2; break;\n      case b: h = (r - g) / d + 4; break;\n    }\n    h /= 6;\n  }\n  return [ h, s, l ];\n}\n/**\n * Credit to github.com/mjackson Source: https://gist.github.com/mjackson/5311256\n * Converts an HSL color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n * Assumes h, s, and l are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   {number}  h       The hue\n * @param   {number}  s       The saturation\n * @param   {number}  l       The lightness\n * @return  {Array}           The RGB representation\n */\nfunction hslToRgb(h, s, l){\n    let r, g, b;\n    if(s == 0){\n        r = g = b = l; // achromatic\n    } else {\n        let q = l &lt; 0.5 ? l * (1 + s) : l + s - l * s;\n        let p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1/3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1/3);\n    }\n    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n}\n/**\n * Credit github.com/mjackson. Source: https://gist.github.com/mjackson/5311256\n */\nfunction hue2rgb(p, q, t) {\n  if (t &lt; 0) t += 1;\n  if (t &gt; 1) t -= 1;\n  if (t &lt; 1/6) return p + (q - p) * 6 * t;\n  if (t &lt; 1/2) return q;\n  if (t &lt; 2/3) return p + (q - p) * (2/3 - t) * 6;\n  return p;\n}\n// https://observablehq.com/@maddievision/simple-canvas\npixelRatio = window.devicePixelRatio;\ncreateCanvas = (width, height) =&gt; {\n  const canvas = document.createElement('canvas');\n  canvas.width = width * pixelRatio;\n  canvas.height = height * pixelRatio;\n  canvas.style.width = width + 'px';\n  canvas.style.height = height + 'px';\n  return canvas\n}\nrenderWithScale = (context, renderFunction) =&gt; {\n  context.save();\n  context.scale(pixelRatio, pixelRatio);\n  renderFunction()\n  context.restore();\n}\nquickRender = (width, height, renderer) =&gt; {\n  const canvas = createCanvas(width, height)\n  const context = canvas.getContext('2d')\n  renderWithScale(context, () =&gt; {\n    renderer(context)\n  })\n  return canvas\n}\n// http://howardhinnant.github.io/date_algorithms.html#civil_from_days\nfunction unix2dote(unix, zone, offset = 719468) {\n  return [(unix ?? Date.now()) / 86400000 + (\n    zone = zone ?? -Math.round(\n      (new Date).getTimezoneOffset() / 144)\n    ) / 10 + offset, zone]\n}\nfunction unix2dote1(unix, zone, offset = 719468) {\n  return [(unix ?? Date.now()) / 86400000 + (\n    zone = zone ?? (-Math.round(\n      (new Date).getTimezoneOffset() / 144) + 10) % 10\n    ) / 10 + offset, zone]\n}\noctConnections = [\n  [0, 4],\n  [1, 5],\n  [2, 6],\n  [3, 7],\n  [4, 0],\n  [5, 1],\n  [6, 2],\n  [7, 3],\n]\ndecConnections = [\n  [0, 5],\n  [1, 6],\n  [2, 7],\n  [3, 8],\n  [4, 9],\n  [5, 0],\n  [6, 1],\n  [7, 2],\n  [8, 3],\n  [9, 4]\n]\nhsl8 = [\n  `hsl(0, ${colorS / 10}%, ${colorL / 10}%)`,   // 0\n  `hsl(44, ${colorS / 10}%, ${colorL / 10}%)`, // 875\n  `hsl(68, ${colorS / 10}%, ${colorL / 10}%)`, // 750\n  `hsl(96, ${colorS / 10}%, ${colorL / 10}%)`, // 625\n  `hsl(180, ${colorS / 10}%, ${colorL / 10}%)`, // 500\n  `hsl(216, ${colorS / 10}%, ${colorL / 10}%)`, // 375\n  `hsl(264, ${colorS / 10}%, ${colorL / 10}%)`, // 250\n  `hsl(292, ${colorS / 10}%, ${colorL / 10}%)`, // 125\n]\nhsl10 = [\n  `hsl(0, ${colorS / 10}%, ${colorL / 10}%)`, // red\n  `hsl(36, ${colorS / 10}%, ${colorL / 10}%)`, // orange\n  `hsl(60, ${colorS / 10}%, ${colorL / 10}%)`, // yellow\n  `hsl(80, ${colorS / 10}%, ${colorL / 10}%)`, // lime\n  `hsl(120, ${colorS / 10}%, ${colorL / 10}%)`, // green\n  `hsl(180, ${colorS / 10}%, ${colorL / 10}%)`, // cyan\n  `hsl(208, ${colorS / 10}%, ${colorL / 10}%)`, // azure\n  `hsl(240, ${colorS / 10}%, ${colorL / 10}%)`, // blue\n  `hsl(276, ${colorS / 10}%, ${colorL / 10}%)`, // violet\n  `hsl(300, ${colorS / 10}%, ${colorL / 10}%)`, // magenta\n  `hsl(0, ${colorS / 10}%, ${colorL / 10}%)`, // red\n]\nhsla10 = [\n  `hsla(0, ${colorS / 10}%, ${colorL / 10}%, ${colorA / 10}%)`, // red\n  `hsla(36, ${colorS / 10}%, ${colorL / 10}%, ${colorA / 10}%)`, // orange\n  `hsla(60, ${colorS / 10}%, ${colorL / 10}%, ${colorA / 10}%)`, // yellow\n  `hsla(80, ${colorS / 10}%, ${colorL / 10}%, ${colorA / 10}%)`, // lime\n  `hsla(120, ${colorS / 10}%, ${colorL / 10}%, ${colorA / 10}%)`, // green\n  `hsla(180, ${colorS / 10}%, ${colorL / 10}%, ${colorA / 10}%)`, // cyan\n  `hsla(208, ${colorS / 10}%, ${colorL / 10}%, ${colorA / 10}%)`, // azure\n  `hsla(240, ${colorS / 10}%, ${colorL / 10}%, ${colorA / 10}%)`, // blue\n  `hsla(276, ${colorS / 10}%, ${colorL / 10}%, ${colorA / 10}%)`, // violet\n  `hsla(300, ${colorS / 10}%, ${colorL / 10}%, ${colorA / 10}%)`, // magenta\n  `hsla(0, ${colorS / 10}%, ${colorL / 10}%, ${colorA / 10}%)`, // red\n]\nfunction dote2date(dote, zone = 0) {\n  const cote = Math.floor((\n      dote &gt;= 0 ? dote\n      : dote - 146096\n    ) / 146097),\n  dotc = dote - cote * 146097,\n  yotc = Math.floor((dotc\n    - Math.floor(dotc / 1460)\n    + Math.floor(dotc / 36524)\n    - Math.floor(dotc / 146096)\n  ) / 365);\n  return [\n    yotc + cote * 400,\n    dotc - (yotc * 365\n      + Math.floor(yotc / 4)\n      - Math.floor(yotc / 100)\n  ), zone]}\nsunLonHsl = textcolor(sunLon, `hsl(${d3.hsl(piecewiseColor(sunLon % 1000 / 1000)).h}` + slStr)\nsunLatHsl = textcolor(sunLat, `hsl(${d3.hsl(piecewiseColor((sunLat + 1000) % 1000 / 1000)).h}` + slStr)\ndz = unix2dote(now)\nydz = dote2date(...dz)\ndecZone = ydz[2]\ndecZonePos = (decZone + 10) % 10\ndecSign = decZone &lt; 0 ? \"+\" : \"‚Äì\"\nydzP0 = dote2date(...unix2dote(now, 0))\ndecYearP0 = ydzP0[0]\ndecYdaP0 = ydzP0[1]\ndecDateP0 = Math.floor(decYdaP0)\ndecTimeP0 = ydzP0[1] % 1\ndecDekP0 = Math.floor(decDateP0 / 10)\ndecDodP0 = decDateP0 % 10\ndecYearP0hsl0 = textcolor(decYearP0, `hsl(${d3.hsl(piecewiseColor(decYearP0 % 1000 / 1000)).h}` + slStr)\ndecYearP0hsl1 = textcolor(decYearP0, `hsl(${d3.hsl(piecewiseColor(decYearP0 % 1000 / 1000)).h}` + slStr)\ndecDateP0hsl0 = textcolor(decDateP0.toString().padStart(3, \"0\"), `hsl(${d3.hsl(piecewiseColor(decDateP0 / (365 + isLeapP0))).h}` + slStr)\ndecDateP0hsl1 = textcolor(decDateP0.toString().padStart(3, \"0\"), `hsl(${d3.hsl(piecewiseColor(decDateP0 / (365 + isLeapP0))).h}` + slStr)\ndecYdaP0hsl = textcolor(decYdaP0.toFixed(5).padStart(9, \"0\"), `hsl(${d3.hsl(piecewiseColor(decYdaP0 / (365 + isLeapP0))).h}` + slStr)\ndecTimeP0hsl0 = textcolor((decTimeP0 * 10).toFixed(4), `hsl(${d3.hsl(piecewiseColor(decTimeP0)).h}` + slStr)\ndecTimeP0hsl1 = textcolor((decTimeP0 * 10).toFixed(4), `hsl(${d3.hsl(piecewiseColor(decTimeP0)).h}` + slStr)\ndecDekP0hsl = textcolor(decDekP0, `hsl(${d3.hsl(piecewiseColor(decDekP0 / 37)).h}` + slStr)\ndecDodP0hsl = textcolor(decDodP0, `hsl(${d3.hsl(piecewiseColor(decDodP0 / 10)).h}` + slStr)\ndecLon = longitude % 10\ndecLonHsl = textcolor(parseFloat(decLon.toFixed(2)), `hsl(${d3.hsl(piecewiseColor(decLon / 10)).h}` + slStr)\ndecZon = Math.floor(decLon)\ndecZonHsl = textcolor(decZon, `hsl(${d3.hsl(piecewiseColor(decZon / 10)).h}` + slStr)\nparLat = textcolor(parseFloat(latitude.toFixed(3)), `hsl(${d3.hsl(piecewiseColor((latitude + 1) % 1)).h}` + slStr)\nparCos = Math.cos(latitude * 2 * Math.PI)\nparLen = textcolor(parseFloat(parCos.toFixed(3)), `hsl(${d3.hsl(piecewiseColor(parCos)).h}` + slStr)\nconversionFactor = costype === \"turns\" ? \"\" : costype === \"radians\" ?  tex`\\,\\tau\\!` : tex`\\times360`\nzemsLeft = 1000 - 50 * Math.floor(now / 86400000 % 1 * 1000 % 1 * 100 % 21)\nzLeft = textcolor(zemsLeft, `hsl(${d3.hsl(piecewiseColor(zemsLeft / 1000)).h}` + slStr)\npoint0long = long2turn(Place_A[0], 1)\npoint0zone = Math.floor(point0long)\npoint0lHsl = textcolor(parseFloat(point0long.toFixed(2)), `hsl(${d3.hsl(piecewiseColor(point0long / 10)).h}` + slStr)\npoint0zHsl = textcolor(point0zone, `hsl(${d3.hsl(piecewiseColor(point0zone / 10)).h}` + slStr)\nisLeapP0 = decYearP0 % 4 == 0 && decYearP0 % 100 != 0 || decYearP0 % 400 == 0;\ntimezones = FileAttachment(\"../asset/timezones.json\").json()\nzones = topojson.feature(timezones, timezones.objects.timezones).features\nmesh = topojson.mesh(timezones, timezones.objects.timezones)\ncolor = d3.scaleSequential(d3.interpolateRdBu).domain([-12, 14])\ncoor = [[[-18, -89.98], [-18, 89.98], [18, 89.98], [18, -89.98], [-18, -89.98], ]]\ndeczones = [...Array(10).keys()].map(\n  i =&gt; ({\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [coor[0].map(t =&gt; [t[0]+36*i, t[1]])]\n      },\n    \"properties\": []\n  })\n)\n// https://observablehq.com/@enjalot/draggable-world-map-coordinates-input\n// https://observablehq.com/@christophe-yamahata/great-circle-shortest-distance-between-two-locations-on-ea\nfunction worldMapCoordinates(config = {}, dimensions) {\n  var n_point;\n  var lonA, lonB, latA, latB;\n  const {\n    value = [], title, description, width = dimensions[0]\n  } = Array.isArray(config) ? {value: config} : config;\n  const height = dimensions[1];\n  [lonA, latA] = value[0];\n  [lonB, latB] = value[1];\n  lonA = lonA != null ? lonA : 90;\n  latA = latA != null ? latA : 0.025;\n  lonB = lonB != null ? lonB : -90;\n  latB = latB != null ? latB : 36;\n  const formEl = html`&lt;form style=\"width: ${width}px;\"&gt;&lt;/form&gt;`;\n  const context = DOM.context2d(width, height);\n  const canvas = context.canvas;\n  const projection = config[2]\n    .precision(0.1)\n    .fitSize([width, height], { type: \"Sphere\" });\n  const path = d3.geoPath(projection, context).pointRadius(2.5);\n  formEl.append(canvas);\n  function fillMesh(f) {\n    context.beginPath();\n    path(f);\n    context.fillStyle = color(f.properties.zone);\n    context.fill();\n    context.innerHTML = `&lt;title&gt;${f.properties.places} ${f.properties.time_zone}&lt;/title&gt;`;\n  }\n  function draw(lon0, lat0, lon1, lat1) {\n    if (!utctoggle) {\n      context.beginPath(); path({type: \"Sphere\"});\n      context.fillStyle = window.darkmode ? \"#007FFF\" : mapcolors.ocean;\n      context.fill();\n      if (gridtoggle) {\n        deczones.map((f, i) =&gt;  {\n          context.beginPath();\n          path(f);\n          context.fillStyle = hsla10[i];\n          context.fill();\n        })\n      }\n    }\n    if (utctoggle) {\n      zones.map(f =&gt; fillMesh(f))\n    }\n    context.beginPath();\n    path(land);\n    if (!utctoggle) {\n      context.fillStyle = window.darkmode ? \"#0808\" : mapcolors.land;\n      context.fill();\n    }\n    context.strokeStyle = `#000`;\n    context.stroke();\n    if (bordertoggle) {\n      context.beginPath();\n      path(borders);\n      context.lineWidth = 1.25;\n      context.strokeStyle = window.darkmode ? \"#aaa\" : \"#333\";\n      context.stroke();\n    }\n    if (utctoggle) {\n      context.beginPath();\n      path(mesh);\n      context.lineWidth = 1.25;\n      context.strokeStyle = `#999`;\n      context.stroke();\n    }\n    if (gridtoggle) {\n      context.beginPath();\n      path(graticule);\n      context.lineWidth = 1.25;\n      context.strokeStyle = utctoggle || !window.darkmode ? \"#000\" : \"#fff\";\n      context.stroke();\n      // context.font = width &lt; 760 ? \"12px serif\" : \"21px serif\";\n      // context.fillStyle = `#000`;\n      // d3.range(-1.5, 342 + 1, 36).map(x =&gt;  context.fillText(long2zone(x), ...projection([x, 27.5])));\n      // d3.range(-1.5, 342 + 1, 36).map(x =&gt;  context.fillText(long2zone(x), ...projection([x, -48])));\n      // d3.range(-18, 336 + 1, 36).map(x =&gt; context.fillText(formatLongitude(x), ...projection([x, 90])));\n      // d3.range(-18, 336 + 1, 36).map(x =&gt; context.fillText(formatLongitude(x), ...projection([x, -90])));\n    }\n    if (suntoggle) {\n      context.beginPath();\n      path(night);\n      context.fillStyle = \"rgba(0,0,255,0.3)\";\n      context.fill();\n      context.beginPath();\n      path.pointRadius(width / 84 + 5);\n      path({type: \"Point\", coordinates: sun});\n      context.strokeStyle = \"#0009\";\n      context.fillStyle = \"#ff0b\";\n      context.lineWidth = 1;\n      context.stroke();\n      context.fill();\n    }\n    if (lon0 != null && lat0 != null) {\n      const pointPath = { type: \"MultiPoint\", coordinates: [[lon0, lat0]], id: \"point0test\"};\n      context.beginPath();\n      path.pointRadius(point_radius_2);\n      path(pointPath);\n      context.fillStyle = window.darkmode ? \"#A24\" : \"#FDF\";\n      context.fill();\n      context.strokeStyle = window.darkmode ? \"white\" : \"black\";\n      context.stroke();\n    }\n    if (lon1 != null && lat1 != null) {\n      const pointPath = { type: \"MultiPoint\", coordinates: [[lon1, lat1]] };\n      context.beginPath();\n      path.pointRadius(point_radius_2);\n      path(pointPath);\n      context.fillStyle = window.darkmode ? \"#24B\" : \"#BFF\";\n      context.fill();\n      context.strokeStyle = window.darkmode ? \"white\" : \"black\";\n      context.stroke();\n    }\n    // We draw the path between 2 points\n    var interpolation = d3.geoInterpolate([lon0,lat0],[lon1,lat1]);\n    var nb_points =  d3.geoDistance([lon0,lat0],[lon1,lat1])*20;\n    for(let i = 1; i&lt;nb_points; i++) {\n      const pointPath = { type: \"MultiPoint\", coordinates: [interpolation(i/nb_points)] };\n      path.pointRadius(point_radius);\n      context.beginPath(),\n      context.fillStyle = window.darkmode ? \"#FF420E\" : \"orange\",\n      path(pointPath),\n      context.strokeStyle = window.darkmode ? \"white\" : \"black\";\n      context.fill(),\n      context.stroke();\n    }\n  }\n  draw(lonA, latA, lonB, latB);\n  canvas.onclick = function(ev) {\n    const { offsetX, offsetY } = ev;\n    var coords = projection.invert([offsetX, offsetY]);\n    if(n_point==0){\n    lonA = +coords[0].toFixed(2);\n    latA = +coords[1].toFixed(2);\n      n_point = 1;\n    }else{\n    lonB = +coords[0].toFixed(2);\n    latB = +coords[1].toFixed(2);\n      n_point = 0;\n    }\n    const point0bear = Math.round(lati2turn(coor2bear([lonA, latA], [lonB, latB])))\n    set(viewof colorD, point0bear)\n    table.rows[1].cells[1].innerHTML = createCellDiv(long2turn(lonA), 10)\n    table.rows[2].cells[1].innerHTML = createCellDiv(long2turn(lonB), 10)\n    table.rows[1].cells[2].innerHTML = createCellDiv(lati2turn(latA) % 250, 2.5)\n    table.rows[2].cells[2].innerHTML = createCellDiv(lati2turn(latB) % 250, 2.5)\n    table.rows[1].cells[3].innerHTML = createCellDiv(point0bear, 10)\n    table.rows[2].cells[3].innerHTML = createCellDiv(lati2turn(coor2bear([lonB, latB], [lonA, latA])), 10)\n    draw(lonA, latA, lonB, latB);\n    canvas.dispatchEvent(new CustomEvent(\"input\", { bubbles: true }));\n  };\n  function resetlatlon() {\n    lonA = -90;\n    latA = 0;\n    lonB = -90;\n    latB = 36;\n    set(viewof bordertoggle, false);\n    set(viewof gridtoggle, false);\n    set(viewof suntoggle, false);\n    set(viewof utctoggle, false);\n    set(viewof yaw, 500);\n    set(viewof pitch, 0);\n    set(viewof roll, 0);\n    set(viewof select, projections.find(t =&gt; t.name === \"Equirectangular (plate carr√©e)\"));\n    set(viewof colorD, 0)\n    set(viewof colorS, 1000)\n    set(viewof colorL, 500)\n    table.rows[1].cells[1].innerHTML = createCellDiv(800, 10)\n    table.rows[2].cells[1].innerHTML = createCellDiv(800, 10)\n    table.rows[1].cells[2].innerHTML = createCellDiv(0, 2.5)\n    table.rows[2].cells[2].innerHTML = createCellDiv(100, 2.5)\n    table.rows[1].cells[3].innerHTML = createCellDiv(0, 10)\n    table.rows[2].cells[3].innerHTML = createCellDiv(500, 10)\n    draw(lonA, latA, lonB, latB);\n    canvas.dispatchEvent(new CustomEvent(\"input\", { bubbles: true }));\n  }\n  table.onkeyup = function(ev) {\n   if ([\n    // https://www.freecodecamp.org/news/javascript-keycode-list-keypress-event-key-codes#heading-a-full-list-of-key-event-values\n      9, 13, 27\n    ].includes(ev.which)) {\n      lonA = turn2long(liveTable[0].Milliparallel);\n      latA = turn2degr(liveTable[0].Millimeridian % 250);\n      lonB = turn2long(liveTable[1].Milliparallel);\n      latB = turn2degr(liveTable[1].Millimeridian % 250);\n      const point0bear = Math.round(lati2turn(coor2bear([lonA, latA], [lonB, latB])))\n      set(viewof colorD, point0bear)\n      table.rows[1].cells[1].innerHTML = createCellDiv(long2turn(lonA), 10)\n      table.rows[2].cells[1].innerHTML = createCellDiv(long2turn(lonB), 10)\n      table.rows[1].cells[2].innerHTML = createCellDiv(lati2turn(latA) % 250, 2.5)\n      table.rows[2].cells[2].innerHTML = createCellDiv(lati2turn(latB) % 250, 2.5)\n      table.rows[1].cells[3].innerHTML = createCellDiv(point0bear, 10)\n      table.rows[2].cells[3].innerHTML = createCellDiv(lati2turn(coor2bear([lonB, latB], [lonA, latA])), 10)\n      draw(lonA, latA, lonB, latB);\n      canvas.dispatchEvent(new CustomEvent(\"input\", { bubbles: true }));\n    } else if ([\n    // https://www.freecodecamp.org/news/javascript-keycode-list-keypress-event-key-codes#heading-a-full-list-of-key-event-values\n      8, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 109, 189\n    ].includes(ev.which)) {\n      lonA = turn2long(liveTable[0].Milliparallel);\n      latA = turn2degr(liveTable[0].Millimeridian % 250);\n      lonB = turn2long(liveTable[1].Milliparallel);\n      latB = turn2degr(liveTable[1].Millimeridian % 250);\n      const point0bear = Math.round(lati2turn(coor2bear([lonA, latA], [lonB, latB])))\n      set(viewof colorD, point0bear)\n      table.rows[1].cells[3].innerHTML = createCellDiv(point0bear, 10)\n      table.rows[2].cells[3].innerHTML = createCellDiv(lati2turn(coor2bear([lonB, latB], [lonA, latA])), 10)\n      draw(lonA, latA, lonB, latB);\n      canvas.dispatchEvent(new CustomEvent(\"input\", { bubbles: true }));\n    }\n  }\n  rstbtn.on('click', resetlatlon);\n  document.getElementsByClassName(\"quarto-color-scheme-toggle\")[0].onclick = function (e) {\n    window.quartoToggleColorScheme();\n    window.darkmode = document.getElementsByTagName(\"body\")[0].className.match(/quarto-dark/) ? true : false;\n    draw(lonA, latA, lonB, latB);\n    return false;\n  };\n  const form = input({\n    type: \"worldMapCoordinates\",\n    title,\n    description,\n    display: v =&gt; \"\",\n     // html`&lt;div style=\"width: ${width}px; white-space: nowrap; color: #444; text-align: center; font: 13px sans-serif; margin-bottom: 5px;\"&gt;\n     //       &lt;span style=\"color: ${color_A}\"&gt;Longitude: ${lonA != null ? lonA.toFixed(2) : \"\"}&lt;/span&gt;\n     //       &nbsp; &nbsp;\n     //       &lt;span style=\"color: ${color_A}\"&gt;Latitude: ${latA != null ? latA.toFixed(2) : \"\"} &lt;/span&gt;\n     //     &lt;/div&gt;\n     //     &lt;div style=\"width: ${width}px; white-space: nowrap; color: #444; text-align: center; font: 13px sans-serif; margin-bottom: 5px;\"&gt;\n     //       &lt;span style=\"color: ${color_B}\"&gt;Longitude: ${lonB != null ? lonB.toFixed(2) : \"\"}&lt;/span&gt;\n     //       &nbsp; &nbsp;\n     //       &lt;span style=\"color: ${color_B}\"&gt;Latitude: ${latB != null ? latB.toFixed(2) : \"\"}&lt;/span&gt;\n     //     &lt;/div&gt;`,\n    getValue: () =&gt; [[lonA != null ? lonA : null, latA != null ? latA : null], [lonB != null ? lonB : null, latB != null ? latB : null]],\n    form: formEl\n  });\n  return form;\n}\npoint_radius = width / 900 * mapsize / 100 + 3\npoint_radius_2 = width / 150 * mapsize / 100 + 3\nPlace_A = coordinates[0]\nPlace_B = coordinates[1]\ndistance_km = (d3.geoDistance(Place_A, Place_B)* 6371).toFixed(0)\ndistance_mc = distance_km / 40\ndistance_mcHsl0 = textcolor(parseFloat(distance_mc.toFixed(0)), `hsl(${d3.hsl(piecewiseColor(distance_mc % 1000 / 1000)).h}` + slStr)\ndistance_mcHsl1 = textcolor(parseFloat(distance_mc.toFixed(0)), `hsl(${d3.hsl(piecewiseColor(distance_mc % 1000 / 1000)).h}` + slStr)\ndistance_c = distance_mc / 1000\ndistance_cHsl = textcolor(parseFloat(distance_c.toFixed(3)), `hsl(${d3.hsl(piecewiseColor(distance_c % 1)).h}` + slStr)\nvelocity_v = travelspeed / 1000\nvelocity_vHsl0 = textcolor(parseFloat(velocity_v.toFixed(3)), `hsl(${d3.hsl(piecewiseColor(velocity_v)).h}` + slStr)\nvelocity_vHsl1 = textcolor(parseFloat(velocity_v.toFixed(3)), `hsl(${d3.hsl(piecewiseColor(velocity_v)).h}` + slStr)\nvelocity_mvHsl = textcolor(parseFloat(travelspeed.toFixed(0)), `hsl(${d3.hsl(piecewiseColor(travelspeed / 1000)).h}` + slStr)\ntraveltime = Math.round(distance_mc) / Math.round(travelspeed)\ntraveltimeHsl0 = Number.isFinite(traveltime) ? textcolor(parseFloat(Math.round(traveltime * 1000).toFixed(3)), `hsl(${d3.hsl(piecewiseColor(traveltime % 1)).h}` + slStr) : traveltime\ntraveltimeHsl1 = Number.isFinite(traveltime) ? textcolor(parseFloat(traveltime.toFixed(3)), `hsl(${d3.hsl(piecewiseColor(traveltime % 1)).h}` + slStr) : traveltime\nnb_points = Math.round(distance_km/150)\nd3format = require(\"d3-format@1\")\nfunction input(config) {\n  let {\n    form,\n    type = \"text\",\n    attributes = {},\n    action,\n    getValue,\n    title,\n    description,\n    format,\n    display,\n    submit,\n    options\n  } = config;\n  const wrapper = html`&lt;div&gt;&lt;/div&gt;`;\n  if (!form)\n    form = html`&lt;form&gt;\n    &lt;input name=input type=${type} /&gt;\n  &lt;/form&gt;`;\n  Object.keys(attributes).forEach(key =&gt; {\n    const val = attributes[key];\n    if (val != null) form.input.setAttribute(key, val);\n  });\n  if (submit)\n    form.append(\n      html`&lt;input name=submit type=submit style=\"margin: 0 0.75em\" value=\"${\n        typeof submit == \"string\" ? submit : \"Submit\"\n      }\" /&gt;`\n    );\n  form.append(\n    html`&lt;output name=output style=\"font: 14px Menlo, Consolas, monospace; margin-left: 0.5em;\"&gt;&lt;/output&gt;`\n  );\n  if (title)\n    form.prepend(\n      html`&lt;div style=\"font: 700 0.9rem sans-serif; margin-bottom: 3px;\"&gt;${title}&lt;/div&gt;`\n    );\n  if (description)\n    form.append(\n      html`&lt;div style=\"font-size: 0.85rem; font-style: italic; margin-top: 3px;\"&gt;${description}&lt;/div&gt;`\n    );\n  if (format)\n    format = typeof format === \"function\" ? format : d3format.format(format);\n  if (action) {\n    action(form);\n  } else {\n    const verb = submit\n      ? \"onsubmit\"\n      : type == \"button\"\n      ? \"onclick\"\n      : type == \"checkbox\" || type == \"radio\"\n      ? \"onchange\"\n      : \"oninput\";\n    form[verb] = e =&gt; {\n      e && e.preventDefault();\n      const value = getValue ? getValue(form.input) : form.input.value;\n      if (form.output) {\n        const out = display ? display(value) : format ? format(value) : value;\n        if (out instanceof window.Element) {\n          while (form.output.hasChildNodes()) {\n            form.output.removeChild(form.output.lastChild);\n          }\n          form.output.append(out);\n        } else {\n          form.output.value = out;\n        }\n      }\n      form.value = value;\n      if (verb !== \"oninput\")\n        form.dispatchEvent(new CustomEvent(\"input\", { bubbles: true }));\n    };\n    if (verb !== \"oninput\")\n      wrapper.oninput = e =&gt; e && e.stopPropagation() && e.preventDefault();\n    if (verb !== \"onsubmit\") form.onsubmit = e =&gt; e && e.preventDefault();\n    form[verb]();\n  }\n  while (form.childNodes.length) {\n    wrapper.appendChild(form.childNodes[0]);\n  }\n  form.append(wrapper);\n  return form;\n}\n// https://observablehq.com/@fil/d3-projections\nprojections = [\n  { name: \"Airocean\", value: d3.geoAirocean },\n  { name: \"Airy‚Äôs minimum error\", value: d3.geoAiry },\n  { name: \"Aitoff\", value: d3.geoAitoff },\n  { name: \"American polyconic\", value: d3.geoPolyconic },\n  { name: \"Armadillo\", value: d3.geoArmadillo, options: { clip: { type: \"Sphere\" } } },\n  { name: \"August\", value: d3.geoAugust },\n  { name: \"azimuthal equal-area\", value: d3.geoAzimuthalEqualArea },\n  { name: \"azimuthal equidistant\", value: d3.geoAzimuthalEquidistant },\n  { name: \"Baker dinomic\", value: d3.geoBaker },\n  { name: \"Berghaus‚Äô star\", value: d3.geoBerghaus, options: { clip: { type: \"Sphere\" } } },\n  { name: \"Bertin‚Äôs 1953\", value: d3.geoBertin1953 },\n  { name: \"Boggs‚Äô eumorphic\", value: d3.geoBoggs },\n  { name: \"Boggs‚Äô eumorphic (interrupted)\", value: d3.geoInterruptedBoggs, options: { clip: { type: \"Sphere\" } } },\n  { name: \"Bonne\", value: d3.geoBonne },\n  { name: \"Bottomley\", value: d3.geoBottomley },\n  { name: \"Bromley\", value: d3.geoBromley },\n  { name: \"Butterfly (gnomonic)\", value: d3.geoPolyhedralButterfly },\n  { name: \"Butterfly (Collignon)\", value: d3.geoPolyhedralCollignon },\n  { name: \"Butterfly (Waterman)\", value: d3.geoPolyhedralWaterman },\n  { name: \"Cahill-Keyes\", value: d3.geoCahillKeyes },\n  { name: \"Collignon\", value: d3.geoCollignon },\n  { name: \"conic equal-area\", value: d3.geoConicEqualArea },\n  { name: \"conic equidistant\", value: d3.geoConicEquidistant },\n  { name: \"Craig retroazimuthal\", value: d3.geoCraig },\n  { name: \"Craster parabolic\", value: d3.geoCraster },\n  { name: \"Cox\", value: d3.geoCox },\n  { name: \"cubic\", value: d3.geoCubic },\n  { name: \"cylindrical equal-area\", value: d3.geoCylindricalEqualArea },\n  { name: \"cylindrical stereographic\", value: d3.geoCylindricalStereographic },\n  { name: \"dodecahedral\", value: d3.geoDodecahedral },\n  { name: \"Eckert I\", value: d3.geoEckert1 },\n  { name: \"Eckert II\", value: d3.geoEckert2 },\n  { name: \"Eckert III\", value: d3.geoEckert3 },\n  { name: \"Eckert IV\", value: d3.geoEckert4 },\n  { name: \"Eckert V\", value: d3.geoEckert5 },\n  { name: \"Eckert VI\", value: d3.geoEckert6 },\n  { name: \"Eisenlohr conformal\", value: d3.geoEisenlohr },\n  { name: \"Equal Earth\", value: d3.geoEqualEarth },\n  { name: \"Equirectangular (plate carr√©e)\", value: d3.geoEquirectangular },\n  { name: \"Fahey pseudocylindrical\", value: d3.geoFahey },\n  { name: \"flat-polar parabolic\", value: d3.geoMtFlatPolarParabolic },\n  { name: \"flat-polar quartic\", value: d3.geoMtFlatPolarQuartic },\n  { name: \"flat-polar sinusoidal\", value: d3.geoMtFlatPolarSinusoidal },\n  { name: \"Foucaut‚Äôs stereographic equivalent\", value: d3.geoFoucaut },\n  { name: \"Foucaut‚Äôs sinusoidal\", value: d3.geoFoucautSinusoidal },\n  { name: \"general perspective\", value: d3.geoSatellite },\n  { name: \"Gingery\", value: d3.geoGingery, options: { clip: { type: \"Sphere\" } } },\n  { name: \"Ginzburg V\", value: d3.geoGinzburg5 },\n  { name: \"Ginzburg VI\", value: d3.geoGinzburg6 },\n  { name: \"Ginzburg VIII\", value: d3.geoGinzburg8 },\n  { name: \"Ginzburg IX\", value: d3.geoGinzburg9 },\n  { name: \"Goode‚Äôs homolosine\", value: d3.geoHomolosine},\n  { name: \"Goode‚Äôs homolosine (interrupted)\", value: d3.geoInterruptedHomolosine, options: { clip: { type: \"Sphere\" } }  },\n  { name: \"gnomonic\", value: d3.geoGnomonic },\n  { name: \"Gringorten square\", value: d3.geoGringorten },\n  { name: \"Gringorten quincuncial\", value: d3.geoGringortenQuincuncial },\n  { name: \"Guyou square\", value: d3.geoGuyou },\n  { name: \"Hammer\", value: d3.geoHammer },\n  { name: \"Hammer retroazimuthal\", value: d3.geoHammerRetroazimuthal, options: { clip: { type: \"Sphere\" } } },\n  { name: \"HEALPix\", value: d3.geoHealpix, options: { clip: { type: \"Sphere\" } } },\n  { name: \"Hill eucyclic\", value: d3.geoHill },\n  { name: \"Hufnagel pseudocylindrical\", value: d3.geoHufnagel },\n  { name: \"icosahedral\", value: d3.geoIcosahedral },\n  { name: \"Imago\", value: d3.geoImago },\n  { name: \"Kavrayskiy VII\", value: d3.geoKavrayskiy7 },\n  { name: \"Lagrange conformal\", value: d3.geoLagrange },\n  { name: \"Larriv√©e\", value: d3.geoLarrivee },\n  { name: \"Laskowski tri-optimal\", value: d3.geoLaskowski },\n  { name: \"Loximuthal\", value: d3.geoLoximuthal },\n  { name: \"Mercator\", value: d3.geoMercator },\n  { name: \"Miller cylindrical\", value: d3.geoMiller },\n  { name: \"Mollweide\", value: d3.geoMollweide },\n  { name: \"Mollweide (Goode‚Äôs interrupted)\", value: d3.geoInterruptedMollweide, options: { clip: { type: \"Sphere\" } } },\n  { name: \"Mollweide (interrupted hemispheres)\", value: d3.geoInterruptedMollweideHemispheres, options: { clip: { type: \"Sphere\" } } },\n  { name: \"Natural Earth\", value: d3.geoNaturalEarth1 },\n  { name: \"Natural Earth II\", value: d3.geoNaturalEarth2 },\n  { name: \"Nell‚ÄìHammer\", value: d3.geoNellHammer },\n  { name: \"Nicolosi globular\", value: d3.geoNicolosi },\n  { name: \"orthographic\", value: d3.geoOrthographic },\n  { name: \"Patterson cylindrical\", value: d3.geoPatterson },\n  { name: \"Peirce quincuncial\", value: d3.geoPeirceQuincuncial },\n  { name: \"rectangular polyconic\", value: d3.geoRectangularPolyconic },\n  { name: \"Robinson\", value: d3.geoRobinson },\n  { name: \"sinusoidal\", value: d3.geoSinusoidal },\n  { name: \"sinusoidal (interrupted)\", value: d3.geoInterruptedSinusoidal, options: { clip: { type: \"Sphere\" } } },\n  { name: \"sinu-Mollweide\", value: d3.geoSinuMollweide },\n  { name: \"sinu-Mollweide (interrupted)\", value: d3.geoInterruptedSinuMollweide, options: { clip: { type: \"Sphere\" } } },\n  { name: \"stereographic\", value: d3.geoStereographic },\n  { name: \"Lee‚Äôs tetrahedal\", value: d3.geoTetrahedralLee },\n  { name: \"Times\", value: d3.geoTimes },\n  { name: \"Tobler hyperelliptical\", value: d3.geoHyperelliptical },\n  { name: \"transverse Mercator\", value: d3.geoTransverseMercator },\n  { name: \"Van der Grinten\", value: d3.geoVanDerGrinten },\n  { name: \"Van der Grinten II\", value: d3.geoVanDerGrinten2 },\n  { name: \"Van der Grinten III\", value: d3.geoVanDerGrinten3 },\n  { name: \"Van der Grinten IV\", value: d3.geoVanDerGrinten4 },\n  { name: \"Wagner IV\", value: d3.geoWagner4 },\n  { name: \"Wagner VI\", value: d3.geoWagner6 },\n  { name: \"Wagner VII\", value: d3.geoWagner7 },\n  { name: \"Werner\", value: d3.geoBonne ? () =&gt; d3.geoBonne().parallel(90) : null },\n  { name: \"Wiechel\", value: d3.geoWiechel },\n  { name: \"Winkel tripel\", value: d3.geoWinkel3 }\n]\nmapcolors = ({\n  night: \"#719fb6\",\n  day: \"#ffe438\",\n  grid: \"#4b6a79\",\n  ocean: \"#adeeff\",\n  land: \"#90ff7888\",\n  sun: \"#ffb438\"\n})\nfunction long2turn(degrees = -180, e = 3) {\n  // turns: e=0, deciturns: e=1, etc.\n  return (((degrees %= 360) &lt; 0 ? degrees + 360 : degrees) + 18) / (360 / 10**e) % 10**e;\n}\nfunction turn2degr(turns = -500, e = 3) {\n  // turns: e=0, deciturns: e=1, etc.\n  return turns % 10**e * (360 / 10**e)\n}\nfunction turn2long(turns = -500, e = 3) {\n  // turns: e=0, deciturns: e=1, etc.\n  return turns % 10**e * (360 / 10**e) - 18\n}\nfunction long2zone(degrees = -180) { return Math.floor(long2turn(degrees, 1)); }\nfunction lati2turn(degrees = -180, e = 3) {\n  // turns: e=0, deciturns: e=1, etc.\n  return (degrees %= 360) / (360 / 10**e) % 10**e;\n}\nselectedProjection = select ? select.value() : d3.geoEquirectangular()\nprojection = {\n  let proj = selectedProjection;\n  if (proj.rotate) proj.rotate([-turn2long(yaw), -turn2degr(pitch), turn2degr(roll)]);\n  return proj;\n}\nsun = {\n  const now = new Date;\n  const day = new Date(+now).setUTCHours(0, 0, 0, 0);\n  const t = solar.century(now);\n  const longitude = (day - now) / 864e5 * 360 - 180;\n  return [longitude - solar.equationOfTime(t) / 4, solar.declination(t)];\n}\nsunLon = Math.round(long2turn(sun[0]))\nsunLat = Math.round(lati2turn(sun[1]))\nnight = d3.geoCircle().radius(90).center(antipode(sun))()\nantipode = ([longitude, latitude]) =&gt; [longitude + 180, -latitude]\nheight = {\n  const [[x0, y0], [x1, y1]] = d3.geoPath(projection.fitWidth(width, sphere)).bounds(sphere);\n  const dy = Math.ceil(y1 - y0), l = Math.min(Math.ceil(x1 - x0), dy);\n  projection.scale(projection.scale() * (l - 1) / l).precision(0.2);\n  return dy;\n}\nd3 = require(\"d3@5\", \"d3-array@3\", \"d3-geo@3\", \"d3-geo-projection@4\", \"d3-geo-polygon@1.8\")\nsphere = ({type: \"Sphere\"})\ngraticule = d3.geoGraticule().stepMinor([36, 36]).stepMajor([36, 36])()\ngraticule.coordinates = graticule.coordinates.map(\n  i =&gt; i.map(j =&gt; j.map((k, index, arr) =&gt; i.length === 3 && index === 0 ? k - 18 : k))\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nland = topojson.feature(world, world.objects.land)\nworld = fetch(\"https://cdn.jsdelivr.net/npm/world-atlas@2/land-50m.json\").then(response =&gt; response.json())\ntopojson = require(\"topojson-client@3\")\nsolar = require(\"solar-calculator@0.3/dist/solar-calculator.min.js\")\nborders = topojson.mesh(countries, countries.objects.countries, (a, b) =&gt; a !== b)\ncountries = fetch(\"https://cdn.jsdelivr.net/npm/world-atlas@2/countries-50m.json\").then(response =&gt; response.json())\ndeccolors = [\n  `hsl(20${slStr}`,\n  `hsl(24${slStr}`,\n  `hsl(28${slStr}`,\n  `hsl(36${slStr}`,\n  `hsl(44${slStr}`,\n  `hsl(48${slStr}`,\n  `hsl(52${slStr}`,\n  `hsl(60${slStr}`,\n  `hsl(64${slStr}`,\n  `hsl(68${slStr}`,\n  `hsl(72${slStr}`,\n  `hsl(80${slStr}`,\n  `hsl(88${slStr}`,\n  `hsl(92${slStr}`,\n  `hsl(96${slStr}`,\n  `hsl(120${slStr}`,\n  `hsl(148${slStr}`,\n  `hsl(156${slStr}`,\n  `hsl(164${slStr}`,\n  `hsl(180${slStr}`,\n  `hsl(192${slStr}`,\n  `hsl(196${slStr}`,\n  `hsl(200${slStr}`,\n  `hsl(208${slStr}`,\n  `hsl(216${slStr}`,\n  `hsl(220${slStr}`,\n  `hsl(224${slStr}`,\n  `hsl(240${slStr}`,\n  `hsl(260${slStr}`,\n  `hsl(264${slStr}`,\n  `hsl(268${slStr}`,\n  `hsl(276${slStr}`,\n  `hsl(284${slStr}`,\n  `hsl(288${slStr}`,\n  `hsl(292${slStr}`,\n  `hsl(300${slStr}`,\n  `hsl(320${slStr}`,\n  `hsl(328${slStr}`,\n  `hsl(336${slStr}`,\n  `hsl(0${slStr}`,\n]\nviewof size = Inputs.range([50, 700], {\n  value: 300,\n  step: 20,\n  label: 'size'\n})\nviewof numMajorTicks = Inputs.range([0, 45], {\n  value: 6,\n  step: 2,\n  label: \"Major ticks\"\n})\nviewof numMinorTicks = Inputs.range([0, 10], {\n  value: 2,\n  step: 1,\n  label: \"Minor ticks\"\n})\nfunction repeat(component, N, initialAngle=0) {\n  // NOTE: if component is a function, it will be called with (angle, i)\n  if (N &lt;= 0) return \"\";\n  let result = [];\n  for (let i = 0; i &lt; N; i++) {\n    let angle = (360 / N) * i + initialAngle;\n    let el = typeof component === 'function'? component(angle, i) : component;\n    result.push(`&lt;g transform=\"rotate(${angle})\"&gt;${el}&lt;/g&gt;`);\n  }\n  return result.join(\"\");\n}\nfunction tick(radius, length, color='black') {\n  return `&lt;path d=\"M 0,${-radius} l 0,${-length}\" fill=\"none\" stroke=\"${color}\" stroke-width=\"1\" /&gt;`;\n}\nfunction directionMarker(radius, fontSize) { return (angle, _) =&gt; {\n  let label = {0: 'N', 45: 'NE', 90: 'E', 135: 'SE', 180: 'S', 225: 'SW', 270: 'W', 315: 'NW'}[angle] ?? '??';\n  return `&lt;text y=\"${-radius-(margin/2)}\" font-size=\"${fontSize}\" text-anchor=\"middle\" dy=\".36em\"&gt;${label}&lt;/text&gt;`;\n};\n}\nfunction turnMarker(radius, fontSize) { return (angle, _) =&gt; {\n  let label = {0: '0', 45: '125', 90: '250', 135: '375', 180: '500', 225: '625', 270: '750', 315: '875'}[angle] ?? '??';\n  return `&lt;text y=\"${-radius-(margin/2)}\" font-size=\"${fontSize}\" text-anchor=\"middle\" dy=\"-0.36em\"&gt;${label}&lt;/text&gt;`;\n  };\n}\nfunction pie(radius, width, narrowness=1.0, piecolors) {\n  return (_, i) =&gt; `&lt;path id=\"piepath\" d=\"M 0,0 L ${-width},${-radius} A ${width} ${width/2} 0 0 1 ${width} ${-radius} z\" fill=\"${piecolors[i]}\" stroke=\"black\" stroke-width=\"0.5\"/&gt;`;\n}\nmargin = size / 14\npadding = 42\nradius = size / 2 - margin - padding\nwindow.darkmode = document.getElementsByTagName(\"body\")[0].className.match(/quarto-dark/) ? true : false;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction displayPalette(palette, { darkMode = false } = {}) {\n  return htl.html`\n  &lt;div style=\"display: flex; flex-direction: column;\"&gt;\n    &lt;div style=\"margin-bottom:8px;\"&gt;${cielabScatter(palette, { darkMode: darkMode })}&lt;/div&gt;\n    &lt;div style=\"display: flex; flex-direction: row; align-items: center; justify-content: space-evenly;\"&gt;\n      &lt;div style=\"\"&gt;${lightnessSpectrum(palette, { darkMode: darkMode })}&lt;/div&gt;\n      &lt;div&gt;${swatches(palette)}&lt;/div&gt;\n  &lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;`\n}\npaletteDots = function(palette, { darkMode = false } = {}) {\n  return Plot.plot( {\n    marks: [\n      Plot.dot(palette, {\n        x: (d,i) =&gt; i * 36,\n        r: 16,\n        fill: { value: (d) =&gt; d, label: \"Color\" },\n        stroke: darkMode ? \"white\" : \"#202020\" ,\n        tip: {\n          format: { x: false },\n          fill: darkMode ? \"#202020\" : \"white\"\n        }\n      }),\n      Plot.text(palette.map((d,i) =&gt; i), {\n        x: (d) =&gt; d * 36,\n        dx: 18,\n        dy: 16,\n        opacity: 0.8\n      }),\n    ],\n    x: { domain: [ 0, 320 ], ticks: 0 },\n    height: 48,\n    width: (palette.length) * 40,\n    marginTop: 16,\n    style: { fontSize: 18, overflow: \"visible\" }\n    })\n}\nfunction cielabScatter(palette, { darkMode = false } = {}) {\n  let labPalette = palette.map((c,i)=&gt;({...d3.lab(c), i, color: c, ...({})}));\n  return Plot.plot({\n    width: colorsize,\n    height: colorsize,\n    style: { fontSize: 12 },\n    marks: [\n      Plot.frame({rx: size / 2, ry: size / 2, opacity: 0.2}),\n      Plot.gridX({ticks: 3, opacity: 0.2}),\n      Plot.gridY({ticks: 3, opacity: 0.2}),\n      Plot.ruleX([0], {opacity: 0.25}),\n      Plot.ruleY([0], {opacity: 0.25}),\n      Plot.dot(labPalette, {\n        x: \"a\", y: \"b\", r: 5,\n        fill: { value: (d) =&gt; d.color, label: \"Color\" },\n        channels: {\n          L: { value: \"l\", label: \"L*\" }\n        },\n        tip: {\n          format: { fill: (d,i) =&gt; `${i}` },\n          fill: \"#202020\",\n        }\n      }),\n    ],\n    x: {\n      domain: [-80, 80],\n      ticks: 3,\n      tickSize: 0,\n      labelArrow: null,\n      labelAnchor: \"center\",\n      label: \"a*\"\n    },\n    y: {\n      domain: [-80, 80],\n      ticks: 3,\n      tickRotate: 0,\n      tickSize: 0,\n      labelArrow: null,\n      labelAnchor: \"center\",\n      label: \"b*\"\n    }\n  });\n}\nfunction lightnessSpectrum(palette, { darkMode = false } = {}) {\n  let labPalette = palette.map((c,i)=&gt;({...d3.lab(c), i, color: c, ...({})}));\n  return Plot.plot({\n    height: colorsize,\n    width: 70,\n    style: { fontSize: 12, overflow: \"visible\" }, // let the tip overflow the rect of the plot\n    marks: [\n      Plot.tickY( labPalette, {\n        y: (d) =&gt; d.l,\n        stroke: { value: (d) =&gt; d.color, label: \"Color\" },\n        strokeWidth: 3,\n        tip: {\n          anchor: \"right\",\n          frameAnchor: \"left\",\n          format: {\n            fontSize: 12,\n            stroke: (d,i) =&gt; `${i}`,\n            a: true, b: true\n          },\n          fill: \"#202020\"\n        },\n        channels: {\n          a: { value: \"a\", label: \"a*\" },\n          b: { value: \"b\", label: \"b*\" }\n        },\n      })\n    ],\n    y: {\n      domain: [30, 100],\n      grid: true,\n      tickSize: 0,\n      labelAnchor: \"center\",\n      label: \"L*\",\n      labelArrow: false\n    },\n  })\n}\nfunction swatches(palette) {\n  return Plot.plot({\n    height: colorsize,\n    width: 50,\n    x: {ticks: 0},\n    margin: 0,\n    marks: [\n      Plot.barX(\n        palette, {\n          y: (d,i) =&gt; i,\n          fill: (d) =&gt; d,\n          inset: -1\n        }\n      )\n    ]\n})}\ncolorsize = 210\nkg = parseFloat(kilograms.toFixed(2))\nzem2 = parseFloat((zems**2).toFixed(2))\nbmi = parseFloat((kilograms / zems**2).toFixed(2))\nbmim2 = parseFloat((bmi * 25 / 4).toFixed(2))\nbmiStr = bmi &lt; 2.96 ? \"underweight\" : bmi &lt; 4 ? \"normal\" : bmi &lt; 4.8 ? \"overweight\" : \"obese\"\n// https://observablehq.com/@magfoto/wavelengths-and-spectral-colours\n// takes wavelength in nm and returns an rgba value\n    function wavelengthToColor(wavelength) {\n        let R,\n            G,\n            B,\n            alpha,\n            colorSpace,\n            wl = wavelength,\n            gamma = 1;\n        if (wl &gt;= 380 && wl &lt; 440) {\n            R = -1 * (wl - 440) / (440 - 380);\n            G = 0;\n            B = 1;\n       } else if (wl &gt;= 440 && wl &lt; 490) {\n           R = 0;\n           G = (wl - 440) / (490 - 440);\n           B = 1;\n        } else if (wl &gt;= 490 && wl &lt; 510) {\n            R = 0;\n            G = 1;\n            B = -1 * (wl - 510) / (510 - 490);\n        } else if (wl &gt;= 510 && wl &lt; 580) {\n            R = (wl - 510) / (580 - 510);\n            G = 1;\n            B = 0;\n        } else if (wl &gt;= 580 && wl &lt; 645) {\n            R = 1;\n            G = -1 * (wl - 645) / (645 - 580);\n            B = 0.0;\n        } else if (wl &gt;= 645 && wl &lt;= 780) {\n            R = 1;\n            G = 0;\n            B = 0;\n        } else {\n            R = 0;\n            G = 0;\n            B = 0;\n        }\n        // intensty is lower at the edges of the visible spectrum.\n        if (wl &gt; 780 || wl &lt; 380) {\n            alpha = 0;\n        } else if (wl &gt; 700) {\n            alpha = (780 - wl) / (780 - 700);\n        } else if (wl &lt; 420) {\n            alpha = (wl - 380) / (420 - 380);\n        } else {\n            alpha = 1;\n        }\n        colorSpace = [\"rgba(\" + (R * 100) + \"%,\" + (G * 100) + \"%,\" + (B * 100) + \"%, \" + alpha + \")\", R, G, B, alpha]\n        // colorSpace is an array with 5 elements.\n        // The first element is the complete code as a string.\n        // Use colorSpace[0] as is to display the desired color.\n        // Use the last four elements alone or together to access each of the individual r, g, and b channels.\n        return colorSpace;\n    }\n// https://observablehq.com/@freedmand/sounds\nfunction piano(stlibWidth) {\n  const width = 960;\n  const keyHeight = 450;\n  const height = 575;\n  const whiteKeys = 11;\n  const blackKeys = [1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1];\n  const whiteOffsets = blackKeys.reduce((x, y) =&gt; x.concat([y + x[x.length - 1] + 1]), [0]);\n  const svg = html`&lt;svg width=\"100%\" height=\"auto\" viewBox=\"0 0 ${width} ${height}\"\n    xmlns=\"http://www.w3.org/2000/svg\"&gt;&lt;/svg&gt;`;\n  function wrap(elem, note) {\n    const freq = 440 * Math.pow(2, note / 12);\n    // Play a note when clicked.\n    const oscillator = ctx.createOscillator();\n    const gain = ctx.createGain();\n    gain.gain.value = 0;\n    oscillator.type = 'square';\n    oscillator.frequency.setValueAtTime(freq, ctx.currentTime);\n    oscillator.connect(gain);\n    gain.connect(ctx.destination);\n    oscillator.start();\n    elem.style.cursor = 'pointer';\n    elem.onclick = () =&gt; {\n      gain.gain.cancelScheduledValues(ctx.currentTime);\n      gain.gain.linearRampToValueAtTime(0.1, ctx.currentTime + 0.05);\n      gain.gain.linearRampToValueAtTime(0, ctx.currentTime + 0.3);\n    };\n    return elem;\n  }\n  // Draw the white keys.\n  for (let i = 0; i &lt;= whiteKeys - 1; i++) {\n    svg.appendChild(wrap(html`&lt;svg&gt;&lt;rect x=\"${width * i / whiteKeys}\" y=\"0\" width=\"${width / whiteKeys}\" height=\"${keyHeight}\" fill=${whiteKeyColors[i]} stroke=\"black\" stroke-width=\"2\"/&gt;&lt;/svg&gt;`, whiteOffsets[i] - 4));\n    svg.appendChild(html`&lt;svg&gt;&lt;text style=\"user-select: none;\" x=\"${width * (i + 0.5) / whiteKeys}\" y=\"${keyHeight + 42}\" font-family=\"monospace\" id=\"pianotext\" font-size=\"36\" text-anchor=\"middle\"&gt;${String.fromCharCode('A'.charCodeAt(0) + (i + 5) % 7) + (i &lt; 4 ? \"3\" : \"4\")}&lt;/text&gt;&lt;/svg&gt;`);\n    svg.appendChild(html`&lt;svg&gt;&lt;text style=\"user-select: none;\" x=\"${width * (i + 0.5) / whiteKeys}\" y=\"${keyHeight + 82}\" font-family=\"monospace\" id=\"pianotext\" font-size=\"36\" text-anchor=\"middle\"&gt;${Math.round(220 * Math.pow(2, (whiteOffsets[i] - 4) / 12) * .864)}&lt;/text&gt;&lt;/svg&gt;`);\n    svg.appendChild(html`&lt;svg&gt;&lt;text style=\"user-select: none;\" x=\"${width * (i + 0.5) / whiteKeys}\" y=\"${keyHeight + 122}\" font-family=\"monospace\" id=\"pianotext\" font-size=\"36\" text-anchor=\"middle\"&gt;${Math.round(73504.8 / (220 * Math.pow(2, (whiteOffsets[i] - 4) / 12) * .864))}&lt;/text&gt;&lt;/svg&gt;`);\n  }\n  // Draw the black keys.\n  for (let i = 0; i &lt;= whiteKeys - 2; i++) {\n    if (blackKeys[i] == 1) {\n      svg.appendChild(wrap(html`&lt;svg&gt;&lt;rect x=\"${width * ((i + 0.65) / whiteKeys)}\" y=\"0\" width=\"${width / whiteKeys * 0.7}\" height=\"${keyHeight * 0.55}\" fill=${blackKeyColors[i]} stroke=\"black\" stroke-width=\"2\"/&gt;&lt;/svg&gt;`, whiteOffsets[i] - 4 + blackKeys[i]));\n    }\n  }\n  return svg;\n}\nwhiteKeyColors = [\n  \"#fff\",\n  \"#fff\",\n  \"#fff\",\n  xetHex[1],\n  xetHex[2],\n  xetHex[4],\n  xetHex[6],\n  xetHex[7],\n  xetHex[9],\n  xetHex[11],\n  \"#fff\",\n  \"#fff\",\n  \"#fff\",\n]\nblackKeyColors = [\n  \"#000\",\n  \"#000\",\n  xetHex[0],\n  \"\",\n  xetHex[3],\n  xetHex[5],\n  \"\",\n  xetHex[8],\n  xetHex[10],\n  \"#000\",\n  \"#000\",\n  \"#000\",\n]\n// https://observablehq.com/@freedmand/sounds\nctx = new (window.AudioContext || window.webkitAudioContext)()\nfunction Play(genFn, duration = 1) {\n  return new SoundBuffer(genFn, duration).gui();\n}\nclass SoundBuffer {\n  constructor(genFn, duration = .864) {\n    this.duration = duration;\n    // Create an audio buffer.\n    this.audioBuffer = ctx.createBuffer(1, ctx.sampleRate * this.duration, ctx.sampleRate);\n    this.buffer = this.audioBuffer.getChannelData(0);\n    let max = 0;\n    for (let i = 0; i &lt; this.audioBuffer.length; i++) {\n      const value = genFn(i / ctx.sampleRate);\n      this.buffer[i] = value;\n      if (Math.abs(value) &gt; max) max = Math.abs(value);\n    }\n    for (let i = 0; i &lt; this.audioBuffer.length; i++) {\n      this.buffer[i] = this.buffer[i] / max;\n    }\n  }\n  play(maxVol = 0.3) {\n    this.stop();\n    this.source = ctx.createBufferSource();\n    this.source.buffer = this.audioBuffer;\n    const gain = ctx.createGain();\n    gain.gain.value = maxVol;\n    this.source.connect(gain);\n    gain.connect(ctx.destination);\n    this.source.start();\n  }\n  stop() {\n    if (this.source) this.source.stop();\n  }\n  draw(height = 50, width = width, color = 'blue') {\n    const drawingCtx = DOM.context2d(width, height);\n    // Draw the middle line.\n    drawingCtx.strokeStyle = 'gainsboro';\n    drawingCtx.beginPath();\n    drawingCtx.moveTo(0, height / 2);\n    drawingCtx.lineTo(width, height / 2);\n    drawingCtx.stroke();\n    // Draw the waveform.\n    drawingCtx.strokeStyle = color;\n    drawingCtx.beginPath();\n    for (let i = 0; i &lt; width; i++) {\n      const value = this.buffer[Math.floor(i / width * this.audioBuffer.length)];\n      const y = height - Math.floor((value / 2 + 0.5) * height * 0.9 + height * 0.05);\n      if (i == 0) {\n        drawingCtx.moveTo(i, y);\n      } else {\n        drawingCtx.lineTo(i, y);\n      }\n    }\n    drawingCtx.stroke();\n    return drawingCtx.canvas;\n  }\n  gui() {\n    const ui = html`&lt;style&gt;\n      .sound-player {\n        border: solid 1px gainsboro;\n        background: #f5f5f5;\n        font-family: sans-serif;\n        color: #6f6f6f;\n        font-size: 0.8em;\n      }\n      .sound-pane {\n        height: 50px;\n        background: white;\n        margin: 8px;\n        border: solid 1px gainsboro;\n        position: relative;\n      }\n      .icons {\n        margin: 0 8px 8px 8px;\n      }\n      .icons .button {\n         cursor: pointer;\n         border: solid 1px transparent;\n      }\n      .icons .button:hover {\n         border: solid 1px gainsboro;\n      }\n      .cursor {\n        background: red;\n        width: 2px;\n        height: 100%;\n        position: absolute;\n      }\n    &lt;/style&gt;\n    &lt;div class=\"sound-player\"&gt;\n      &lt;div class=\"sound-pane\"&gt;\n        &lt;span class=\"cursor\" style=\"display: none;\"&gt;&lt;/span&gt;\n      &lt;/div&gt;\n      &lt;div class=\"icons\"&gt;\n        &lt;span class=\"button play-button\" style=\"font-size:18px;\"&gt;‚ñ∂&lt;/span&gt;\n        &lt;span class=\"button stop-button\" style=\"font-size:18px;\"&gt;‚óº&lt;/span&gt;&nbsp;&nbsp;\n        &lt;span class=\"duration\"&gt;${Math.round(this.duration / .864)} b&lt;/span&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;`;\n    const cursor = ui.querySelector('.cursor');\n    let interval = null;\n    const resetInterval = () =&gt; {\n      if (interval != null) {\n        clearInterval(interval);\n        interval = null;\n      }\n    };\n    const soundPlayer = ui.querySelector('.sound-player');\n    ui.querySelector('.sound-pane').appendChild(this.draw(46, width - 20));\n    ui.querySelector('.play-button').onclick = () =&gt; {\n      cursor.style.left = '0';\n      this.play();\n      cursor.style.display = 'block';\n      const playTime = Date.now();\n      resetInterval();\n      interval = setInterval(() =&gt; {\n        if (!document.contains(soundPlayer)) {\n          resetInterval();\n          this.stop();\n        }\n        let progress = (Date.now() - playTime) / this.duration / 1000;\n        if (progress &lt; 0) progress = 0;\n        if (progress &gt; 1) {\n          progress = 1;\n          resetInterval();\n          this.stop();\n          cursor.style.display = 'none';\n        }\n        cursor.style.left = `${Math.floor(progress * (width - 20))}px`;\n      }, 20);\n    };\n    ui.querySelector('.stop-button').onclick = () =&gt; {\n      resetInterval();\n      this.stop();\n      cursor.style.display = 'none';\n    };\n    return ui;\n  }\n}\nfunction shortenHex(hex) {\n  if (!/^#([0-9a-f]{3}){1,2}$/i.test(hex)) {\n    return hex;\n  }\n  hex = hex.replace(\"#\", \"\");\n  if (hex.length === 6 && hex[0] === hex[1] && hex[2] === hex[3] && hex[4] === hex[5]) {\n    return \"#\" + hex[0] + hex[2] + hex[4];\n  }\n  return \"#\" + hex;\n}\ndtHex = d3.color(piecewiseColor(deciturns / 10)).formatHex()\ndtHexHsl = textcolor(shortenHex(dtHex).slice(1), dtHex)\ndtValHsl = textcolor(deciturns.toFixed(1), dtHex)\npiecewiseIob = d3.piecewise(d3.interpolateRound, [\n  301.734720,\n  319.675162,\n  338.684026,\n  358.823261,\n  380.160000,\n  402.765523,\n  426.715171,\n  452.088950,\n  478.971619,\n  507.452688,\n  537.627456,\n  569.596406,\n  603.466416,\n  639.351360,\n])\npiecewiseLen = d3.piecewise(d3.interpolateRound, [\n  2436.073648,\n  2299.359125,\n  2170.306080,\n  2048.495960,\n  1933.522727,\n  1825.002285,\n  1722.572924,\n  1625.892425,\n  1534.637900,\n  1448.505481,\n  1367.206961,\n  1290.471625,\n  1218.042928,\n  1149.677698,\n])\nclass minMax {\n  constructor(limits) {\n    this.min = Math.min(...limits)\n    this.max = Math.max(...limits)\n  }\n  scale(val) {\n    return (val - this.min) / (this.max - this.min)\n  }\n}\noctave4scaler = new minMax([200, 400])\nfreqs = [\n  201.38,\n  213.36,\n  226.04,\n  239.49,\n  253.73,\n  268.81,\n  284.80,\n  301.73,\n  319.68,\n  338.68,\n  358.82,\n  380.16,\n]\nnotes = [\n  \"A‚ôØ\",\n  \"B\",\n  \"C\",\n  \"C‚ôØ\",\n  \"D\",\n  \"D‚ôØ\",\n  \"E\",\n  \"F\",\n  \"F#\",\n  \"G\",\n  \"G‚ôØ\",\n  \"A\",\n]\nxet = freqs.map(x =&gt; octave4scaler.scale(x))\nxetFix = xet.map(x =&gt; parseFloat((x * 10).toFixed(2)))\nxetCol = xet.map(piecewiseColor)\nxetHex = xetCol.map(x =&gt; d3.color(x).formatHex())\nxetHue = xetCol.map(x =&gt; Math.round(d3.hsl(x).h))\nxetIob = xet.map(piecewiseIob)\nxetLen = xet.map(piecewiseLen)\nhues = Object.fromEntries([\n    0.002,\n    0.004,\n    0.008,\n    0.014,\n    0.0158,\n    0.016,\n    0.021,\n    0.022,\n    0.024,\n    0.030,\n    0.040,\n    0.039,\n    0.065,\n    0.067,\n    0.130,\n    0.185,\n    0.40069,\n    0.41302,\n    0.413,\n    0.4132,\n    0.460,\n    0.480,\n    0.490,\n    0.49008,\n    0.599,\n    0.704,\n    0.754,\n    0.788,\n    0.815,\n    0.864,\n    0.935,\n    0.960,\n  ].map(i =&gt; [i, d3.hsl(piecewiseColor(i)).h])\n);\nh26div300 = d3.hsl(piecewiseColor(26 / 300)).h\nhD039 = d3.hsl(piecewiseColor(39 / 365)).h\nhD080 = d3.hsl(piecewiseColor(80 / 365)).h\nhD285 = d3.hsl(piecewiseColor(285 / 365)).h\nfMile = 5 / 3 / 1.609344\nfInch = 25 / 25.4\nhIob = d3.hsl(piecewiseColor(1 / .864 % 1)).h\nhMile = d3.hsl(piecewiseColor(fMile % 1)).h\nhInch = d3.hsl(piecewiseColor(fInch % 1)).h\nhAvLb = d3.hsl(piecewiseColor(500 / 453.59237 % 1)).h\nhPint = d3.hsl(piecewiseColor(4 / 3.785411784 % 1)).h\nhFlOz = d3.hsl(piecewiseColor(32 / 29.5735296875 % 1)).h\nhAcre = d3.hsl(piecewiseColor(247.1053814672 / 250 % 1)).h\nhSqMi = d3.hsl(piecewiseColor(fMile**2 % 1)).h\nhSqIn = d3.hsl(piecewiseColor(fInch**2 % 1)).h\nbcHue = (xetHue[1] + xetHue[2]) / 2\nddsHue = (xetHue[4] + xetHue[5]) / 2\ndseHue = (xetHue[5] + xetHue[6]) / 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhtml`\n&lt;style&gt;\n.colorAs {\n  background: hsl(${xetHue[0]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${xetHue[0]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorAs3 {\n  background: hsl(${hues[0.40069]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[0.40069]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color0158 {\n  background: hsl(${hues[0.0158]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[0.0158]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorC4 {\n  background: hsl(${hues[0.41302]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[0.41302]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorA4 {\n  background: hsl(${hues[0.49008]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[0.49008]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorB {\n  background: hsl(${xetHue[1]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${xetHue[1]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorBc {\n  background: hsl(${bcHue} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${bcHue}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorC {\n  background: hsl(${xetHue[2]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${xetHue[2]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorCs {\n  background: hsl(${xetHue[3]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${xetHue[3]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorD {\n  background: hsl(${xetHue[4]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${xetHue[4]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorDs {\n  background: hsl(${xetHue[5]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${xetHue[5]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorDds {\n  background: hsl(${ddsHue} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${ddsHue}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorDsE {\n  background: hsl(${dseHue} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${dseHue}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorE {\n  background: hsl(${xetHue[6]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${xetHue[6]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorF {\n  background: hsl(${xetHue[7]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${xetHue[7]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorFs {\n  background: hsl(${xetHue[8]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${xetHue[8]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorG {\n  background: hsl(${xetHue[9]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${xetHue[9]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorGs {\n  background: hsl(${xetHue[10]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${xetHue[10]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorA {\n  background: hsl(${xetHue[11]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${xetHue[11]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color0 {\n  background: hsl(0 ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(0, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color002 {\n  background: hsl(${hues[.002]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[.002]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color004 {\n  background: hsl(${hues[.004]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[.004]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color008 {\n  background: hsl(${hues[.008]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[.008]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color014 {\n  background: hsl(${hues[.014]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[.014]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color016 {\n  background: hsl(${hues[0.016]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[0.016]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color021 {\n  background: hsl(${hues[0.021]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[0.021]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color022 {\n  background: hsl(${hues[0.022]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[0.022]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color024 {\n  background: hsl(${hues[0.024]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[0.024]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color025 {\n  background: hsl(20 ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(20, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color030 {\n  background: hsl(${hues[0.030]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[0.030]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color039 {\n  background: hsl(${hues[0.039]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[0.039]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color040 {\n  background: hsl(${hues[0.040]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[0.040]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color050 {\n  background: hsl(24 ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(24, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color065 {\n  background: hsl(${hues[0.065]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[0.065]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color067 {\n  background: hsl(${hues[0.067]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[0.067]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color26div300 {\n  background: hsl(${h26div300} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${h26div300}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color1 {\n  background: hsl(36 ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(36, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color125 {\n  background: hsl(44 ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(44, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color130 {\n  background: hsl(${hues[0.130]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[0.130]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color185 {\n  background: hsl(${hues[0.185]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[0.185]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color2 {\n  background: hsl(60 ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(60, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color250 {\n  background: hsl(68 ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(68, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color3 {\n  background: hsl(80 ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(80, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color375 {\n  background: hsl(96 ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(96, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color4 {\n  background: hsl(120 ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(120, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color413 {\n  background: hsl(${hues[0.413]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[0.413]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color4132 {\n  background: hsl(${hues[0.4132]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[0.4132]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color460 {\n  background: hsl(${hues[0.460]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[0.460]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color480 {\n  background: hsl(${hues[0.480]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[0.480]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color490 {\n  background: hsl(${hues[0.490]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[0.490]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color5 {\n  background: hsl(180 ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(180, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color599 {\n  background: hsl(${hues[0.599]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[0.599]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color6 {\n  background: hsl(208 ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(208, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color625 {\n  background: hsl(216 ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(216, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color7 {\n  background: hsl(240 ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(240, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color704 {\n  background: hsl(${hues[0.704]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[0.704]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color750 {\n  background: hsl(264 ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(264, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color754 {\n  background: hsl(${hues[0.754]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[0.754]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color788 {\n  background: hsl(${hues[0.788]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[0.788]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color8 {\n  background: hsl(276 ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(276, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color815 {\n  background: hsl(${hues[0.815]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[0.815]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color864 {\n  background: hsl(${hues[0.864]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[0.864]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color875 {\n  background: hsl(292 ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(292, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color9 {\n  background: hsl(300 ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(300, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color935 {\n  background: hsl(${hues[0.935]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[0.935]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color950 {\n  background: hsl(328 ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(328, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color960 {\n  background: hsl(${hues[0.960]} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hues[0.960]}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorD039 {\n  background: hsl(${hD039} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hD039}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorD080 {\n  background: hsl(${hD080} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hD080}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorD285 {\n  background: hsl(${hD285} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hD285}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorff6300 {\n  background: #ff6300;\n  color: black;\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorffec00 {\n  background: #ffec00;\n  color: black;\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color99ff00 {\n  background: #99ff00;\n  color: black;\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color28ff00 {\n  background: #28ff00;\n  color: black;\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color00ffe8 {\n  background: #00ffe8;\n  color: black;\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color007cff {\n  background: #007cff;\n  color: white;\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color0800ff {\n  background: #0800ff;\n  color: white;\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color5e00d6 {\n  background: #5e00d6;\n  color: white;\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorIob {\n  background: hsl(${hIob} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hIob}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorMile {\n  background: hsl(${hMile} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hMile}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorInch {\n  background: hsl(${hInch} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hInch}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorAvLb {\n  background: hsl(${hAvLb} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hAvLb}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorPint {\n  background: hsl(${hPint} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hPint}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorFlOz {\n  background: hsl(${hFlOz} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hFlOz}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorAcre {\n  background: hsl(${hAcre} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hAcre}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorSqMi {\n  background: hsl(${hSqMi} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hSqMi}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorSqIn {\n  background: hsl(${hSqIn} ${colorS / 10}% ${colorL / 10}%);\n  color: ${yiq(`hsl(${hSqIn}, ${colorS / 10}%, ${colorL / 10}%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n&lt;/style&gt;\n`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Back to topReuseCC BY-SA 4.0CitationBibTeX citation:@online{laptev2024,\n  author = {Laptev, Martin},\n  title = {Dec},\n  date = {2024},\n  urldate = {2024},\n  url = {https://maptv.github.io/dec},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nLaptev, Martin. 2024. ‚ÄúDec.‚Äù 2024. https://maptv.github.io/dec.",
    "crumbs": [
      "Dec"
    ]
  },
  {
    "objectID": "cv/pdf/index.html",
    "href": "cv/pdf/index.html",
    "title": "",
    "section": "",
    "text": "Code\n\n\n\n\n\n\n    \n\n\n\n\n\n\n Back to topCitationBibTeX citation:@online{laptev2024,\n  author = {Laptev, Martin},\n  date = {2024},\n  urldate = {2024},\n  url = {https://maptv.github.io/cv/pdf/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nLaptev, Martin. 2024. 2024. https://maptv.github.io/cv/pdf/."
  },
  {
    "objectID": "about/index.html",
    "href": "about/index.html",
    "title": "",
    "section": "",
    "text": "I am a data scientist and software engineer with a broad scientific background that ranges from biochemistry to epidemiology.\nI use the JavaScript, Python, and R programming languages along with the UNIX shell to build digital deliverables such as cloudinfrastructure, datadashboards, and machinelearning models.\nIn addition to programming languages, I also like natural languages! I speak English, Polish, Spanish, Russian, French, and Portuguese.\nMy favorite music genres are Zouk, Konpa, and Kizomba, but I also enjoy many different kinds of African, Caribbean, and Latin music.\n\n\n Back to top",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "cv/index.html",
    "href": "cv/index.html",
    "title": "Martin Skarzynski Laptev",
    "section": "",
    "text": "240-207-1654\n maptv@ireni.co\n maptv.github.io\n maptv\n maptv\n\n\n\nMission\nMy goal is to lead the next generation of scientists and engineers in building solutions that integrate substantive expertise from diverse fields with machine intelligence. Through my work, I strive to promote open source software, such as the Quarto publishing system, which I use to build dashboards, presentations, reports, websites, and other digital deliverables. Overall, I aim to leverage my broad scientific background and technical expertise to help transform the promises of science and technology into a better future for all of humanity.\n\n\nExperience\n\nChief Technology Officer, Ireni Co 2024:\n\n\nBuilds applications based on the Dec measurement system\nOffers freelance consulting services to clients\n\n\n\n\nLead Instructor, General Assembly 2019:\n\n\nTeaches open-enrollment and enterprise courses such as:\n\nReact Development\nData Analytics\nData Science\nPython Programming\nWeb Development\n\n\n\n\n\nLead Instructor, Data Society 2019:\n\n\nProvides enterprise clients with training in:\n\nMachine Learning\nDevOps & MLOps\nPython & R Programming\nGenerative AI\nGraph Analytics\nText Analysis & NLP\n\n\n\n\n\nSenior Domain Lead, Amazon Web Services 2022:2024\n\n\nProvided customers with scientific and technical expertise in:\n\nComputer Vision\nData Architecture\nData Visualization\nGenomics\nMachine Learning\nReal World Evidence\n\nBuilt Artificial Intelligence (AI) solutions and Machine Learning Operations (MLOps) systems using:\n\nAmazon SageMaker\nAWS Developer Tools\nAWS Lambda\nAmazon EventBridge\nAWS CloudFormation\nAWS IAM\nAmazon EMR\nAWS Databases\nAWS Service Catalog\n\nObtained 3 AWS certification\n\nPractical Data Science\nCloud Practitioner\nSolutions Architect Associate\n\n\n\n\n\nAdjunct Professor, Virginia Tech 2021:2024\n\n\nTaught two graduate courses for the Computer Science and Statistics Departments:\n\nMachine Learning\nData Analytics\n\n\n\n\n\nVice President, Data Community DC 2022:\n\nLeads a non‚Äëprofit organization that supports eleven Meetup groups\n\n\n\nAI Engineering Manager, Booz Allen Hamilton 2019:2023\n\nLed a team of data scientists and software developers working on a cyber intelligence application\nSpearheaded interdisciplinary COVID‚Äë19 visualization, genomics, and statistical modeling efforts\nObtained the Microsoft Azure Data Scientist Associate certification\n\n\n\nBiomedical Scientist, National Institutes of Health 2009:2022\n\n\nIntegrated clinical, laboratory, epidemiologic, genomic, and medical imaging data\nCombined deep learning and statistical inference using stacked ensembles\nConducted genomic analysis of immune and cancer cells\nDeveloped and tested pharmaceutical and immunotherapeutic agents\nQuantified cancer cell signaling pathways\nMentored trainees from various NIH training programs including:\n\nSIP\nMRSP\nHiSTEP\n\n\n\n\n\nBioinformatics and Data Science Co-Chair, FAES 2014:2021\n\n\nCo‚Äëadministered an academic program with over twenty faculty members\nTaught three graduate data science courses:\n\nPython Programming\nText Mining\nApplied Machine Learning\n\nTaught graduate biotechnology workshops on various topics including:\n\nPharmacometrics\nCellular Immunology\nFlow Cytometry\n\n\n\n\n\nAdjunct Professor, George Washington University 2015:2016\n\n\nTaught two undergraduate courses for the Women‚Äôs Leadership Program:\n\nBiology of Organisms\nWomen and Leadership\n\n\n\n\n\n\nEducation\n\nMPH, Epidemiology and Biostatistics, Johns Hopkins University 2018\nPhD, Tumor Biology, Georgetown University 2015\nMS, Biotechnology, Jagiellonian University 2009\nBA, Biology, St.¬†Mary‚Äôs College of Maryland 2007\n\n\n\nPublications\n\n\nPotentiating [mAb] therapy by targeting complement C3 [‚Ä¶] on lymphoma cells 2025\nRecalibration of a deep learning model [‚Ä¶] to inform lung cancer screening intervals 2023\n[COVID] genome‚Äêbased severity predictions correspond to [‚Ä¶] higher viral load 2022\nLinking genotype to phenotype [‚Ä¶] in [COVID] [‚Ä¶] 2022\nVariants in [COVID] associated with mild or severe outcome 2021\nUsing prediction models to reduce [‚Ä¶] disparities in [‚Ä¶] lung cancer screening [‚Ä¶] 2021\nPathogenic role of [BCR] signaling and canonical NF-Œ∫B activation in [MCL] 2016\nInteractions between ibrutinib and anti‚ÄêCD20 antibodies [‚Ä¶] 2016\nHealth disparities in the immunoprevention of [HPV] [‚Ä¶] associated malignancies 2015\nDesigning the furin‚Äêcleavable linker in recombinant immunotoxins [‚Ä¶] 2015\nHarnessing the FcŒº receptor for [‚Ä¶] therapy of [CLL] 2014\n\n\n\n\nAwards\n\n\nCommunity Contribution of the Year Category Finalist, AWS Builder Awards 2023\nArtificial Intelligence Solutions Architect Award, BAH Emergent Skills Program 2022\nFellowship Research Award, Cancer Prevention Fellowship Program 2019\nFellows Award for Research Excellence, National Institutes of Health 2015\nOrloff Science Award, National Heart, Lung, Blood Institute 2014\nDirector‚Äôs Science Award, National Heart, Lung, Blood Institute 2014\n\n\n\n\nLanguages\n\n\nILR 5: English, Polish\nILR 4: Spanish, Russian\nILR 2: French, Portuguese\n\n\n\n\nSkills\n                                                                                                                      \n\n\n\n\n Back to top",
    "crumbs": [
      "CV/R√©sum√©"
    ]
  },
  {
    "objectID": "dec/date/index.html",
    "href": "dec/date/index.html",
    "title": "Dec Date",
    "section": "",
    "text": "%%{init: {'theme': 'default', 'themeVariables': { 'fontSize': '32px'}}}%%\nflowchart LR\n   A[Dec]--&gt;B[date]--&gt;C[time]--&gt;D[snap]--&gt;E[span]\n   click A \"/dec\"\n   click B \"/dec/date\"\n   click C \"/dec/time\"\n   click D \"/dec/snap\"\n   click E \"/dec/span\"\n\n\n\n\n\n\n\nMy website serves as a demonstration of both the Quarto publishingüì§system and the Dec measurementüìêsystem. I use several clever hacks to get Quarto to display all of the dates on my website in the Dec year+day format. Knowing the basics of the Dec calendarüóìÔ∏è(Decalendar) will help you to understand the filter, include, and script articles in the Quarto section of my site.\nAmong its many features, Quarto offers support for the Observable data visualization system. Observable is my top choice for interactive graphics. We can interact with the two Observable calendarüóìÔ∏èplots below‚¨áÔ∏èusing the adjacent Observable inputs. The scrubberüßΩinput is a great place to start because it cyclesüîÑthrough every value of the rangeüéöÔ∏èinputs beneath it.\nTo activate the scrubberüßΩinput, press the Play‚ñ∂Ô∏èbutton above‚¨ÜÔ∏èthe rangeüéöÔ∏èinputs. Upon activation, the redüü•box in each plot will move between the first and the last day of the Dec year. While it always begins with Day 0, the Dec year ends with either Day 364 or Day 365. To add or remove Day 365, use the toggle‚úÖinput labelledüè∑Ô∏è‚ÄúLeap year‚Äù to the right of the Play‚ñ∂Ô∏èbutton.\nThe ‚ÄúLeap year‚Äù toggle‚úÖinput shifts 306 dates, Day 0 to Day 305, in the Gregorian calendarüóìÔ∏èby one day, but does not change the order of any Dec dates, because Day 365 is the last day of Dec leap years and is always followed by Day 0 of the subsequent Dec year. The ‚ÄúVertical layout‚Äù toggle‚úÖinput rotates the plots by a quarter turn, interchanging the x- and y-axes.\nThe axis labelsüè∑Ô∏èof the plots imply that a dek and a ‚Äúday of dek‚Äù (dod) are analogous to a week and a ‚Äúday of week‚Äù (dow). Indeed, deks are groups of ten days that serve as the Dec analog of both weeks and months. With the exception of Day 365 in leap years, every year has the same deks and months, but not the same weeks, because the dow of the first day of the year varies.\n\n\nviewof leapscrub = Inputs.form([\n  Scrubber(numbers, {autoplay: false, alternate: true, delay: 86.4, loopDelay: 864, format: y =&gt; \"\", inputStyle: \"display:none;\"}),\n  Inputs.toggle({label: \"Leap year\", value: false}),\n  Inputs.toggle({label: \"Vertical layout\", value: false}),\n])\n\n\n\n\n\n\n\nviewof dotyInput = Inputs.range([0, 364 + leapInput], {value: 306, step: 1, label: \"Day of year\"});\nviewof monthInput = transformInput(\n  Inputs.range([1, 12], {step: 1, label: \"Month\"}),\n  {bind: viewof dotyInput, transform: doty2month, invert: month2doty}\n);\nviewof dotyInput1 = transformInput(\n  Inputs.range([-365 - leapInput, -1], {step: 1, label: \"Day of year\"}),\n  {bind: viewof dotyInput, transform: subN, invert: addN}\n);\nviewof dotmInput = transformInput(\n  Inputs.range([1, 31], {step: 1, label: \"Day of month\"}),\n  {bind: viewof dotyInput, transform: doty2dotm, invert: (x =&gt; Math.floor(( 153 * (\n    viewof monthInput.value &gt; 2\n    ? viewof monthInput.value - 3\n    : viewof monthInput.value + 9) + 2\n  ) / 5 + x - 1\n))});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndecPlot = turnInput ? Plot.plot({\n  title: \"Decalendar\",\n  padding: 0,\n  width: 480,\n  height: 980,\n  className: \"leftplot\",\n  marginTop: -3,\n  marginRight: 31,\n  marginBottom: 35,\n  x: {tickSize: 0,\n      label: \"Day of dek    \",\n      domain: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n      ticks: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n      tickPadding: -9,\n      labelOffset: 24,\n  },\n  y: {interval: 1, ticks: 18, label: \"Dek\", type: \"band\", tickSize: 0, tickPadding: -2, labelOffset: 40, labelArrow: false},\n  //fx: {tickFormat: \"\"},\n  style: { fontSize: \"21px\" },\n  color: {\n    range: d3.schemePastel1.concat(d3.schemePastel2.slice(4, 7)).concat(d3.schemeSet1[0]),\n    domain: months.concat(\"selected\"),\n    className: \"cal\",\n  },\n  marks: [\n    Plot.cell(dates, {\n      y: (d, i) =&gt; Math.floor(i / 10),\n      x: (d, i) =&gt; i % 10,\n      //fx: d =&gt; d.getUTCFullYear(),\n      fill: d =&gt; Math.floor(unix2doty(d.getTime())) === dotyInput ? \"selected\" : months[d.getUTCMonth()],\n      stroke: d =&gt; Math.floor(unix2doty(d.getTime())) === dotyInput ? \"darkorange\" : \"none\",\n      strokeWidth: 3,\n      inset: 0.5,\n    }),\n    Plot.text(dates, {\n      y: (d, i) =&gt; Math.floor(i / 10),\n      text: d =&gt; d.getUTCDate() === 11 ? months[d.getUTCMonth()].slice(0, 3) : \"\",\n      frameAnchor: \"right\",\n      dx: 32,\n      monospace: true,\n      fontSize: \"18px\"}),\n    Plot.text(dates, {\n      y: (d, i) =&gt; Math.floor(i / 10),\n      x: (d, i) =&gt; i % 10,\n      //fx: d =&gt; d.getUTCFullYear(),\n      fill: d =&gt; Math.floor(unix2doty(d.getTime())) === dotyInput ? \"white\" : \"black\",\n      //stroke: \"white\",\n      text: (d, i) =&gt; String(i),//.padStart(3, \"0\").slice(1),\n      monospace: true,\n      fontSize: \"16px\"})\n    ]\n  }) : Plot.plot({\n  title: \"Decalendar\",\n  padding: 0,\n  width: 1280,\n  height: 280,\n  className: \"topplot\",\n  marginTop: -3,\n  marginLeft: 31,\n  marginBottom: 35,\n  y: {tickSize: 0,\n      label: \"Day of dek    \",\n      domain: [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n      ticks: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n      tickPadding: -4,\n      labelOffset: 28,\n  },\n  x: {interval: 1, ticks: 18, label: \"Dek\", type: \"band\", tickSize: 0, tickPadding: -2, labelOffset: 32, labelArrow: false},\n  style: { fontSize: \"21px\" },\n  color: {\n    range: d3.schemePastel1.concat(d3.schemePastel2.slice(4, 7)).concat(d3.schemeSet1[0]),\n    domain: months.concat(\"selected\"),\n    className: \"cal\",\n  },\n  marks: [\n    Plot.cell(dates, {\n      x: (d, i) =&gt; Math.floor(i / 10),\n      y: (d, i) =&gt; i % 10,\n      //fx: d =&gt; d.getUTCFullYear(),\n      fill: d =&gt; Math.floor(unix2doty(d.getTime())) === dotyInput ? \"selected\" : months[d.getUTCMonth()],\n      stroke: d =&gt; Math.floor(unix2doty(d.getTime())) === dotyInput ? \"darkorange\" : \"none\",\n      strokeWidth: 3,\n      inset: 0.5,\n    }),\n    Plot.text(dates, {\n      x: (d, i) =&gt; Math.floor(i / 10),\n      y: (d, i) =&gt; i % 10,\n      //fx: d =&gt; d.getUTCFullYear(),\n      text: d =&gt; d.getUTCDate() === 11 ? months[d.getUTCMonth()].slice(0, 3) : \"\",\n      y: -1,\n      frameAnchor: \"left\",\n      dy: -1,\n      monospace: true,\n      fontSize: \"18px\"}),\n    Plot.text(dates, {\n      x: (d, i) =&gt; Math.floor(i / 10),\n      y: (d, i) =&gt; i % 10,\n      //fx: d =&gt; d.getUTCFullYear(),\n      fill: d =&gt; Math.floor(unix2doty(d.getTime())) === dotyInput ? \"white\" : \"black\",\n      //stroke: \"white\",\n      text: (d, i) =&gt; String(i),//.padStart(3, \"0\").slice(1),\n      monospace: true,\n      fontSize: \"16px\"})\n  ]\n})\n\n\n\n\n\n\n\ncalPlot = turnInput ? Plot.plot({\n  title: \"Gregorian calendar\",\n  padding: 0,\n  width: 280,\n  height: 980,\n  className: \"rightplot\",\n  marginTop: 10,\n  marginBottom: 30,\n  marginRight: 42,\n  x: {tickFormat: Plot.formatWeekday(\"en\", \"narrow\"), tickSize: 0,\n      domain: [-1, 0, 1, 2, 3, 4, 5, 6],\n      ticks: [0, 1, 2, 3, 4, 5, 6],\n      tickPadding: 2,\n  },\n  y: {interval: 1, ticks: 26, label: \"Week\", type: \"band\", tickSize: 0, tickPadding: -26, labelOffset: 16, labelArrow: false},\n  style: { fontSize: \"21px\" },\n  color: {\n    range: d3.schemePastel1.concat(d3.schemePastel2.slice(4, 7)).concat(d3.schemeSet1[0]),\n    domain: months.concat(\"selected\"),\n    className: \"cal\",\n  },\n  marks: [\n    Plot.cell(datesCal, {\n      y: d =&gt; d3.utcWeek.count(d3.utcYear(d), d),\n      x: d =&gt; d.getUTCDay(),\n      fill: d =&gt; Math.floor(unix2doty(d.getTime())) === dotyInput ? \"selected\" : months[d.getUTCMonth()],\n      stroke: d =&gt; Math.floor(unix2doty(d.getTime())) === dotyInput ? \"darkorange\" : \"none\",\n      strokeWidth: 3,\n      inset: .5,\n    }),\n    Plot.text(datesCal, {\n      y: d =&gt; d3.utcWeek.count(d3.utcYear(d), d),\n      text: d =&gt; d.getUTCDate() === 9 ? months[d.getUTCMonth()].slice(0, 3) : \"\",\n      frameAnchor: \"right\",\n      dx: 32,\n      monospace: true,\n      fontSize: \"18px\"}),\n    Plot.text(datesCal, {\n      y: d =&gt; d3.utcWeek.count(d3.utcYear(d), d),\n      x: d =&gt; d.getUTCDay(),\n      fill: d =&gt; Math.floor(unix2doty(d.getTime())) === dotyInput ? \"white\" : \"black\",\n      text: d =&gt; d.getUTCDate(), //Math.floor(unix2doty(d.getTime())).toString().padStart(3, \"0\"),\n      monospace: true,\n      fontSize: \"16px\"})\n  ]\n}) : Plot.plot({\n  title: \"Gregorian calendar\",\n  padding: 0,\n  width: 1280,\n  height: 200,\n  className: \"btmplot\",\n  marginTop: 0,\n  marginBottom: 40,\n  marginLeft: 42,\n  y: {tickFormat: Plot.formatWeekday(\"en\", \"short\"), tickSize: 0,\n      domain: [-1, 0, 1, 2, 3, 4, 5, 6],\n      ticks: [0, 1, 2, 3, 4, 5, 6],\n      tickPadding: 0,\n  },\n  x: {interval: 1, ticks: 26, label: \"Week\", type: \"band\", tickSize: 0, tickPadding: 2, labelOffset: 36, labelArrow: false},\n  //fx: {tickFormat: \"\"},\n  style: { fontSize: \"21px\" },\n  color: {\n    range: d3.schemePastel1.concat(d3.schemePastel2.slice(4, 7)).concat(d3.schemeSet1[0]),\n    domain: months.concat(\"selected\"),\n    className: \"cal\",\n  },\n  marks: [\n    Plot.cell(datesCal, {\n      x: d =&gt; d3.utcWeek.count(d3.utcYear(d), d),\n      y: d =&gt; d.getUTCDay(),\n      //fx: d =&gt; d.getUTCFullYear(),\n      fill: d =&gt; Math.floor(unix2doty(d.getTime())) === dotyInput ? \"selected\" : months[d.getUTCMonth()],\n      stroke: d =&gt; Math.floor(unix2doty(d.getTime())) === dotyInput ? \"darkorange\" : \"none\",\n      strokeWidth: 3,\n      inset: .5,\n    }),\n    Plot.text(datesCal, {\n      x: d =&gt; d3.utcWeek.count(d3.utcYear(d), d),\n      y: d =&gt; d.getUTCDay(),\n      //fx: d =&gt; d.getUTCFullYear(),\n      text: d =&gt; d.getUTCDate() === 7 ? months[d.getUTCMonth()].slice(0, 3) : \"\",\n      y: -1,\n      frameAnchor: \"left\",\n      dy: -1,\n      monospace: true,\n      fontSize: \"18px\"}),\n    Plot.text(datesCal, {\n      x: d =&gt; d3.utcWeek.count(d3.utcYear(d), d),\n      y: d =&gt; d.getUTCDay(),\n      //fx: d =&gt; d.getUTCFullYear(),\n      fill: d =&gt; Math.floor(unix2doty(d.getTime())) === dotyInput ? \"white\" : \"black\",\n      //stroke: \"white\",\n      text: d =&gt; d.getUTCDate(), //Math.floor(unix2doty(d.getTime())).toString().padStart(3, \"0\"),\n      monospace: true,\n      fontSize: \"16px\"})\n  ]\n})\n\n\n\n\n\n\n\nFirst day of the Gregorian calendar year\n\nviewof dotwInput = Inputs.radio([\n  \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\",\n  ], {value: \"Sunday\"})\n\n\n\n\n\n\n\nThe radioüîòinput beneath the plots selects the dow for Day 306, the first day of the Gregorian calendarüóìÔ∏èyear. Changing the Day 306 dow shifts every date in the Gregorian calendarüóìÔ∏èby one to six days depending on the number of days that Week 0, the first week of the year, contributes to the year. In contrast, weeks have no effect on Decalendar.\nAlthough weeks determine the shape of the Gregorian calendarüóìÔ∏èplot, each of its cell values is a ‚Äúday of month‚Äù (dom). To uniquely identifyü™™a specific day in a year, a dom must be paired with the month to which it belongs. Both plots use three-letter abbreviations and the same colorüé®scheme to labelüè∑Ô∏èmonths, but are shifted in relation to each other by two months.\n\nDay of year (doy)\nA dek and dod can be combined into a single number called a ‚Äúday of year‚Äù (doy). Every cell value in the Decalendar plot is a doy. The doy chosen by the rangeüéöÔ∏èinputs to be highlighted with a redüü•background in the plots is . You can use the rangeüéöÔ∏èinputs to convert a month and a dom into a doy. Try converting a special date such as your birthdayüéÇ or anniversaryüíç!\nThere are two rangeüéöÔ∏èinputs labeledüè∑Ô∏èas ‚Äúday of year‚Äù because every doy can be expressed as both a positive and a negative number. The typical range for doys is 0 to n-1, but negative doys typically range from -n to -1, where n is the number of days in the year, either 365 or 366. A doy outside these bounds represents a day in a previous or subsequent year.\nThe current doy can be expressed as  or . The difference between any positive doy and its negative equivalent is n:  -  = . We obtain the current dek via the dek equation,  = ‚åä √∑ 10‚åã, and the current dod number via the dod equation:  =  mod 10. To combine a dek and dod, we multiply the dek by ten and add the dod:  =  √ó 10 + .\nUnlike weeks in the Gregorian calendarüóìÔ∏è, doys and deks do not need to continue in an infinite unbroken sequence. The last day of the year, Day -1, is always followed by Day 0, regardless of the last 4 or 5 days of Dek 36 that extend past the end of the year. If we want to track days seamlessly across years, we can use a continuous count of days called the ‚Äúday of era‚Äù (doe).\n\n\nDay of era (doe)\nA doe is essentially a Julian day number (JDN) with a different epoch. We can convert a JDN to a doe by subtracting 1721119.5 days to shift the epoch from -4713+268.5 to 0000+000.0. To turn a UNIX timestamp into a doe, we divide by 86400 to convert seconds to days and then add 719468.0 to account for the fact that the UNIX epoch is 1969+306.0.\nDec uses does for calculations, such as finding the POSIX zero-based dow of a given date. This year, the dow of ChristmasüéÑis  according to the Dec dow equation: ( + 3) mod 7 = . As opposed to the dow, we can find the dod of ChristmasüéÑwithout any calculation because its dod, 9, is simply the last digit of the integer part of its doy: 299.\n\n\n\n\n\n\nBad Pun Alert\n\n\n\nDek the halls with dows of holly! Fa + la √ó 8!\n\n\nChristmasüéÑis a anchored‚öìÔ∏èholiday because it occurs on the same doy every year. In contrast, floatingüõüholidays happen on a different doy every year so that their dow can remain constant. Dec uses the dow delta equation, wŒî = (wM - wS + 7) mod 7, to determine which of the seven possible floatingüõüholiday dates corresponds to the given year.\nIn the dow delta equation, wM is the minuend dow destination and wS is the subtrahend dow starting point. To get the doy of the first Dow 4 after Day 265, which is Thanksgivingü¶Éin the United States and Brazil, we plug 4 as wM and , the dow of Day 266 this year, as wS into the dow delta equation,  = (4 -  + 7) mod 7, and then add wŒî to 266:  =  + 266.\nApart from the dow and dow delta equations, the Thanksgivingü¶Écalculation above‚¨ÜÔ∏èrelies on the Dec doe equation, which is based on the days_from_civil algorithm created by Howard Hinnant and described in his manuscript entitled chrono-Compatible Low-Level Date Algorithms, to convert the cycle of era (coe), year of cycle (yoc), and doy of Day 266 into its doe:\n\\[\\text{coe} = \\Biggl \\lfloor \\frac{\\begin{cases}\\text{year}&{\\text{if } \\text{year} \\geq 0;}\\\\\\text{year}-399&{\\text{otherwise.}}\\end{cases}}{400} \\Biggr \\rfloor\\]\n\\[\\text{yoc} = \\text{year} - \\text{coe} \\times 400\\]\n\n\\[\\text{doe} = \\text{coe}\\times146097 + \\text{yoc}\\times365 + \\lfloor\\frac{\\text{yoc}}{4}\\rfloor - \\lfloor\\frac{\\text{yoc}}{100}\\rfloor + \\text{doy}\\]\n\nThe Dec date equations are the inverseüîÅof the Dec doe equations above‚¨ÜÔ∏è, based on Howard Hinnant‚Äôs civil_from_days algorithm, and useful for obtaining Dec dates from does and doe analogs like UNIX timestamps and JDNs. Besides the coe and yoc, the Dec date equations also use the ‚Äúday of cycle‚Äù (doc) of a doe to produce its corresponding year and doy:\n\\[\\text{coe} = \\Biggl \\lfloor \\frac{\\begin{cases}\\text{doe}&{\\text{if } \\text{doe} \\geq 0;}\\\\\\text{doe}-146096&{\\text{otherwise.}}\\end{cases}}{146097} \\Biggr \\rfloor\\]\n\\[\\text{doc} = \\text{doe} - \\text{coe} \\times 146097\\]\n\\[\\text{yoc} = \\biggl \\lfloor \\frac{\\text{doc} - \\lfloor \\frac{\\text{doc}}{1460} \\rfloor + \\lfloor \\frac{\\text{doc}}{36524} \\rfloor - \\lfloor \\frac{\\text{doc}}{146096} \\rfloor}{365} \\biggr \\rfloor\\]\n\\[\\text{year} = \\text{yoc} + \\text{coe} \\times 400\\]\n\\[\\text{doy} = \\text{doc} - \\text{yoc} \\times 365 - \\lfloor \\frac{\\text{yoc}}{4} \\rfloor + \\lfloor \\frac{\\text{yoc}}{100} \\rfloor\\]\nDates generated by the Dec date equations are guaranteed to be in the standard year+day format. Therefore, we can standardize Dec dates by performing a round-trip ‚Äúdate to doe to date‚Äù conversion using the Dec doe and date equations consecutively. This allows Dec to handle Dec dates with a non-integer year and a day outside the typical range of 0 ‚â§ day ‚â§ 365.\n\n\nEpochal year aggregate (eya)\nA doe is essentially a Dec date with a year that is always equal to 0 and a day that is unbounded. Similarly, a Dec ‚Äúepochal year aggregate‚Äù (eya) is basically a Dec date with a non-integer year and a day permanently set to 0. Both does and soys allow us to represent a date as a single number and obtain the difference between two dates, either in days (dM - dS) or years (yM - yS).\nCompared to does, soys are easier to turn into Dec dates. We can convert dates to soys and vice versa with the Dec eya equation: y = ‚åäy‚åã + d √∑ n. In the Dec eya equation, y is the eya, ‚åäy‚åã + d is the Dec date, ‚åäy‚åã is the year, d is the doy, and n is the number of days in Year ‚åäy‚åã. The current eya equation values are  =  +  √∑ .\nDec dates do not include n, because it is not needed to specify a date, remains constant for 366, 1095, or 2920 days, has only 2 possible values: 366 if ‚åäy‚åã+1 is a Gregorian calendarüóìÔ∏èleap year and 365 if ‚åäy‚åã+1 is a Gregorian calendarüóìÔ∏ècommon year, and can be determined by applying the Gregorian calendarüóìÔ∏èleap year rule to ‚åäy‚åã+1, as shown in the Dec year length equation:\n\\[\\text{n}=\\begin{cases}\n  366&{\\begin{align}\\text{if } (\\lfloor \\text{y}\\rfloor+1)\\text{ mod }\\ \\ \\ \\ 4=0\\\\\n  \\href{https://en.wikipedia.org/wiki/Logical_conjunction}{\\land}(\\lfloor \\text{y}\\rfloor+1)\\text{ mod }100\\neq0\\\\\n  \\href{https://en.wikipedia.org/wiki/Logical_disjunction}{\\lor}(\\lfloor \\text{y}\\rfloor+1)\\text{ mod }400=0\\end{align}}\\\\\\\\\n  365&{\\text{otherwise.}}\\end{cases}\\]\nApart from its role in the Dec date and doy equations, n is needed to convert between year+day and year-day Dec dates. The year-day version of the Dec eya equation is y = ‚åäy‚åã + 1 + (d - n) √∑ n. In essence, d-n is the number of days until the start of Year ‚åäy‚åã+1. The current year-day date, -, tells us that Year  will begin in  days.\nThe distinction between d and d-n can also be explained in terms of computer programming. If we think of years as arrays, d and d-n are like array indexes that can be used to identify array elements or combine them into groups via slicing. In this analogy, n is the number of elements in the array, d is a positive index, and d-n is a negative index.\nThe eya equation can be rearranged into the Dec doy equation, d = ‚åäy mod 1 √ó n‚åã, where y mod 1 is the decimal part of y. The current doy equation values are  = ‚åä √ó ‚åã. In Dec, a doy by itself is a floatingüõüdate and a year+day date is a anchored‚öìÔ∏èdate. Unlike anchored‚öìÔ∏èdates, floatingüõüdates do not include a year and thus can apply to any year.\nAnchored‚öìÔ∏èdates are unsimplified math expressions. Instead of simplifying a anchored‚öìÔ∏èdate into an eya, we can do the opposite and expand it to display additional information, such as the number of days in between it and another date. An expanded version of the current date, +299, can tell us that  days  Day 299üéÑof this year.\nIn the example above‚¨ÜÔ∏è, the minuend  has been expanded into the subtrahend 299 and the difference  as per the Dec minuend equation: minuend = subtrahend + difference. If we were preparing for a rocketüöÄlaunch, the minuend would be the current time, the subtrahend would be the planned launch time, and the difference would be the ‚ÄúT-minus‚Äù countdown.\nTo see its minuend, subtrahend, and difference at the same time, we could rewrite the expanded date above‚¨ÜÔ∏èas a Dec spanüåà: +=+299. Unlike expanded dates, Dec spansüåàrepresent time intervals instead of individual dates and are structured like the minuend equation as opposed to a math expression that can be simplified to an eya.\nWhereas expanded dates have a set structure that does not change, Dec spansüåàcan omit the subtrahend, +=, or the difference, +=+299. If the year is the same on both sides of the equals sign, it can be omitted from the minuend, =+299, or from the subtrahend along with the difference: +=299.\nDec spansüåà can omit their entire left-hand side to indicate that the minuend is Day 0 of the given year. Similarly, an empty right-hand side means that the subtrahend is Day 0 of the subsequent year. Dec spansüåàwith at least one year are called anchored‚öìÔ∏èspansüåà. In contrast, floatingüõüspansüåàdo not contain a year and thus can be reused‚ôªÔ∏è every year.\nFloatingüõüdates and spansüåàare reusable‚ôªÔ∏èacross all years, but the information displayed by expanded dates and spansüåàmay not be. Information related to weeks is difficult to reuse‚ôªÔ∏è, because it takes 6 to 40 years for the pattern of dows in a year to repeat. At the price of reusability‚ôªÔ∏è, Dec can function without deks and use weeks instead.\n\n\nDay of week (dow)\nEven though Decalendar functions best with deks, Dec dates can display POSIX zero-based dows. Instead of the current Dec date, +, the navigation bar (navbar) of my site displays the current Dec dow date, +, by splitting the current doy, , into the doy of the first day of the current week (Dow 0 doy), , and the current POSIX dow: .\nInstead of the doy d, Dec dow dates display d-w+w, where d-w is the Dow 0 doy and w is the dow associated with d. We evaluate the subtraction, d-w, to obtain the Dow 0 doy, but leave the addition unsimplified so we can see w. Dec dow dates supply all of the information needed to identify specific dates and coordinate schedules based on deks or weeks.\nThe dow equation, dow = (doe + 3) mod 7, is derived from Howard Hinnant‚Äôs weekday_from_days algorithm. The Dec epoch dow is 3 = (0 + 3) mod 7. The UNIX epoch dow is 4 = (719468 + 3) mod 7. Depending on how mod is defined, a negative doe could yield a negative dow: -1 = (-60 + 3) mod 7. To convert a negative dow into a positive dow, we add 7.\n\n\n\n\nSunday\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n\n\n-7\n-6\n-5\n-4\n-3\n-2\n-1\n\n\n\n\n\n\nWeek of year (woy)\nDec dow dates can be further expanded to include Dec week of year (woy) numbers: +7√ó+. The current woy, , is the sum of the Dow 0 doy, , and the first dow of the year (Day 0 dow), , divided by 7:  = ( + ) √∑ 7. The current Dec floatingüõüwoy date, 7√ó+, is equal to the sum of the current doy and the Day 0 dow: 7 √ó  +  =  + .\nTo create a Dec woy date, we need two types of Dec expansion: minuend and dividend expansion. First, we turn the minuend d into the subtrahend d-w and the difference w. Then, we use the dividend equation, dividend = divisor √ó quotient, to convert the dividend d-w+w0 into the divisor 7 and the quotient W, where W is the woy and w0 is the Day 0 dow.\nEssentially, Dec woy dates turn d-w into 7√óW+w-w0. Typically, only 7√óW+w is displayed, because w0 is not necessary to identify a date and can be calculated from a given y by flooring it, turning it into a doe, and passing it into the dow equation. Dec woy dates obfuscateü´£d much more than dow dates, but may be useful for week-based accountingüßæ.\n\n\nDay of dek (dod)\nWhile weeks are not evenly divisible by two, a dek can be cut‚úÇÔ∏èinto two equal halves called pentadays (pents). The Mermaid flowcharts below‚¨áÔ∏èshow Schedule 3, the recommended dekly schedule of work and rest day. Schedule 3 can be short for Schedule 1+3+1, if you prefer the zero-based top flowchart, or Schedule 3+2, if you favor the one-based bottom flowchart.\n\n\n\n\n%%{init: {'theme': 'default', 'themeVariables': { 'fontSize': '29px'}}}%%\nflowchart TB\n   A[0]--&gt;B[1]--&gt;C[2]--&gt;D[3]--&gt;E[4]\n   F[5]--&gt;G[6]--&gt;H[7]--&gt;I[8]--&gt;J[9]\n   subgraph workdays[work days]\n   B\n   C\n   G\n   H\n   D\n   I\n   end\n   subgraph restdays[rest days]\n   A\n   F\n   E\n   J\n   workdays\n   end\n   style restdays color:transparent;\n\n\n\n\n\n\n\n\n\n%%{init: {'theme': 'default', 'themeVariables': { 'fontSize': '29px'}}}%%\nflowchart TB\n   B[1]--&gt;C[2]--&gt;D[3]--&gt;E[4]--&gt;F[5]\n   G[6]--&gt;H[7]--&gt;I[8]--&gt;J[9]--&gt;A[10]\n   subgraph workdays[work days]\n   B\n   C\n   G\n   H\n   D\n   I\n   end\n   subgraph restdays[rest days]\n   A\n   F\n   E\n   J\n   workdays\n   end\n   style restdays color:transparent;\n\n\n\n\n\nBoth flowcharts use dod numbers, but the bottom one starts from Dod 1 instead of Dod 0 and refers to Dod 0 as Dod 10. Like the dods in the flowcharts above‚¨ÜÔ∏è, the doys in the tables below‚¨áÔ∏èare arranged in both a zero-based (top) and a one-based (bottom) manner. The tables visualize the seamless transition between a common year and the subsequent year.\n\n\n\n\n\n\n\n\n\n\nRest\nWork\nWork\nWork\nRest\n\n\n\n\n360\n361\n362\n363\n364\n\n\n0\n1\n2\n3\n4\n\n\n\n\n\n\n\n\n\n\n\n\n\nWork\nWork\nWork\nRest\nRest\n\n\n\n\n361\n362\n363\n364\n0\n\n\n1\n2\n3\n4\n5\n\n\n\nAfter 4 or 8 years of consecutive pents, the Schedule 3 pattern shown in the flowcharts and tables above‚¨ÜÔ∏èis interrupted by 3 consecutive rest days during the transition from a leap year. This interruption is represented by 4 empty cells in the middle row of the two tables below‚¨áÔ∏è. The middle row contains only one day: Day 365 in the top table and Day 0 in bottom one.\n\n\n\n\n\n\n\n\n\n\nRest\nWork\nWork\nWork\nRest\n\n\n\n\n360\n361\n362\n363\n364\n\n\n\n\n\n\n365\n\n\n0\n1\n2\n3\n4\n\n\n\n\n\n\n\n\n\n\n\n\n\nWork\nWork\nWork\nRest\nRest\n\n\n\n\n361\n362\n363\n364\n365\n\n\n\n\n\n\n0\n\n\n1\n2\n3\n4\n5\n\n\n\nThe last pentaday (pent) in common years is Pent 72. Day 365 is the only day in Pent 73. Day 0 is the first day of Pent 0, the first pent of the year. To get the current pent number, , we double the current dek number, , and then add 1 if the current dod number, , is greater than 4. To avoid off-by-one errors, pent, dek, dod, and dow numbers are always zero-based in Dec.\nOther than pent numbers, a pent can also be expressed as a spanüåà. Pent 72 can be represented as 360=365-5, 360=-5, or 360=365. In addition to omitting the subtrahend or the difference, we can make the subtrahend precede the minuend to indicate that we want to start from the latest day and work backwards: 365=360+5, 365=360, or 365=+5.\nSpansüåàcan also represent groups of non-consecutive days. All of the Schedule 3 work days in a year can be expressed as 1=4=:5. In this spanüåà, we start with Days 1, 2, and 3 and then include every day that is a multiple of 5 days away from one of the starting days. The number preceded by a colon is called a step and determines which days we want to include.\n\n\n\n\n\nWikimedia\n\n\nSchedule 3 is one of six dekly schedules that allow us to organize work and rest days into five homogeneous columns like in the tables and flowcharts above‚¨ÜÔ∏è. These schedules are like the gears‚öôÔ∏èof a 5-speed manual transmission in a car. The approximate speed ranges for the five gears‚öôÔ∏èare &lt;5, 5 to 10, 10 to 15, 15 to 20, and ‚â•20 kilometers per centiday.\nIn this analogy, Neutral (N), 1st, 2nd, 3rd, 4th, and 5th gear‚öôÔ∏èare Schedules 0, 1, 2, 3, 4, and 5, respectively. To complete the gearshift analogy, Reverse (R) would be a time machine that takes us to the past. As our driving speed changes, we would shift up to a higher gear‚öôÔ∏èor shift down to a lower gear‚öôÔ∏è. Similarly, we can switch between the six dekly schedules as needed.\nThe names of the dekly schedules are derived from their respective numbers of work days per pent. The totalüßÆnumber of work days per year provided by Schedules 0, 1, 2, 3, 4, and 5 are 0, 73, 146, 219, 292, and 365, respectively. In general, Schedule 3 should be the default and Schedule 5 should only be used temporarily during crises‚ÄºÔ∏èand emergenciesüö®.\nIn addition to switching between schedules, we can also mix them to create hybrid schedules. Schedule 34 mixes Schedules 3 and 4 to obtain an annual totalüßÆof 255 work days without modifying the transition between years shown in the tables above‚¨ÜÔ∏è. This annual totalüßÆis about 1 pent less than the 260 to 262 work days that we get annually from a five-day workweek.\nUnlike weekly schedules, Schedules 3 and 34 provide a consistentüéØnumber of work days every year. While Days 364, 365, and 0 can be work or rest days in the Gregorian calendarüóìÔ∏è, these days are always rest days if we follow Schedules 3 or 34. Therefore, Schedules 3 and 34 do not require any holidays to smooth the transition between years.\nThere are 11 United States Federal holidays. Federal holidays that fall on a Gregorian calendarüóìÔ∏èrest day, Dow 0 or Dow 6, are observed on the nearest Gregorian calendarüóìÔ∏èwork day: Dow 1 or Dow 5. To apply this rule to Schedule 3, we would observe the Day 110‚õìÔ∏è‚Äçüí•, 125üéÜ, 255ü´°, and 299üéÑholidays on Days 111‚õìÔ∏è‚Äçüí•, 126üéÜ, 256ü´°, and 298üéÑ, respectively.\nWith dekly schedules, we can determine whether any date falls on a work or a rest day with just a glance. Counterintuitively, dekly schedules can be based on months instead of deks. Month-based dekly schedules distinguish between work and rest days based on¬†the last digit of doms. The drawback of month-based schedules is that doms reset twelve times every year.\nThe month-based Schedules 3 and 34 have 223 and 258 work days per year, respectively, but will require at least one holiday to avoid six consecutive work days during the transition from a Dec common year. The best time to switch from a weekly to a dekly schedule may be from Day 31 to 93 when the original and month-based versions of Schedules 3 and 34 are identical.\n\n\nDay of month (dom)\nDec dates can be expanded to display Dec month and POSIX dom numbers. The current Dec dom date is ++. Dec month numbers are the last doy of the previous month because POSIX doms are one-based. For zero-based doms, Dec represents each month with its first doy: ++. This way, Dec can support both zero- and one-based doms.\nDec dom dates replace the doy d from Dec dates with d-m+m. We evaluate the subtraction to get d-m, the Dec month number, but not the addition, so we can see m, the dom. If we combine the dom and dow patterns above‚¨ÜÔ∏è, we can create hybrid dom+dow Dec dates: +++, where  is d-m-w, the doy of the last Dow 0 before the beginning of the month.\nWe can obtain Dec month numbers using only a pair of handsü§≤by counting index‚òùÔ∏èand ringüíçfingers as 30 days and other fingers as 31 days. For zero-based doms, we start counting from 0. For one-based doms, we start counting from -1, as shown in the image below‚¨áÔ∏è. To spread 12 months across 10 fingers, the first and last fingers each represent 2 months.\n\n\n\n\n\n                    \n    \n        \n            \n            \n        \n        \n            \n                \n                \n            \n        \n\n\n \n  Adobe PDF library 6.66\n \n \n \n \n \n \n  2010-03-06T19:45:34Z\n  2008-03-27T12:07:11+01:00\n  Illustrator\n  2008-03-27T16:40:58+01:00\n  \n   \n    \n     JPEG\n     256\n     160\n     /9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA\nAQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK\nDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f\nHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAoAEAAwER\nAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA\nAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB\nUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE\n1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ\nqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy\nobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp\n0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo\n+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9KaVpWlnS7MmzgJMEdT6\nafyD2xVFfonSv+WKD/kUn9MVd+idK/5YoP8AkUn9MVd+idK/5YoP+RSf0xV36J0r/lig/wCRSf0x\nV36J0r/lig/5FJ/TFXfonSv+WKD/AJFJ/TFXfonSv+WKD/kUn9MVd+idK/5YoP8AkUn9MVd+idK/\n5YoP+RSf0xV5L/zjFaWl1+Wjy3MMc8v6Uvl5yqHagl2FWB6Yq9a/ROlf8sUH/IpP6Yq79E6V/wAs\nUH/IpP6Yq79E6V/yxQf8ik/pirv0TpX/ACxQf8ik/pirv0TpX/LFB/yKT+mKu/ROlf8ALFB/yKT+\n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\n    \n   \n  \n \n \n  uuid:db0c57f4-dad3-11dc-b3c0-003065732f80\n \n \n  image/svg+xml\n  \n   \n    keyboard.ai\n   \n  \n \n\n\nn            \n        \n    June91May60July121August152April30March-1\n\n\n\n\n                    \n    \n        \n            \n            \n        \n        \n            \n                \n                \n            \n        \n\n\n \n  Adobe PDF library 6.66\n \n \n \n \n \n \n  2010-03-06T19:45:34Z\n  2008-03-27T12:07:11+01:00\n  Illustrator\n  2008-03-27T16:40:58+01:00\n  \n   \n    \n     JPEG\n     256\n     160\n     /9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA\nAQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK\nDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f\nHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAoAEAAwER\nAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA\nAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB\nUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE\n1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ\nqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy\nobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp\n0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo\n+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9KaVpWlnS7MmzgJMEdT6\nafyD2xVFfonSv+WKD/kUn9MVd+idK/5YoP8AkUn9MVd+idK/5YoP+RSf0xV36J0r/lig/wCRSf0x\nV36J0r/lig/5FJ/TFXfonSv+WKD/AJFJ/TFXfonSv+WKD/kUn9MVd+idK/5YoP8AkUn9MVd+idK/\n5YoP+RSf0xV5L/zjFaWl1+Wjy3MMc8v6Uvl5yqHagl2FWB6Yq9a/ROlf8sUH/IpP6Yq79E6V/wAs\nUH/IpP6Yq79E6V/yxQf8ik/pirv0TpX/ACxQf8ik/pirv0TpX/LFB/yKT+mKu/ROlf8ALFB/yKT+\n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\n    \n   \n  \n \n \n  uuid:db0c57f4-dad3-11dc-b3c0-003065732f80\n \n \n  image/svg+xml\n  \n   \n    keyboard.ai\n   \n  \n \n\n\nn            \n        \n    September183October213November244December274January305February336\n\nWikimedia\nThe fingerüñêmnemonic described above‚¨ÜÔ∏èis similar to the knuckleüëäand musical keyboardüéπmnemonics. These mnemonics attempt to make sense of the irregular pattern of month lengths in the Gregorian calendarüóìÔ∏è. As opposed to months, we do not need mnemonics, tables, or mental calculations to use deks, because all of the required information is plainly visible in the doy.\n\n\nMonth of year (moy)\nTo convert doys to or from POSIX month and dom numbers, we can use the month of year (moy) equations from the civil_from_days and days_from_civil algorithms. Unlike POSIX month numbers, moys are zero-based and start from Moy 0 instead of Moy 10. As shown in the first moy equation below‚¨áÔ∏è, we can obtain a moy from a doy or a POSIX month number.\n\n\\[\\text{moy} = (5 \\times \\text{doy} + 2) \\div 153 = \\begin{cases}\\text{month}-3&{\\text{if }\\text{month}\\gt 2;}\\\\\\text{month}+9&{\\text{otherwise.}}\\end{cases}\\]\n\n\\[\\text{month} = \\begin{cases}\\text{moy}+3&{\\text{if }\\text{moy}\\lt 10;}\\\\\\text{moy}-9&{\\text{otherwise.}}\\end{cases}\\]\n\\[\\text{dom} = \\text{doy} - (153 \\times \\text{moy} + 2) \\div 5 + 1\\]\n\\[\\text{doy} = (153 \\times \\text{moy}+ 2) \\div 5 + \\text{dom} - 1\\]\nA moy and its equivalent POSIX month number differ by 9 in Moy 10 or 11 and -3 in any other moy because the Dec epoch, 0000+000, is 2 months later than the Gregorian calendarüóìÔ∏èepoch: -0001+306. To convert years, we add 1 to Dec years and subtract 1 from Gregorian calendarüóìÔ∏èyears if the doy is greater than 305, the moy is greater than 9, or the month is less than 3:\n\n\\[\\text{Dec year} = \\begin{cases}\\text{Gregorian calendar year}-1&{\\text{if }\\text{doy}\\gt 305\\href{https://en.wikipedia.org/wiki/Logical_disjunction}{\\lor}\\text{moy}\\gt 9\\href{https://en.wikipedia.org/wiki/Logical_disjunction}{\\lor}\\text{month}\\lt 3;}\\\\\\text{Gregorian calendar year}&{\\text{otherwise.}}\\end{cases}\\]\n\n\n\\[\\text{Gregorian calendar year} = \\begin{cases}\\text{Dec year}+1&{\\text{if }\\text{doy}\\gt 305\\href{https://en.wikipedia.org/wiki/Logical_disjunction}{\\lor}\\text{moy}\\gt 9\\href{https://en.wikipedia.org/wiki/Logical_disjunction}{\\lor}\\text{month}\\lt 3;}\\\\\\text{Dec year}&{\\text{otherwise.}}\\end{cases}\\]\n\n\n\nSummary\nThis article describes Dec and how it can interoperate with the Gregorian calendarüóìÔ∏èby minuend expanding Dec dates into dom and dow dates or dividend expanding dow dates into woy dates. On its own, Dec minuend expands dates into spanüåàequivalents, but has no use for dividend expansion, because doys display deks and dods without any expansion.\nThe flowchart below‚¨áÔ∏èvisualizes the conversion of the UNIX epoch Dec date 1969+306 into a Gregorian calendarüóìÔ∏èyear, month, dom and dow. To obtain its associated dow, we first need to convert a Dec date into a doe. Outside of its interoperability with the Gregorian calendarüóìÔ∏è, Dec converts dates into does to find the number of days in between two dates.\n\n\n\n\n%%{init: {'theme': 'default', 'themeVariables': { 'fontSize': '20px'}}}%%\nflowchart LR\n   L~~~Y\n   L--&gt;Y\n   L--&gt;D\n   L--&gt;E\n   R--&gt;Y\n   M--&gt;R[  ]:::empty\n   D--&gt;A\n   D~~~B[  ]:::empty\n   A--&gt;G\n   G--&gt;R\n   Y~~~L[  ]:::empty\n   Y---A[  ]:::empty\n   Y~~~A\n   B--&gt;M\n   B~~~N\n   B--&gt;N\n   B--&gt;D\n   B~~~D\n   N~~~B\n   E--&gt;W\n   subgraph decdate[Decalendar]\n   Y[year&lt;br&gt;1969]\n   D[doy&lt;br&gt;306]\n   E[doe&lt;br&gt;719468]\n   end\n   subgraph gregdate[Gregorian calendar]\n   W[dow&lt;br&gt;4]\n   G[year&lt;br&gt;1970]\n   M[month&lt;br&gt;1]\n   N[dom&lt;br&gt;1]\n   end\n   classDef empty width:0px;\n   click E \"#doe\"\n   click W \"#dow\"\n   click Y \"#eya\"\n   click D \"#doy\"\n   click G \"#eya\"\n   click M \"#moy\"\n   click N \"#dom\"\n\n\n\n\n\nFor simplicity, the flowchart above‚¨ÜÔ∏èdoes not show conversion byproducts, such as the coe, yoc, and doc generated during Dec doe to date conversion or the moy that we need in order to split a doy into a month and a dom or combine a month and a dom into a doy. The arrows in the flowchart represent equations adapted from chrono-Compatible Low-Level Date Algorithms.\nInstead of converting Dec dates, we can expand them to view the information we need as part of the math-inspired notation of Dec.¬†At its heart‚ù§Ô∏è, Dec is a simple system that uses only years and days for time measurement. Thanks to Dec expansion, Dec can work with other units. In this way, Dec expansion bridges the gap between the Dec and Gregorian calendarsüóìÔ∏è.\n\n\nNext\nAfter reading this article, you should be able to understand the examples in my filter, include, and script articles, but you may want to start with my Quarto article. To see the full extent of the benefits that Dec provides, I recommend that you continue through the Dec section of my site to the time‚è≥, snapü´∞, and spanüåàarticles. Dec has a lot more to offer than just dates!\n\n\n\n\n\n%%{init: {'theme': 'default', 'themeVariables': { 'fontSize': '32px'}}}%%\nflowchart LR\n   A[Dec]--&gt;B[date]--&gt;C[time]--&gt;D[snap]--&gt;E[span]\n   Z[  ]:::empty~~~F[Quarto]--&gt;G[filter]--&gt;H[include]--&gt;I[script]\n   classDef empty width:0px;\n   click A \"/dec\"\n   click B \"/dec/date\"\n   click C \"/dec/time\"\n   click D \"/dec/snap\"\n   click E \"/dec/span\"\n   click F \"/quarto\"\n   click G \"/quarto/filter\"\n   click H \"/quarto/include\"\n   click I \"/quarto/script\"\n\n\n\n\n\n\nIn addition my Dec and Quarto articles, many other articles on my site discuss Dec.¬†Notably, my Jupyter article compares the code underlying Dec in several programming languages, my Reveal article features a presentation on Dec time measurement, and my Observable article describes how I demonstrate Dec in action with interactive and animated visualizations.\n\n\nCite\nThank you for your interest in Dec.¬†You will find citation information for this article below‚¨áÔ∏è. Please note that the original source of the algorithms underlying the conversion of Dec year+day dates and does is Hinnant, Howard. 2021+184. ‚Äúchrono-Compatible Low-Level Date Algorithms.‚Äù +. https://howardhinnant.github.io/date_algorithms.html.\n\nfunction unix2dote(unix, zone, offset = 719468) {\n  return [(unix ?? Date.now()) / 86400000 + (\n    zone = zone ?? -Math.round(\n      (new Date).getTimezoneOffset() / 144)\n    ) / 10 + offset, zone]\n}\nfunction dote2date(dote, zone = 0) {\n  const cote = Math.floor((\n      dote &gt;= 0 ? dote\n      : dote - 146096\n    ) / 146097),\n  dotc = dote - cote * 146097,\n  yotc = Math.floor((dotc\n    - Math.floor(dotc / 1460)\n    + Math.floor(dotc / 36524)\n    - Math.floor(dotc / 146096)\n  ) / 365);\n  return [\n    yotc + cote * 400,\n    dotc - (yotc * 365\n      + Math.floor(yotc / 4)\n      - Math.floor(yotc / 100)\n  ), zone]}\nfunction dotw2diff(x, y) {\n  return (x - y + 7) % 7;\n}\ndz = unix2dote(now)\nydz = dote2date(...dz)\nfunction year2leap(year = 1970) {\n  return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;\n}\nfunction dote2dotw(d = 719468) {\n  return d &gt;= -3 ? (d + 3) % 7 : (d + 4) % 7 + 6\n}\nfunction unix2doty(unix) {\n  const dote = (\n    unix ?? Date.now()\n  ) / 86400000 + 719468,\n    cote = Math.floor((\n      dote &gt;= 0 ? dote\n      : dote - 146096\n    ) / 146097),\n  dotc = dote - cote * 146097,\n  yotc = Math.floor((dotc\n    - Math.floor(dotc / 1460)\n    + Math.floor(dotc / 36524)\n    - Math.floor(dotc / 146096)\n  ) / 365);\n  return dotc - (yotc * 365\n      + Math.floor(yotc / 4)\n      - Math.floor(yotc / 100)\n  )}\nfunction date2dote(year = 1969, doty = 306, zone = 0) {\n    const cote = Math.floor((year &gt;= 0 ? year : year - 399) / 400),\n      yote = year - cote * 400;\n    return [cote * 146097 + yote * 365 + Math.floor(yote / 4) - Math.floor(yote / 100) + doty, zone]\n}\nfunction addN(d) { return d + 365 + leapInput }\nfunction subN(d) { return d - 365 - leapInput }\n// https://observablehq.com/@observablehq/synchronized-inputs\n// https://observablehq.com/@juang1744/transform-input/1\ntransformInput = function(target, {bind: source, transform = identity, involutory = false, invert = involutory ? transform : inverse(transform)} = {}){\n  if (source === undefined) {\n    source = target;\n    target = html`&lt;div&gt;${source}&lt;/div&gt;`;\n  }\n  function sourceInputHandler() {\n    target.removeEventListener(\"input\", targetInputHandler);\n    setTransform(target).to(transform(source.value)).andDispatchEvent();\n    target.addEventListener(\"input\", targetInputHandler);\n  }\n  function targetInputHandler() {\n    source.removeEventListener(\"input\", sourceInputHandler);\n    setTransform(source).to(invert(target.value)).andDispatchEvent();\n    source.addEventListener(\"input\", sourceInputHandler);\n  }\n  source.addEventListener(\"input\", sourceInputHandler);\n  target.addEventListener(\"input\", targetInputHandler);\n  invalidation.then(() =&gt; {\n    source.removeEventListener(\"input\", sourceInputHandler);\n    target.removeEventListener(\"input\", targetInputHandler);\n  });\n  sourceInputHandler();\n  return target;\n}\nfunction doty2month(doty = 0) {\n    const m = Math.floor((5 * doty + 2) / 153);\n    return Math.floor(m &lt; 10 ? m + 3 : m - 9);\n}\nfunction month2doty(month = 1) {\n    return Math.floor(\n        (153 * (month &gt; 2 ? month - 3 : month + 9) + 2) / 5\n)}\nfunction doty2dotm(doty = 0) {\n    const m = Math.floor((5 * doty + 2) / 153);\n    return doty - Math.floor((153 * m + 2) / 5) + 1;\n}\nfunction set(input, value) {\n  input.value = value;\n  input.dispatchEvent(new Event(\"input\", {bubbles: true}));\n}\nsetTransform = (input) =&gt; ({to: (value) =&gt; (input.value = value, {andDispatchEvent: (event = new Event(\"input\")) =&gt; input.dispatchEvent(event)})});\nfunction inverse(f) {\n  switch (f) {\n    case identity:  return identity;\n    case Math.sqrt: return square;\n    case Math.log:  return Math.exp;\n    case Math.exp:  return Math.log;\n    default:        return (x =&gt; solve(f, x, x));\n  }\n  function solve(f, y, x = 0) {\n    const dx = 1e-6;\n    let steps = 100, deltax, fx, dfx;\n    do {\n      fx = f(x)\n      dfx = (f(x + dx) - fx) || dx;\n      deltax = dx * (fx - y)/dfx\n      x -= deltax;\n    } while (Math.abs(deltax) &gt; dx && --steps &gt; 0);\n    return steps === 0 ? NaN : x;\n  }\nfunction square(x) {\n    return x * x;\n  }\n}\nfunction identity(x) {\n  return x;\n}\n// https://observablehq.com/@mbostock/scrubber\nfunction Scrubber(values, {\n  format = value =&gt; value,\n  initial = 0,\n  direction = 1,\n  delay = null,\n  autoplay = true,\n  loop = true,\n  loopDelay = null,\n  alternate = false,\n  inputStyle = \"\"\n} = {}) {\n  values = Array.from(values);\n  const form = html`&lt;form style=\"font: 18px var(--monospace); font-variant-numeric: tabular-nums; display: flex; height: 33px; align-items: center;\"&gt;\n  &lt;button name=b type=button style=\"margin-right: 0.4em; width: 5em;\"&gt;&lt;/button&gt;\n  &lt;label style=\"display: flex; align-items: center;\"&gt;\n    &lt;input name=i type=range min=0 max=${values.length - 1} value=${initial} step=1 style=${inputStyle}&gt;\n    &lt;output name=o style=\"margin-left: 0.4em;\"&gt;&lt;/output&gt;\n  &lt;/label&gt;\n&lt;/form&gt;`;\n  let frame = null;\n  let timer = null;\n  let interval = null;\n  function start() {\n    form.b.textContent = \"Stop\";\n    if (delay === null) frame = requestAnimationFrame(tick);\n    else interval = setInterval(tick, delay);\n  }\n  function stop() {\n    form.b.textContent = \"Play\";\n    if (frame !== null) cancelAnimationFrame(frame), frame = null;\n    if (timer !== null) clearTimeout(timer), timer = null;\n    if (interval !== null) clearInterval(interval), interval = null;\n  }\n  function running() {\n    return frame !== null || timer !== null || interval !== null;\n  }\n  function tick() {\n    if (form.i.valueAsNumber === (direction &gt; 0 ? values.length - 1 : direction &lt; 0 ? 0 : NaN)) {\n      if (!loop) return stop();\n      if (alternate) direction = -direction;\n      if (loopDelay !== null) {\n        if (frame !== null) cancelAnimationFrame(frame), frame = null;\n        if (interval !== null) clearInterval(interval), interval = null;\n        timer = setTimeout(() =&gt; (step(), start()), loopDelay);\n        return;\n      }\n    }\n    if (delay === null) frame = requestAnimationFrame(tick);\n    step();\n  }\n  function step() {\n    form.i.valueAsNumber = (form.i.valueAsNumber + direction + values.length) % values.length;\n    form.i.dispatchEvent(new CustomEvent(\"input\", {bubbles: true}));\n  }\n  form.i.oninput = event =&gt; {\n    if (event && event.isTrusted && running()) stop();\n    form.value = values[form.i.valueAsNumber];\n    form.o.value = format(form.value, form.i.valueAsNumber, values);\n  };\n  form.b.onclick = () =&gt; {\n    if (running()) return stop();\n    direction = alternate && form.i.valueAsNumber === values.length - 1 ? -1 : 1;\n    form.i.valueAsNumber = (form.i.valueAsNumber + direction) % values.length;\n    form.i.dispatchEvent(new CustomEvent(\"input\", {bubbles: true}));\n    start();\n  };\n  form.i.oninput();\n  if (autoplay) start();\n  else stop();\n  Inputs.disposal(form).then(stop);\n  return form;\n}\ndecYear = ydz[0]\nnextYear = decYear + 1\ndecDoty = Math.floor(ydz[1])\ndecDek = Math.floor(decDoty / 10)\ndecDotd = decDoty % 10\ndecPent = decDek * 2 + (decDotd &gt; 4)\nxmasDiff = decDoty - 299\nxmasDiffSign = xmasDiff &lt; 0 ? \"-\" : \"+\"\nxmasDiffSince = xmasDiff &lt; 0 ? \"are left until\" : \"have passed since\"\nxmasDiffResult = xmasDiff &lt; 0 ? \"-\" : \"\"\nxmasDote = date2dote(ydz[0], 299)[0]\nxmasDotw = dote2dotw(xmasDote)\ndotw = Math.floor(dote2dotw(dz[0]))\nday266dotw = dote2dotw(date2dote(ydz[0], 266)[0])\nday266dotwDiff = dotw2diff(4, day266dotw)\ndotm = doty2dotm(Math.floor(ydz[1]))\ndotm0 = String(dotm - 1).padStart(2, \"0\")\nmonthNumber = Math.floor(ydz[1] - dotm)\nmonthNumber0 = String(monthNumber + 1).padStart(3, \"0\")\ndotw0doty = Math.floor(ydz[1]) - dotw\ndoty0dote = date2dote(ydz[0], 0)[0]\ndoty0dotw = dote2dotw(doty0dote)\nweek = Math.floor((ydz[1] + doty0dotw) / 7)\ndotw0sign = dotw0doty &lt; 0 ? \"-\" : \"+\"\nnDaysInYear = 365 + year2leap(ydz[0] + 1)\nTminus = nDaysInYear - decDoty\nTminusPadded = Tminus.toString().padStart(3, \"0\")\nTminusPaddedNeg = \"-\" + TminusPadded\nfracYear = ydz[0] + ydz[1] / nDaysInYear\nfullfracYear = (fracYear).toFixed(4)\nmod1FracYear = (fracYear % 1).toFixed(4)\nmonths = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nmonthNums = [\"305\", \"336\", \"\", \"31\", \"61\", \"92\", \"122\", \"153\", \"184\", \"214\", \"245\", \"275\"];\ncalYear = !leapInput && dotwInput == \"Monday\" ? 6 : !leapInput && dotwInput == \"Tuesday\" ? 7 : !leapInput && dotwInput == \"Wednesday\" ? 2 : !leapInput && dotwInput == \"Thursday\" ? 3 : !leapInput && dotwInput == \"Friday\" ? 9 : !leapInput && dotwInput == \"Saturday\" ? 10 : !leapInput && dotwInput == \"Sunday\" ? 11 : leapInput && dotwInput == \"Monday\" ? 12 : leapInput && dotwInput == \"Tuesday\" ? 24 : leapInput && dotwInput == \"Wednesday\" ? 8 : leapInput && dotwInput == \"Thursday\" ? 20 : leapInput && dotwInput == \"Friday\" ? 4 : leapInput && dotwInput == \"Saturday\" ? 16 : leapInput && dotwInput == \"Sunday\" ? 28 : 0;\ndatesCal = d3.utcDays(new Date(calYear, 0, 0), new Date(calYear, 12, 0));\nleapInput = leapscrub[1]\nturnInput = leapscrub[2]\ndates = d3.utcDays(new Date(1999, 2, 0), new Date(2000, 1, 28 + leapInput));\nnumbers = Array.from({length: 366}, (_, i) =&gt; i)\nset(viewof dotyInput, leapscrub[0])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Back to topReuseCC BY-SA 4.0CitationBibTeX citation:@online{laptev2024,\n  author = {Laptev, Martin},\n  title = {Dec {Date}},\n  date = {2024},\n  urldate = {2024},\n  url = {https://maptv.github.io/dec/date},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nLaptev, Martin. 2024. ‚ÄúDec Date.‚Äù 2024. https://maptv.github.io/dec/date.",
    "crumbs": [
      "Dec",
      "Date"
    ]
  },
  {
    "objectID": "dec/snap/index.html",
    "href": "dec/snap/index.html",
    "title": "Dec snap",
    "section": "",
    "text": "%%{init: {'theme': 'default', 'themeVariables': { 'fontSize': '32px'}}}%%\nflowchart LR\n   A[Dec]--&gt;B[date]--&gt;C[time]--&gt;D[snap]--&gt;E[span]\n   click A \"/dec\"\n   click B \"/dec/date\"\n   click C \"/dec/time\"\n   click D \"/dec/snap\"\n   click E \"/dec/span\"\n\n\n\n\n\nThis article builds on the previous two Dec articles on datesüìÖand times‚è≥. A date year+day and a time .clock-z can be combined into a snapü´∞year+day.clock-z. Like the yyyy-mm-ddThh:mm:ss+hh:mm format of the ISOüåê8601 international dateüìÖand time‚è≥standard, Dec snapsü´∞represent a point in time and organize their components from the largest to the smallest.\nIn between the year and zone of a Dec snapü´∞is day.clock, a single number called a day-of-year (doy) which serves the same purpose as the month, day-of-month (dom), hour, minute, and second in between the year and time zone in the ISOüåêformat. The integer part of the doy, day, identifies a specific day in the given year and its fractional part is the time-of-day (tod): .clock.\nThe Dec snapü´∞in the Zone 0 Dec time‚è≥zone, +.+0, is equivalent to its ISOüåê8601 counterpart in the UTC+00:00 time‚è≥zone: --T::+00:00. In the current doy, ., the integer part, , corresponds to the ISOüåêmonth and dom, -, and the fractional part, ., converts to the ISOüåêhour, minute, and second: T::.\n\nviewof schedule = Inputs.radio([2, 3, 4, 5], {label: \"Workdays per pent\", value: 3})\nviewof intervals = Inputs.form([\n  interval([0, 1], {step: .01, value: [.3, .7], label: '0 or 5', width: 195, format: ([start, end]) =&gt; start === end ? \"\" : `${formatDecimal(start)}=${formatDecimal(end)}`}),\n  interval([0, 1], {step: .01, value: [.3, .7], label: '1 or 6', width: 195, format: ([start, end]) =&gt; start === end ? \"\" : `${formatDecimal(start)}=${formatDecimal(end)}`}),\n  interval([0, 1], {step: .01, value: [.3, .7], label: '2 or 7', width: 195, format: ([start, end]) =&gt; start === end ? \"\" : `${formatDecimal(start)}=${formatDecimal(end)}`}),\n  interval([0, 1], {step: .01, value: [0, 0], label: '3 or 8', width: 195, format: ([start, end]) =&gt; start === end ? \"\" : `${formatDecimal(start)}=${formatDecimal(end)}`}),\n  interval([0, 1], {step: .01, value: [0, 0], label: '4 or 9', width: 195, format: ([start, end]) =&gt; start === end ? \"\" : `${formatDecimal(start)}=${formatDecimal(end)}`}),\n])\npentBar = Plot.plot({\n  x: {label: \"Day of the dek\", labelOffset: 36, labelArrow: true, labelAnchor: \"center\"},\n  style: {fontSize: \"16px\"},\n  marginBottom: 40,\n  marginLeft: 45,\n  width: width,\n  className: \"pentbar\",\n  color: {scheme: \"Set1\", legend: \"swatches\", reverse: true, className: \"pentbarlegend\"},\n  y: {label: \"Proportion of the day\", domain: [1, 0], tickPadding: 6, tickSize: -4, labelOffset: 44, labelArrow: true, labelAnchor: \"center\"},\n  marks: [\n  Plot.barY(durations, {x: \"label\", y: \"duration\", fill: \"group\"}),\n  Plot.textY(\n      durations,\n      Plot.stackY(\n        Plot.groupX(\n          { y: \"first\", text: \"first\",\n          },\n          {\n            x: \"label\",\n            z: \"group\",\n            y: \"duration\",\n            text: (d) =&gt; (d.duration &lt; .0001 ? null : formatDecimal(d.duration)),\n            fill: \"white\",\n            stroke: \"black\",\n            fontSize: 28,\n          }\n        )\n      )\n    ),\n  ]})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n%%{init: {'theme': 'default', 'themeVariables': { 'fontSize': '32px'}}}%%\nflowchart LR\n   A[Dec]--&gt;B[date]--&gt;C[time]--&gt;D[snap]--&gt;E[span]\n   click A \"/dec\"\n   click B \"/dec/date\"\n   click C \"/dec/time\"\n   click D \"/dec/snap\"\n   click E \"/dec/span\"\n\n\n\n\n\n\nfunction unix2dote(unix, zone, offset = 719468) {\n  return [(unix ?? Date.now()) / 86400000 + (\n    zone = zone ?? -Math.round(\n      (new Date).getTimezoneOffset() / 144)\n    ) / 10 + offset, zone]\n}\nfunction dote2date(dote, zone = 0) {\n  const cote = Math.floor((\n      dote &gt;= 0 ? dote\n      : dote - 146096\n    ) / 146097),\n  dotc = dote - cote * 146097,\n  yotc = Math.floor((dotc\n    - Math.floor(dotc / 1460)\n    + Math.floor(dotc / 36524)\n    - Math.floor(dotc / 146096)\n  ) / 365);\n  return [\n    yotc + cote * 400,\n    dotc - (yotc * 365\n      + Math.floor(yotc / 4)\n      - Math.floor(yotc / 100)\n  ), zone]}\ndz = unix2dote(now, 0)\nydz = dote2date(...dz)\ndecYear = ydz[0]\ndecDate = Math.floor(ydz[1])\ndecTime = ydz[1] % 1\ndecDek = Math.floor(decDate / 10)\ndecDod = decDate % 10\ndecMoty = Math.floor((5 * decDate + 2) / 153)\ndecDotm = Math.floor(decDate - (153 * decMoty + 2) / 5 + 1)\nisoYear = decYear + (decMoty &gt; 9)\nmonth = decMoty &lt; 10 ? decMoty + 3 : decMoty - 9\ndecHour = decTime * 24\ndecMinute = (decHour % 1) * 60\ndecSecond = (decMinute % 1) * 60\nisoHour = Math.floor(decHour)\nisoMinute = Math.floor(decMinute)\nisoSecond = Math.floor(decSecond)\nisLeap = decYear % 4 == 0 && decYear % 100 != 0 || decYear % 400 == 0;\ndurations = [].concat(...nested)\nnested = Array.from({length: intervals.length}, (_, i) =&gt; ([\n  {\n  label: `${i} or ${i+5}`,\n  duration: intervals[i][1] !== intervals[i][0] ? intervals[i][0] : 1,\n  group: \"Rest\"\n},\n  {\n  label: `${i} or ${i+5}`,\n  duration: intervals[i][1]-intervals[i][0],\n  group: \"Work\"\n},\n  {\n  label: `${i} or ${i+5}`,\n  duration: intervals[i][1] !== intervals[i][0] ? 1-intervals[i][1] : null,\n  group: \"Rest\"\n  }]))\nschedules = [\n  [[.2, .8], [.2, .8], [0, 0], [0, 0], [0, 0]],\n  [[.3, .7], [.3, .7], [.3, .7], [0, 0], [0, 0]],\n  [[.35, .65], [.35, .65], [.35, .65], [.35, .65], [0, 0]],\n  [[.38, .62], [.38, .62], [.38, .62], [.38, .62], [.38, .62]],\n]\nset(viewof intervals, schedules[schedule-2])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction interval(range = [], options = {}) {\n  const [min = 0, max = 1] = range;\n  const {\n    step = .001,\n    label = null,\n    value = [min, max],\n    format = ([start, end]) =&gt; `${start} ‚Ä¶ ${end}`,\n    color,\n    width,\n    theme,\n  } = options;\n  const __ns__ = DOM.uid('scope').id;\n  const css = `\n#${__ns__} {\n  font: 13px/1.2 var(--sans-serif);\n  display: flex;\n  align-items: baseline;\n  flex-wrap: wrap;\n  max-width: 100%;\n  width: auto;\n}\n@media only screen and (min-width: 30em) {\n  #${__ns__} {\n    flex-wrap: nowrap;\n    width: 360px;\n  }\n}\n#${__ns__} .label {\n  width: 60px;\n  padding: 5px 0 4px 0;\n  margin-right: .5px;\n  flex-shrink: 0;\n}\n#${__ns__} .form {\n  display: flex;\n  width: 100%;\n}\n#${__ns__} .range {\n  flex-shrink: 1;\n  width: 100%;\n}\n#${__ns__} .range-slider {\n  width: 100%;\n}\n  `;\n  const $range = rangeInput({min, max, value: [value[0], value[1]], step, color, width, theme});\n  const $output = html`&lt;output&gt;`;\n  const $view = html`&lt;div id=${__ns__}&gt;\n${label == null ? '' : html`&lt;div class=\"label\"&gt;${label}`}\n&lt;div class=form&gt;\n  &lt;div class=range&gt;\n    ${$range}&lt;div class=range-output style=\"display: inline-block;\"&gt;${$output}&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n${html`&lt;style&gt;${css}`}\n  `;\n  const update = () =&gt; {\n    const content = format([$range.value[0], $range.value[1]]);\n    if(typeof content === 'string') $output.value = content;\n    else {\n      while($output.lastChild) $output.lastChild.remove();\n      $output.appendChild(content);\n    }\n  };\n  $range.oninput = update;\n  update();\n  return Object.defineProperty($view, 'value', {\n    get: () =&gt; $range.value,\n    set: ([a, b]) =&gt; {\n      $range.value = [a, b];\n      update();\n    },\n  });\n}\nfunction rangeInput(options = {}) {\n  const {\n    min = 0,\n    max = 100,\n    step = 'any',\n    value: defaultValue = [min, max],\n    color,\n    width,\n    theme = theme_Flat,\n  } = options;\n  const controls = {};\n  const scope = randomScope();\n  const clamp = (a, b, v) =&gt; v &lt; a ? a : v &gt; b ? b : v;\n  const html = htl.html;\n  // Will be used to sanitize values while avoiding floating point issues.\n  const input = html`&lt;input type=range ${{min, max, step}}&gt;`;\n  const dom = html`&lt;div class=${`${scope} range-slider`} style=${{\n    color,\n    width: cssLength(width),\n  }}&gt;\n  ${controls.track = html`&lt;div class=\"range-track\"&gt;\n    ${controls.zone = html`&lt;div class=\"range-track-zone\"&gt;\n      ${controls.range = html`&lt;div class=\"range-select\" tabindex=0&gt;\n        ${controls.min = html`&lt;div class=\"thumb thumb-min\" tabindex=0&gt;`}\n        ${controls.max = html`&lt;div class=\"thumb thumb-max\" tabindex=0&gt;`}\n      `}\n    `}\n  `}\n  ${html`&lt;style&gt;${theme.replace(/:scope\\b/g, '.'+scope)}`}\n&lt;/div&gt;`;\n  let value = [], changed = false;\n  Object.defineProperty(dom, 'value', {\n    get: () =&gt; [...value],\n    set: ([a, b]) =&gt; {\n      value = sanitize(a, b);\n      updateRange();\n    },\n  });\n  const sanitize = (a, b) =&gt; {\n    a = isNaN(a) ? min : ((input.value = a), input.valueAsNumber);\n    b = isNaN(b) ? max : ((input.value = b), input.valueAsNumber);\n    return [Math.min(a, b), Math.max(a, b)];\n  }\n  const updateRange = () =&gt; {\n    const ratio = v =&gt; (v - min) / (max - min);\n    dom.style.setProperty('--range-min', `${ratio(value[0]) * 100}%`);\n    dom.style.setProperty('--range-max', `${ratio(value[1]) * 100}%`);\n  };\n  const dispatch = name =&gt; {\n    dom.dispatchEvent(new Event(name, {bubbles: true}));\n  };\n  const setValue = (vmin, vmax) =&gt; {\n    const [pmin, pmax] = value;\n    value = sanitize(vmin, vmax);\n    updateRange();\n    // Only dispatch if values have changed.\n    if(pmin === value[0] && pmax === value[1]) return;\n    dispatch('input');\n    changed = true;\n  };\n  setValue(...defaultValue);\n  // Mousemove handlers.\n  const handlers = new Map([\n    [controls.min, (dt, ov) =&gt; {\n      const v = clamp(min, ov[1], ov[0] + dt * (max - min));\n      setValue(v, ov[1]);\n    }],\n    [controls.max, (dt, ov) =&gt; {\n      const v = clamp(ov[0], max, ov[1] + dt * (max - min));\n      setValue(ov[0], v);\n    }],\n    [controls.range, (dt, ov) =&gt; {\n      const d = ov[1] - ov[0];\n      const v = clamp(min, max - d, ov[0] + dt * (max - min));\n      setValue(v, v + d);\n    }],\n  ]);\n  // Returns client offset object.\n  const pointer = e =&gt; e.touches ? e.touches[0] : e;\n  // Note: Chrome defaults \"passive\" for touch events to true.\n  const on  = (e, fn) =&gt; e.split(' ').map(e =&gt; document.addEventListener(e, fn, {passive: false}));\n  const off = (e, fn) =&gt; e.split(' ').map(e =&gt; document.removeEventListener(e, fn, {passive: false}));\n  let initialX, initialV, target, dragging = false;\n  function handleDrag(e) {\n    // Gracefully handle exit and reentry of the viewport.\n    if(!e.buttons && !e.touches) {\n      handleDragStop();\n      return;\n    }\n    dragging = true;\n    const w = controls.zone.getBoundingClientRect().width;\n    e.preventDefault();\n    handlers.get(target)((pointer(e).clientX - initialX) / w, initialV);\n  }\n  function handleDragStop(e) {\n    off('mousemove touchmove', handleDrag);\n    off('mouseup touchend', handleDragStop);\n    if(changed) dispatch('change');\n  }\n  invalidation.then(handleDragStop);\n  dom.ontouchstart = dom.onmousedown = e =&gt; {\n    dragging = false;\n    changed = false;\n    if(!handlers.has(e.target)) return;\n    on('mousemove touchmove', handleDrag);\n    on('mouseup touchend', handleDragStop);\n    e.preventDefault();\n    e.stopPropagation();\n    target = e.target;\n    initialX = pointer(e).clientX;\n    initialV = value.slice();\n  };\n  controls.track.onclick = e =&gt; {\n    if(dragging) return;\n    changed = false;\n    const r = controls.zone.getBoundingClientRect();\n    const t = clamp(0, 1, (pointer(e).clientX - r.left) / r.width);\n    const v = min + t * (max - min);\n    const [vmin, vmax] = value, d = vmax - vmin;\n    if(v &lt; vmin) setValue(v, v + d);\n    else if(v &gt; vmax) setValue(v - d, v);\n    if(changed) dispatch('change');\n  };\n  return dom;\n}\nfunction randomScope(prefix = 'scope-') {\n  return prefix + (performance.now() + Math.random()).toString(32).replace('.', '-');\n}\nfunction formatDecimal(number) {\n  return number == 1 ? number : (Math.round(number * 100) / 100).toString().slice(1)\n}\ncssLength = v =&gt; v == null ? null : typeof v === 'number' ? `${v}px` : `${v}`\ntheme_Flat = `\n/* Options */\n:scope {\n  color: #3b99fc;\n  width: 240px;\n}\n:scope {\n  position: relative;\n  display: inline-block;\n  --thumb-size: 15px;\n  --thumb-radius: calc(var(--thumb-size) / 2);\n  padding: var(--thumb-radius) 0;\n  margin: 2px;\n  vertical-align: middle;\n}\n:scope .range-track {\n  box-sizing: border-box;\n  position: relative;\n  height: 7px;\n  background-color: hsl(0, 0%, 80%);\n  overflow: visible;\n  border-radius: 4px;\n  padding: 0 var(--thumb-radius);\n}\n:scope .range-track-zone {\n  box-sizing: border-box;\n  position: relative;\n}\n:scope .range-select {\n  box-sizing: border-box;\n  position: relative;\n  left: var(--range-min);\n  width: calc(var(--range-max) - var(--range-min));\n  cursor: ew-resize;\n  background: currentColor;\n  height: 7px;\n  border: inherit;\n}\n/* Expands the hotspot area. */\n:scope .range-select:before {\n  content: \"\";\n  position: absolute;\n  width: 100%;\n  height: var(--thumb-size);\n  left: 0;\n  top: calc(2px - var(--thumb-radius));\n}\n:scope .range-select:focus,\n:scope .thumb:focus {\n  outline: none;\n}\n:scope .thumb {\n  box-sizing: border-box;\n  position: absolute;\n  width: var(--thumb-size);\n  height: var(--thumb-size);\n  background: #fcfcfc;\n  top: -4px;\n  border-radius: 100%;\n  border: 1px solid hsl(0,0%,55%);\n  cursor: default;\n  margin: 0;\n}\n:scope .thumb:active {\n  box-shadow: inset 0 var(--thumb-size) #0002;\n}\n:scope .thumb-min {\n  left: calc(-1px - var(--thumb-radius));\n}\n:scope .thumb-max {\n  right: calc(-1px - var(--thumb-radius));\n}\n`\nmove = {\n  d3.select(pentBar)\n    .select(\"div\")\n    .raise() // Places swatch below the plot\n    .style(\"float\", \"right\"); // Floats the swatch on the right.\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Back to topReuseCC BY-SA 4.0CitationBibTeX citation:@online{laptev2024,\n  author = {Laptev, Martin},\n  title = {Dec Snap},\n  date = {2024},\n  urldate = {2024},\n  url = {https://maptv.github.io/dec/snap},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nLaptev, Martin. 2024. ‚ÄúDec Snap.‚Äù 2024. https://maptv.github.io/dec/snap.",
    "crumbs": [
      "Dec",
      "Snap"
    ]
  },
  {
    "objectID": "dec/time/index.html",
    "href": "dec/time/index.html",
    "title": "Dec Time",
    "section": "",
    "text": "%%{init: {'theme': 'default', 'themeVariables': { 'fontSize': '32px'}}}%%\nflowchart LR\n   A[Dec]--&gt;B[date]--&gt;C[time]--&gt;D[snap]--&gt;E[span]\n   click A \"/dec\"\n   click B \"/dec/date\"\n   click C \"/dec/time\"\n   click D \"/dec/snap\"\n   click E \"/dec/span\"\n\n\n\n\n\n\n\nMy website provides many examples of the Quarto publishing and the Dec measurement systems in action. I leverage Quarto support for the Observable data analysis and visualization system to create animated and interactive graphics like the analog clocksüïì, barüìächarts, solar‚òÄÔ∏èterminator mapüó∫, Earthüåçorbit diagram, and daylight area chart below.\nFractional day time\nDec times are measured in fractional days. The shortest, longest, and thinnest clocküïìhands and the top, middle, and bottom barsüìäindicate the decidays, millidays, and centimillidays, respectively, of the time since the start, +, or until the end, -, of the day in the Dec time zone, , at the location of the red‚≠ïÔ∏ècircle on the mapüó∫Ô∏èbeneath the barsüìä.\nTicking analog clocks\n\n\n\nBar chart clocks\n\nbarChart = {\n  const W = 800;\n  const H = 88;\n  const barX = 1;\n  const firstBarY = 1;\n  const svg = d3\n    .create(\"svg\")\n    .attr(\"width\", W)\n    .attr(\"viewBox\", [0, 0, W / 1.14, H]);\n  const xRange = [0, W - 100];\n  const scaleDD = d3.scaleLinear()\n    .domain([0, 10])\n    .range(xRange);\n  const scaleMandB = d3.scaleLinear()\n    .domain([0, 100])\n    .range(xRange);\n  // Background bars to show where 100% lies\n  svg.selectAll('.background')\n    .data([\n      'dd', \"mils\", 'beats'])\n    .enter()\n    .append('rect')\n    .attr('class', 'background timeBar')\n    .attr('width', W-100)\n    .attr('y', (d,i)=&gt;i*30+firstBarY)\n  // Beats\n  svg\n    .append('rect')\n    .attr('class', 'timeBar')\n    .attr('y', firstBarY+60)\n    .attr('width', d =&gt; scaleMandB(Number(barBeats)))\n  svg\n    .append('rect')\n    .attr('class', 'timeBarFull')\n    .attr('y', firstBarY+60)\n    .attr('width', d =&gt; scaleMandB(barBeats))\n  // Cents/Mils\n  svg\n    .append('rect')\n    .attr('class', 'timeBar')\n    .attr('y', firstBarY)\n    .attr('width', d =&gt; scaleDD(Number(barDD)+Number(barMils)/100+Number(barBeats)/10000))\n  svg\n    .append('rect')\n    .attr('class', 'timeBarFull')\n    .attr('y', firstBarY)\n    .attr('width', d =&gt; scaleDD(barDD))\n  svg\n    .append('rect')\n    .attr('class', 'timeBar')\n    .attr('y', firstBarY+30)\n    .attr('width', d =&gt; scaleMandB(Number(barMils)+Number(barBeats)/100))\n  svg\n    .append('rect')\n    .attr('class', 'timeBarFull')\n    .attr('y', firstBarY+30)\n    .attr('width', d =&gt; scaleMandB(barMils))\n  // Cent ticks\n  svg.selectAll('.tickC')\n    .data(d3.range(width &gt; 500 ? 10 : 10, 100))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickC')\n    .attr('x', d=&gt;scaleDD(d/10)+barX)\n    .attr('y', firstBarY+30)\n    .attr('height', d=&gt;d%2===0? 8:5)\n  svg.selectAll('.tickB1')\n    .data(d3.range(width &gt; 500 ? 10 : 10, 100))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickB1')\n    .attr('x', d=&gt;scaleDD(d/10)+barX)\n    .attr('y', d=&gt;d%2===0? firstBarY+77:firstBarY+80)\n    .attr('height', d=&gt;d%2===0? 8:5)\n  svg.selectAll('.tickC1')\n    .data(d3.range(width &gt; 500 ? 10 : 10, 100))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickC1')\n    .attr('x', d=&gt;scaleDD(d/10)+barX)\n    .attr('y', d=&gt;d%2===0? firstBarY+47:firstBarY+50)\n    .attr('height', d=&gt;d%2===0? 8:5)\n  // Mil ticks\n  svg.selectAll('.tickM')\n    .data(d3.range(width &gt; 500 ? 1 : 1, 10))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickM')\n    .attr('x', d=&gt;scaleDD(d)+barX)\n    .attr('y', firstBarY+20)\n    .attr('height', 6)\n  svg.selectAll('.tickLabel1')\n    .data(d3.range(width &gt; 500 ? 1 : 1, 10))\n    .enter()\n    .append('text')\n    .attr('class', 'tickLabel1')\n    .attr('x', d=&gt;scaleDD(d)+barX+.5)\n    .attr('y', firstBarY+18)\n    //.style(\"font-size\", `{W &lt; 550 ? 12 : W &lt; 650 ? 14 : W &lt; 750 ? 16 : W &lt; 850 ? 18 : 20}px`)\n    .text(d=&gt;d)\n  // Cent ticks\n  svg.selectAll('.tickC2')\n    .data(d3.range(width &gt; 500 ? 10 : 10, 100))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickC2')\n    .attr('x', d=&gt;scaleDD(d/10)+barX)\n    .attr('y', firstBarY+10)\n    .attr('height', d=&gt;d%2===0? 9:6)\n  // Beat ticks\n  svg.selectAll('.tickB')\n    .data(d3.range(width &gt; 500 ? 10 : 10, 100))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickB')\n    .attr('x', d=&gt;scaleDD(d/10)+barX)\n    .attr('y', firstBarY+60)\n    .attr('height', d=&gt;d%2===0? 9:6)\n  // Labels\n  svg.selectAll('.timeLabel')\n    .data([`+${barDD}`, `${barMils}`, `${barBeats}`])\n    .enter()\n    .append('text')\n    .attr('class', 'timeLabel')\n    .attr('x', barX+2)\n    .attr('y', (d,i)=&gt;i*30+firstBarY+20)\n    .style(\"font-size\", `${W &lt; 300 ? 14 : W &lt; 400 ? 16 : W &lt; 500 ? 18 : W &lt; 600 ? 20 : 22}px`)\n    .text(d=&gt;d);\n  svg.attr(\"id\", \"topbar\");\n  svg.attr('class', 'barclock')\n  return svg.node();\n}\nbarChart1 = {\n  const W = 800;\n  const H = 88;\n  const barX = 1;\n  const firstBarY = 1;\n  const svg = d3\n    .create(\"svg\")\n    .attr(\"width\", W)\n    .attr(\"viewBox\", [0, 0, W / 1.14, H]);\n  const xRange = [0, W - 100];\n  const scaleDD = d3.scaleLinear()\n    .domain([0, 10])\n    .range(xRange);\n  const scaleMandB = d3.scaleLinear()\n    .domain([0, 100])\n    .range(xRange);\n  // const scaleDek = d3.scaleLinear()\n  //  .domain([0, 37])\n  //  .range(xRange);\n  // Background bars to show where 100% lies\n  svg.selectAll('.background')\n    .data([\n      // 'dek', 'dotd',\n      'dd', \"mils\", 'beats'])\n    .enter()\n    .append('rect')\n    .attr('class', 'background timeBar')\n    .attr('width', W-100)\n    .attr('y', (d,i)=&gt;i*30+firstBarY)\n  // Beats\n  svg\n    .append('rect')\n    .attr('class', 'timeBar')\n    .attr('y', firstBarY+60)\n    .attr('width', d =&gt; scaleMandB(Number(barBeatsN)))\n  svg\n    .append('rect')\n    .attr('class', 'timeBarFullN')\n    .attr('y', firstBarY+60)\n    .attr('width', d =&gt; scaleMandB(barBeatsN))\n  // Cents/Mils\n  svg\n    .append('rect')\n    .attr('class', 'timeBar')\n    .attr('y', firstBarY)\n    .attr('width', d =&gt; scaleDD(Number(barDDN)+Number(barMilsN)/100+Number(barBeatsN)/10000))\n  svg\n    .append('rect')\n    .attr('class', 'timeBarFullN')\n    .attr('y', firstBarY)\n    .attr('width', d =&gt; scaleDD(barDDN))\n  svg\n    .append('rect')\n    .attr('class', 'timeBar')\n    .attr('y', firstBarY+30)\n    .attr('width', d =&gt; scaleMandB(Number(barMilsN)+Number(barBeatsN)/100))\n  svg\n    .append('rect')\n    .attr('class', 'timeBarFullN')\n    .attr('y', firstBarY+30)\n    .attr('width', d =&gt; scaleMandB(barMilsN))\n  // Cent ticks\n  svg.selectAll('.tickC')\n    .data(d3.range(width &gt; 500 ? 10 : 10, 100))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickC')\n    .attr('x', d=&gt;scaleDD(d/10)+barX)\n    .attr('y', firstBarY+30)\n    .attr('height', d=&gt;d%2===0? 8:5)\n  svg.selectAll('.tickB1')\n    .data(d3.range(width &gt; 500 ? 10 : 10, 100))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickB1')\n    .attr('x', d=&gt;scaleDD(d/10)+barX)\n    .attr('y', d=&gt;d%2===0? firstBarY+77:firstBarY+80)\n    .attr('height', d=&gt;d%2===0? 8:5)\n  svg.selectAll('.tickC1')\n    .data(d3.range(width &gt; 500 ? 10 : 10, 100))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickC1')\n    .attr('x', d=&gt;scaleDD(d/10)+barX)\n    .attr('y', d=&gt;d%2===0? firstBarY+47:firstBarY+50)\n    .attr('height', d=&gt;d%2===0? 8:5)\n  // Mil ticks\n  svg.selectAll('.tickM')\n    .data(d3.range(width &gt; 500 ? 1 : 1, 10))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickM')\n    .attr('x', d=&gt;scaleDD(d)+barX)\n    .attr('y', firstBarY+20)\n    .attr('height', 6)\n  svg.selectAll('.tickLabel1')\n    .data(d3.range(width &gt; 500 ? 1 : 1, 10))\n    .enter()\n    .append('text')\n    .attr('class', 'tickLabel1')\n    .attr('x', d=&gt;scaleDD(d)+barX+.5)\n    .attr('y', firstBarY+18)\n    //.style(\"font-size\", `{W &lt; 350 ? 12 : W &lt; 450 ? 14 : W &lt; 550 ? 16 : W &lt; 650 ? 18 : 20}px`)\n    .text(d=&gt;d)\n  // Cent ticks\n  svg.selectAll('.tickC2')\n    .data(d3.range(width &gt; 500 ? 10 : 10, 100))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickC2')\n    .attr('x', d=&gt;scaleDD(d/10)+barX)\n    .attr('y', firstBarY+10)\n    .attr('height', d=&gt;d%2===0? 9:6)\n  // Beat ticks\n  svg.selectAll('.tickB')\n    .data(d3.range(width &gt; 500 ? 10 : 10, 100))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickB')\n    .attr('x', d=&gt;scaleDD(d/10)+barX)\n    .attr('y', firstBarY+60)\n    .attr('height', d=&gt;d%2===0? 9:6)\n  // Labels\n  svg.selectAll('.timeLabel')\n    .data([`-${barDDN}`, `${barMilsN}`, `${barBeatsN}`])\n    .enter()\n    .append('text')\n    .attr('class', 'timeLabel')\n    .attr('x', barX+2)\n    .attr('y', (d,i)=&gt;i*30+firstBarY+20)\n    .style(\"font-size\", `${W &lt; 300 ? 14 : W &lt; 400 ? 16 : W &lt; 500 ? 18 : W &lt; 600 ? 20 : 22}px`)\n    .text(d=&gt;d);\n  svg.attr(\"id\", \"btmbar\");\n  svg.attr('class', 'barclock')\n  return svg.node();\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLongitude latitude map\n\nviewof location = worldMapCoordinates([162, 0], [width * .998, ((21 / 40) * width)])\n\n\n\n\n\n\nDaylight area chart\n\napp = {\n  const svg = d3.select(DOM.svg(width, height * (width &lt; 300 ? .97 : width &lt; 350 ? .96 : width &lt; 400 ? .95 : width &lt; 450 ? .94 : width &lt; 500 ? .93 : width &lt; 550 ? .92 : width &lt; 600 ? .9 : width &lt; 650 ? .86 : width &lt; 700 ? .82 : .78)));\n  svg.style(\"user-select\", \"none\").style(\"-webkit-user-select\", \"none\").attr(\"id\", \"daylightapp\");\n  const margin = {top: 20, left: 16, right: 16, bottom: 0, inner: 32};\n  const contentWidth = width - margin.left - margin.right - margin.inner;\n  const columnWidth = contentWidth / 2;\n  let selection = {\n    date: date2022,\n    hour: date2022.getHours()\n  }\n  const renderPlot = () =&gt; {\n    svg.selectAll(\"#plot *\").remove();\n    svg.select(\"#plot\").call(daylightPlot, {\n    vizwidth: columnWidth / (width &lt; 300 ? 1 : width &lt; 400 ? 1.05 : width &lt; 450 ? 1.1 : width &lt; 500 ? 1.15 : width &lt; 550 ? 1.2 : width &lt; 600 ? 1.25 : width &lt; 650 ? 1.3 : width &lt; 700 ? 1.4 : 1.48),\n      height: height * (width &lt; 400 ? 1.62 : width &lt; 500 ? 1.6 : width &lt; 700 ? 1.58 : 1.56),\n      year: 2022,\n      latitude: location[1],\n      defaultDate: selection.date,\n      defaultHour: selection.hour\n    })\n  }\n  const renderSolarSystem = () =&gt; {\n    svg.selectAll(\"#solar-system *\").remove();\n    svg.selectAll(\"#solar-system\").call(solarSystem,\n                                        columnWidth * 2.02,\n                                        location,\n                                        selection.date,\n                                        selection.hour,\n                                        window.darkmode);\n  }\n  // const renderGlobe = () =&gt; {\n  //   svg.selectAll(\"#globe *\").remove();\n  //   svg.selectAll(\"#globe\").call(globe, { vizwidth: columnWidth / 1.28, location, ...selection });\n  // }\n  const setSelection = (newSelection, forceRender = false) =&gt; {\n    const prev = {...selection};\n    selection = newSelection;\n    svg.node().value = selection;\n    set(viewof selectedDate, selection.date);\n    set(viewof selectedHour, selection.hour);\n    if (forceRender) {\n      renderPlot();\n      renderSolarSystem();\n  //    renderGlobe();\n    } else if (prev.hour !== selection.hour || prev.date !== selection.date) {\n      renderSolarSystem();\n  //    renderGlobe();\n}\n  }\n  const plot = svg.append(\"g\")\n    .attr(\"id\", \"plot\")\n    .attr(\"transform\", `translate(${margin.left + 0}, ${height / 5 + (width &lt; 600 ? 12 : 5)})`);\n  svg.append(\"g\")\n    .attr(\"id\", \"solar-system\")\n    .attr(\"transform\", `translate(${margin.left + 12}, ${margin.top + width / 22 - 6 - 5 * (width &lt; 400)})`);\n  // svg.append(\"g\")\n  //   .attr(\"id\", \"globe\")\n  //   .attr(\"transform\", `translate(${margin.left + margin.inner + columnWidth / 2 + 20}, ${margin.top + height / 1.2 + 4})`);\n  setSelection(selection, true);\n  const handleDateHourChange = ({ target, detail: { date, hour }}) =&gt; {\n    if (date != null && hour != null) setSelection({...selection, date, hour});\n  }\n  svg.node().addEventListener(EventType.DateHourChange, handleDateHourChange, false);\n  return svg.node();\n}\n// https://observablehq.com/@d3/simple-clock\n// https://observablehq.com/@drio/lets-build-an-analog-clock\nclock = {\n  const clockRadius = 200,\n    margin = 50,\n    w = (clockRadius + margin) * 2,\n    h = (clockRadius + margin) * 2,\n    hourHandLength = (2 * clockRadius) / 3,\n    minuteHandLength = clockRadius,\n    secondHandLength = clockRadius - 12,\n    secondHandBalance = 30,\n    secondTickStart = clockRadius,\n    secondTickLength = -10,\n    hourTickStart = clockRadius,\n    hourTickLength = -18,\n    secondLabelRadius = clockRadius + 16,\n    secondLabelYOffset = 5,\n    hourLabelRadius = clockRadius - 40,\n    hourLabelYOffset = 7,\n    radians = Math.PI / 180;\n  const ten = d3\n    .scaleLinear()\n    .range([0, 360])\n    .domain([0, 10]);\n  const sto = d3\n    .scaleLinear()\n    .range([0, 360])\n    .domain([0, 100]);\n  const handData = [\n    {\n      type: \"hour\",\n      value: 0,\n      length: -hourHandLength,\n      scale: ten\n    },\n    {\n      type: \"minute\",\n      value: 0,\n      length: -minuteHandLength,\n      scale: sto\n    },\n    {\n      type: \"second\",\n      value: 0,\n      length: -secondHandLength,\n      scale: sto,\n      balance: secondHandBalance\n    }\n  ];\n  function drawClock() {\n    // create all the clock elements\n    updateData(); //draw them in the correct starting position\n    const face = svg\n      .append(\"g\")\n      .attr(\"id\", \"clock-face\")\n      .attr(\"transform\", `translate(${[w / 2, h / 2]})`);\n    // add marks for seconds\n    face\n      .selectAll(\".second-tick\")\n      .data(d3.range(0, 100))\n      .enter()\n      .append(\"line\")\n      .attr(\"class\", \"second-tick\")\n      .attr(\"x1\", 0)\n      .attr(\"x2\", 0)\n      .attr(\"y1\", secondTickStart)\n      .attr(\"y2\", secondTickStart + secondTickLength)\n      .attr(\"transform\", d =&gt; `rotate(${sto(d)})`);\n    // and labels...\n    face\n      .selectAll(\".second-label\")\n      .data(d3.range(0, 100, 5))\n      .enter()\n      .append(\"text\")\n      .attr(\"class\", \"second-label\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"x\", d =&gt; secondLabelRadius * Math.sin(sto(d) * radians))\n      .attr(\n        \"y\",\n        d =&gt;\n          -secondLabelRadius * Math.cos(sto(d) * radians) + secondLabelYOffset\n      )\n      .text(d =&gt; d);\n    // ... and hours\n    face\n      .selectAll(\".hour-tick\")\n      .data(d3.range(0, 10, 1))\n      .enter()\n      .append(\"line\")\n      .attr(\"class\", \"hour-tick\")\n      .attr(\"x1\", 0)\n      .attr(\"x2\", 0)\n      .attr(\"y1\", hourTickStart)\n      .attr(\"y2\", hourTickStart + hourTickLength)\n      .attr(\"transform\", d =&gt; `rotate(${ten(d)})`);\n    face\n      .selectAll(\".hour-label\")\n      .data(d3.range(0, 10, 1))\n      .enter()\n      .append(\"text\")\n      .attr(\"class\", \"hour-label\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"x\", d =&gt; hourLabelRadius * Math.sin(ten(d) * radians))\n      .attr(\n        \"y\",\n        d =&gt; -hourLabelRadius * Math.cos(ten(d) * radians) + hourLabelYOffset\n      )\n      .text(d =&gt; d);\n    const hands = face.append(\"g\").attr(\"id\", \"clock-hands\");\n    hands\n      .selectAll(\"line\")\n      .data(handData)\n      .enter()\n      .append(\"line\")\n      .attr(\"class\", d =&gt; d.type + \"-hand\")\n      .attr(\"x1\", 0)\n      .attr(\"y1\", d =&gt; d.balance || 0)\n      .attr(\"x2\", 0)\n      .attr(\"y2\", d =&gt; d.length)\n      .attr(\"transform\", d =&gt; `rotate(${d.scale(d.value)})`);\n    face\n      .append(\"g\")\n      .attr(\"id\", \"face-overlay\")\n      .append(\"circle\")\n      .attr(\"class\", \"hands-cover\")\n      .attr(\"x\", 0)\n      .attr(\"y\", 0)\n      .attr(\"r\", clockRadius / 20);\n  }\n  function moveHands() {\n    const sel = d3\n      .select(\"#clock-hands-final\")\n      .selectAll(\"line\")\n      .data(handData)\n      .transition();\n    if (fancySecondsOFF) sel.ease(d3.easeElastic.period(0.5));\n    sel.attr(\"transform\", d =&gt; `rotate(${d.scale(d.value)})`);\n  }\n  function updateData() {\n    handData[0].value = !fancySecondsOFF ? Math.floor(selectedExact * 10) : decTime[0];\n    handData[1].value = !fancySecondsOFF ? Math.floor(selectedExact * 10 % 1 * 100) : decTime.slice(2, 4);\n    handData[2].value = !fancySecondsOFF ? selectedExact * 10 % 1 * 100 % 1 * 100 : decTime.slice(4, 6);\n  }\n  const svg = d3\n    .create(\"svg\")\n    .attr(\"viewBox\", [0, 0, w, h])\n    .style(\"max-width\", `${width / 2.1}px`)\n    .attr(\"class\", \"analogclock\")\n    .attr(\"id\", \"topclock\");\n  svg\n    .append(\"text\")\n    .text(`+${decTime}-${selectedZone}`)\n    .attr(\"x\", clockRadius + margin)\n    .attr(\"y\", clockRadius * 2 + margin * 2.1)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"font-size\", 32)\n    .attr(\"font-family\", \"monospace\");\n  drawClock();\n  // Animation\n  const interval = setInterval(\n    () =&gt; {\n      updateData();\n      moveHands();\n    },\n    !fancySecondsOFF ? 10 : 864\n  );\n  invalidation.then(() =&gt; clearInterval(interval));\n  return svg.node();\n}\nclock1 = {\n  const clockRadius = 200,\n    margin = 50,\n    w = (clockRadius + margin) * 2,\n    h = (clockRadius + margin) * 2,\n    hourHandLength = (2 * clockRadius) / 3,\n    minuteHandLength = clockRadius,\n    secondHandLength = clockRadius - 12,\n    secondHandBalance = 30,\n    secondTickStart = clockRadius,\n    secondTickLength = -10,\n    hourTickStart = clockRadius,\n    hourTickLength = -18,\n    secondLabelRadius = clockRadius + 16,\n    secondLabelYOffset = 5,\n    hourLabelRadius = clockRadius - 40,\n    hourLabelYOffset = 7,\n    radians = Math.PI / 180;\n  const ten = d3\n    .scaleLinear()\n    .range([0, 360])\n    .domain([0, 10]);\n  const sto = d3\n    .scaleLinear()\n    .range([0, 360])\n    .domain([0, 100]);\n  const handData = [\n    {\n      type: \"hour\",\n      value: 0,\n      length: -hourHandLength,\n      scale: ten\n    },\n    {\n      type: \"minute\",\n      value: 0,\n      length: -minuteHandLength,\n      scale: sto\n    },\n    {\n      type: \"second\",\n      value: 0,\n      length: -secondHandLength,\n      scale: sto,\n      balance: secondHandBalance\n    }\n  ];\n  function drawClock() {\n    // create all the clock elements\n    updateData(); //draw them in the correct starting position\n    const face = svg\n      .append(\"g\")\n      .attr(\"id\", \"clock-face\")\n      .attr(\"transform\", `translate(${[w / 2, h / 2]})`);\n    // add marks for seconds\n    face\n      .selectAll(\".second-tick\")\n      .data(d3.range(0, 100))\n      .enter()\n      .append(\"line\")\n      .attr(\"class\", \"second-tick\")\n      .attr(\"x1\", 0)\n      .attr(\"x2\", 0)\n      .attr(\"y1\", secondTickStart)\n      .attr(\"y2\", secondTickStart + secondTickLength)\n      .attr(\"transform\", d =&gt; `rotate(${sto(d)})`);\n    // and labels...\n    face\n      .selectAll(\".second-label\")\n      .data(d3.range(0, 100, 5))\n      .enter()\n      .append(\"text\")\n      .attr(\"class\", \"second-label\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"x\", d =&gt; secondLabelRadius * Math.sin(sto(d) * radians))\n      .attr(\n        \"y\",\n        d =&gt;\n          -secondLabelRadius * Math.cos(sto(d) * radians) + secondLabelYOffset\n      )\n      .text(d =&gt; d);\n    // ... and hours\n    face\n      .selectAll(\".hour-tick\")\n      .data(d3.range(0, 10, 1))\n      .enter()\n      .append(\"line\")\n      .attr(\"class\", \"hour-tick\")\n      .attr(\"x1\", 0)\n      .attr(\"x2\", 0)\n      .attr(\"y1\", hourTickStart)\n      .attr(\"y2\", hourTickStart + hourTickLength)\n      .attr(\"transform\", d =&gt; `rotate(${ten(d)})`);\n    face\n      .selectAll(\".hour-label\")\n      .data(d3.range(0, 10, 1))\n      .enter()\n      .append(\"text\")\n      .attr(\"class\", \"hour-label\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"x\", d =&gt; hourLabelRadius * Math.sin(ten(d) * radians))\n      .attr(\n        \"y\",\n        d =&gt; -hourLabelRadius * Math.cos(ten(d) * radians) + hourLabelYOffset\n      )\n      .text(d =&gt; d);\n    const hands = face.append(\"g\").attr(\"id\", \"clock-hands\");\n    hands\n      .selectAll(\"line\")\n      .data(handData)\n      .enter()\n      .append(\"line\")\n      .attr(\"class\", d =&gt; d.type + \"-hand\")\n      .attr(\"x1\", 0)\n      .attr(\"y1\", d =&gt; d.balance || 0)\n      .attr(\"x2\", 0)\n      .attr(\"y2\", d =&gt; d.length)\n      .attr(\"transform\", d =&gt; `rotate(${d.scale(d.value)})`);\n    face\n      .append(\"g\")\n      .attr(\"id\", \"face-overlay\")\n      .append(\"circle\")\n      .attr(\"class\", \"hands-cover\")\n      .attr(\"x\", 0)\n      .attr(\"y\", 0)\n      .attr(\"r\", clockRadius / 20);\n  }\n  function moveHands() {\n    const sel = d3\n      .select(\"#clock-hands-final\")\n      .selectAll(\"line\")\n      .data(handData)\n      .transition();\n    if (fancySecondsOFF) sel.ease(d3.easeElastic.period(0.5));\n    sel.attr(\"transform\", d =&gt; `rotate(${d.scale(d.value)})`);\n  }\n  function updateData() {\n    handData[0].value = !fancySecondsOFF ? Math.floor(selectedExactN * 10) : decTimeN[0];\n    handData[1].value = !fancySecondsOFF ? Math.floor(selectedExactN * 10 % 1 * 100) : decTimeN.slice(2, 4);\n    handData[2].value = !fancySecondsOFF ? selectedExactN * 10 % 1 * 100 % 1 * 100 : decTimeN.slice(4, 6);\n  }\n  const svg = d3\n    .create(\"svg\")\n    .attr(\"viewBox\", [0, 0, w, h])\n    .style(\"max-width\", `${width / 2.1}px`)\n    .attr(\"class\", \"analogclock\")\n    .attr(\"id\", \"btmclock\");\n  svg\n    .append(\"text\")\n    .text(`-${decTimeN}-${selectedZone}`)\n    .attr(\"x\", clockRadius + margin)\n    .attr(\"y\", clockRadius * 2 + margin * 2.1)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"font-size\", 32)\n    .attr(\"font-family\", \"monospace\");\n  drawClock();\n  // Animation\n  const interval = setInterval(\n    () =&gt; {\n      updateData();\n      moveHands();\n    },\n    !fancySecondsOFF ? 10 : 864\n  );\n  invalidation.then(() =&gt; clearInterval(interval));\n  return svg.node();\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo rotate the globeüåêin the Earthüåèorbit diagram, drag the red‚≠ïÔ∏ècircle horizontally‚ÜîÔ∏éÔ∏èor slide the redüî¥dot on the daylight area chart vertically‚Üï. The red‚≠ïÔ∏ècircle‚Äôs vertical‚Üïposition determines the yearly daylight pattern visualized by the area chart. Shift the red‚Äîline on the area chart horizontally‚ÜîÔ∏éÔ∏èto move the globeüåêalong the ellipse of the Earthüåéorbit.\nYearly day aggregate (yda)\nThe red‚Äîline indicates a ‚Äúday of year‚Äù (doy), , and the redüî¥dot denotes a ‚Äútime of day‚Äù (tod): . A doy identifies a day in a year like a Gregorian calendar month and ‚Äúday of month‚Äù (dom). A tod specifies a point in a day like an ‚Äúhour minute second‚Äù (hms) triplet. Together, a doy and tod can form a ‚Äúyearly day aggregate‚Äù (yda): .\n\\[\\text{yda} = \\text{doy} + \\text{tod}\\]\nAs their names suggest, doys and ydas are measured in days. The measurement unit of a tod can be a day or a submultiple of a day. By changing how a decimal tod is measured, we can shift its decimal separator or turn it into an integer. The tods along the y-axis of the area chart are integers because they have three digits and are measured in millidays.\nEpochal day aggregate (eda)\nWe can turn an yda into a tod by keeping the remainder after dividing by one to isolate the decimal part of the quotient:  mod 1 = . We can use this same approach to obtain a tod from an ‚Äúepochal day aggregate‚Äù (eda):  mod 1 = . The current eda tells us how many days have passed since the Dec epoch.\n\\[\\text{tod} = \\text{yda} \\text{ mod } 1 = \\text{eda} \\text{ mod } 1\\]\nUNIX time equation\nSimilarly, UNIX time tallies the seconds since the UNIX epoch, which is exactly 719468 days after the Dec epoch. To get the tod in Zone 0, the Dec time zone that is in between the two leftmost vertical lines on the mapüó∫Ô∏è, we can divide UNIX time by the number of seconds in a day and then keep the remainder after dividing the resulting days by one:\n\\[\\text{tod} = \\text{unix} \\div 86400 \\text{ mod } 1\\]\nJulian time equation\nJulian dates track the days since the beginning of the Julian period and thus are akin to edas. We can produce a Zone 5 tod from a Julian date simply by keeping the remainder after dividing by one. If we want a Zone 0 tod instead, we should add 5 decidays to the Julian date before converting it to a tod to ensure that the final result is less than one day:\n\\[\\text{tod} = (\\text{julian} + 0.5) \\text{ mod } 1\\]\nHour minute second\nWe can also obtain a Zone 0 tod from a Coordinated Universal Time (UTC) hms triplet by summing its components after converting them to fractional days, as shown in the equation below. The computer programming code in the tabset panel beneath the equation compares tods derived from UTC and UNIX time as Quarto was rendering this webpage.\n\\[\\text{tod} = \\frac{\\text{hour}}{24} + \\frac{\\text{minute}}{1440} + \\frac{\\text{second}}{86400}\\]\n\n\nJulia\nObservable JavaScript\nPython\nR\n\n\n\n\nusing Dates\nhms = now(UTC)\n\n2025-07-17T18:14:41.900\n\nhour(hms) / 24 +\nminute(hms) / 1440 +\nsecond(hms) / 86400 +\nmillisecond(hms) / 864e5\n\n0.7602071759259259\n\ndatetime2unix(hms) / 86400 % 1\n\n0.7602071759283717\n\n\n\n\n\nhms = new Date();\nhms.getUTCHours() / 24 +\nhms.getUTCMinutes() / 1440 +\nhms.getUTCSeconds() / 86400 +\nhms.getUTCMilliseconds() / 864e5;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhms.getTime() / 864e5 % 1;\n\n\n\n\n\n\n\n\n\n\n\nfrom datetime import datetime, timezone\nhms = datetime.now(timezone.utc)\nhms.hour / 24 + \\\nhms.minute / 1440 + \\\nhms.second / 86400 + \\\nhms.microsecond / 864e8\n\n0.7602234699537037\n\nhms.timestamp() / 86400 % 1\n\n0.7602234699552355\n\n\n\n\n\nhms &lt;- as.POSIXlt(Sys.time(), tz = \"UTC\")\nhms$hour / 24 +\nhms$min / 1440 +\nhms$sec / 86400\n\n[1] 0.7602237\n\n(as.numeric(as.POSIXct(hms)) / 86400) %% 1\n\n[1] 0.7602237\n\n\n\n\n\nThe equations below turn UNIX time or a Zone 0 tod into the three components of an hms triplet: the ‚Äúhour of day‚Äù (hod), ‚Äúminute of hour‚Äù (moh), and ‚Äúsecond of minute‚Äù (som), using a ‚Äúdaily second aggregate‚Äù (dsa) and ‚Äúhourly second aggregate‚Äù (hsa). While both count seconds, dsas start at midnight and hsas begin at the top of the hour.\n\\[\\text{dsa} = \\text{tod} \\times 86400 = \\text{unix mod } 86400\\]\n\\[\\text{hsa} = \\text{dsa mod } 3600\\]\n\\[\\text{hod} = \\lfloor \\text{dsa} \\div 3600 \\rfloor\\]\n\\[\\text{moh} = \\lfloor \\text{hsa} \\div 60 \\rfloor\\]\n\\[\\text{som} = \\lfloor \\text{hsa mod } 60 \\rfloor\\]\n\n\nJulia\nObservable JavaScript\nPython\nR\n\n\n\n\nusing Dates\ndsa = datetime2unix(now(UTC)) / 86400 % 1 * 86400\n\n1024.2920000106096\n\nhsa = dsa % 3600\n\n1024.2920000106096\n\nmap(x -&gt; floor(Int, x), (dsa / 3600, hsa / 60, hsa % 60))\n\n(0, 17, 4)\n\n\n\n\n\ndsa = Date.now() / 864e5 % 1 * 86400;\nhsa = dsa % 3600;\n[dsa / 3600, hsa / 60, hsa % 60].map(Math.floor)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfrom datetime import datetime, timezone\ndsa = datetime.now(timezone.utc).timestamp() / 86400 % 1 * 86400\nhsa = dsa % 3600\ntuple(map(int, [dsa // 3600, hsa // 60, hsa % 60 // 1]))\n\n(0, 17, 5)\n\n\n\n\n\ndsa &lt;- (as.numeric(as.POSIXct(Sys.time())) / 86400) %% 1 * 86400\nhsa &lt;- dsa %% 3600\nsapply(c(dsa %/% 3600, hsa %/% 60, hsa %% 60), as.integer)\n\n[1]  0 17  5\n\n\n\n\n\nThe Global Positioning System, BeiDou, and Galileo global navigation satellite systems along with most ‚Äî if not all ‚Äî programming languages do not account for leap seconds, which appears to be for the best given that leap seconds will be abolished by 2035. The goal of leap seconds is to keep UTC within 1.0416 centimillidays (cmds) of Universal Time (UT).\nTime zone offset\nInstead of leap seconds, Dec matches UT using a ‚Äútime zone offset‚Äù (tzo). With the leap second insertion dates provided by the International Earth Rotation and Reference Systems Service, we can approximate the tzo we need to add to the Zone 0 tod to obtain UT on the year+day Dec date selected by the rangeüéöÔ∏èinputs below:  √∑ 8640 = .\n\nviewof leapSecondYear = Inputs.range([1970, 2020], {label: \"Year\", value: 1995, step: 1})\nviewof leapSecondDate = Inputs.range([0, 365], {label: \"Day\", value: 182, step: 1})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nApparent solar time\nBoth UT and apparent solar time (ast) vary over time. Unlike UT, ast also varies by longitude and is cyclical on a yearly basis. To approximate ast for a given deciparallel longitude (\\(\\text d\\lambda\\)) and doy, we sum the Zone 0 tod, \\(\\text d\\lambda\\), and the result obtained from plugging the doy into the equation of time (eot):  +  +  = .\n\nviewof longInput = Inputs.range([0, 10], {label: \"Longitude\", value: 5, step: 0.01})\n\n\n\n\n\n\nThe National Oceanic and Atmospheric Administration (NOAA) provides yearly and daily eot values. To create a Dec version of the eot, we can sort the yearly NOAA eot values by their doy and then fit a curve to the sorted values so that we can use the fitted model coefficients (\\(\\beta_0\\) to \\(\\beta_4\\)) as the eot constants in the NOAA General Solar Position Calculations:\n\\[\\tau = 2 \\times \\pi\\]\n\\[\\text{toy} = \\text{doy} \\div \\text{n}\\]\n\\[\\gamma = \\tau \\times \\text{toy}\\]\n\\[\\begin{split}\n\\text{eot}(\\gamma) & = \\beta_0 \\\\\n& + \\beta_1 \\times \\cos(\\gamma) \\\\\n& + \\beta_2 \\times \\sin(\\gamma) \\\\\n& + \\beta_3 \\times \\cos(2\\gamma) \\\\\n& + \\beta_4 \\times \\sin(2\\gamma)\n\\end{split}\\]\n\\[\\text{mst} = \\text{tod} + \\text{d}\\lambda\\]\n\\[\\text{ast} = (\\text{mst} + \\text{eot}(\\gamma) + 10) \\text{ mod } 10\\]\nEquation of time\nIn the equations above, \\(\\tau\\) is two times \\(\\pi\\), n is the number of days in a year, the ‚Äútime of year‚Äù (toy) is the doy divided by n, \\(\\gamma\\) is the toy multiplied by \\(\\tau\\), ‚Äúmean solar time‚Äù (mst) is the Zone 0 tod plus \\(\\text d\\lambda\\). We can refer to \\(\\text d\\lambda\\) as the mst tzo and the sum of \\(\\text d\\lambda\\) and eot(\\(\\gamma\\)) as the ast tzo. Using the coefficients shown below, we can plot eot(\\(\\gamma\\)) against doy:\n\n\n\n{0: 1.4950424467725955e-05,\n 1: -0.04189873301524992,\n 2: -0.02923703633324393,\n 3: -0.0456943801628261,\n 4: 0.05175601752530743}\n\n\nSource: eot.ipynb\n\n// https://observablehq.com/@mcmcclur/plot-for-mathematicians\n{\n  let w = 800;\n  let h = 0.625 * w;\n  let samples = build_samples(\n    getEot, -366, 365, { N: 150 }\n  );\n  let plot = Plot.plot({\n    marginLeft: 60,\n    width: w,\n    height: h,\n    style: \"font-size:19;\",\n    y: {label: \"time zone offset\"},\n    x: {label: \"day of year\"},\n    marks: [\n      Plot.line(samples, {\n        strokeWidth: 4,\n        stroke: \"steelblue\",\n        tip: true\n      }),\n      Plot.ruleX([-366]),\n      Plot.ruleY([0]),\n      Plot.axisX({ y: 0 }),\n      Plot.axisY({ x: -366 })\n    ]\n  });\n  return plot;\n}\n\n\n\n\n\n\nSolar declination angle\nWe can subtract the ast tzo from five to get the Zone 0 tod of solar noon at the given longitude. Before we can find the sunrise and sunset tod, we first need to calculate the solar declination angle (sda). For simplicity, we can use the eot for sda, even though the NOAA General Solar Position Calculations propose the more complex model shown below.\n\\[\\text{noon} = (5 - \\text{d}\\lambda - \\text{eot}(\\gamma) + 10) \\text{ mod } 10\\]\n\\[\\begin{split}\n\\text{sda}(\\gamma) & = \\beta_0 \\\\\n& + \\beta_1 \\times \\cos(\\gamma) \\\\\n& + \\beta_2 \\times \\sin(\\gamma) \\\\\n& + \\beta_3 \\times \\cos(2\\gamma) \\\\\n& + \\beta_4 \\times \\sin(2\\gamma) \\\\\n& + \\beta_5 \\times \\cos(3\\gamma) \\\\\n& + \\beta_6 \\times \\sin(3\\gamma) \\\\\n\\end{split}\\]\nSolar hour angle\nIf the ‚Äúsolar zenith angle‚Äù (sza) in the equation below is 0.2523 turns, the equation will yield a sunrise ‚Äúsolar hour angle‚Äù (sha) that we can use to get a sunrise or sunset tod. Dec measures angles in turns. The trigonometric functions of most ‚Äî if not all ‚Äì programming languages require radians. To convert turns into radians, we multiply by \\(\\tau\\).\n\\[\\text{radian} = \\text{turn} \\times \\tau = \\text{degree} \\times \\tau \\div 360\\]\n\\[\\text{turn} = \\text{radian} \\div \\tau = \\text{degree} \\div 360\\]\n\\[\\text{degree} = \\text{radian} \\div \\tau \\div 360 = \\text{turn} \\times 360\\]\n\\[\\text{sha} = \\arccos\\left( \\frac{\\cos(\\text{sza}\\times\\tau)}{\\cos(\\phi\\times\\tau) \\cdot \\cos(\\text{sda}\\times\\tau)} - \\tan(\\text{$\\phi\\times\\tau$}) \\cdot \\tan(\\text{sda}\\times\\tau) \\right)\\]\nIn the equation above, latitude is measured in turns called meridians (\\(\\phi\\)). The difference between a solar noon and sunrise sha is a sunrise tod. Likewise, the sum of a solar noon and sunrise sha is a sunset tod. To get the daylight duration in decidays, we can either subtract the sunset tod from the sunrise tod or multiply the sunrise sha by twenty.\n\\[\\text{sunrise} = \\text{noon} - \\text{sha}\\]\n\\[\\text{sunset} = \\text{noon} + \\text{sha}\\]\n\\[\\text{duration} = \\text{sunset} - \\text{sunrise} = \\text{sha} \\times 20\\]\nThe rangeüéöÔ∏èinputs below set the geographic coordinates that are used for the equations above. The line chart beneath the inputs visualizes sunrise and sunset for every doy, similar to the daylight area chart beneath the mapüó∫above. The main difference between the charts is that the area chart shows local tods and thus is independent of longitude, whereas the line chart displays tzos and therefore changes with longitude.\nIn general, computer programmers and mathematicians seem to prefer radians over degrees. are better because the Dec base units of time, longitude, and latitude can be multiplied by \\(\\tau\\) to can convert days, parallels, and meridians into radians simply by multiplying to . Apart from such as solar noon, In Dec, any tod can be expanded to show a subtrahend and a difference. specific point in the day called a subtrahend. The difference between the original tod and a . A tod without the diff is called a minuend and Positive diffs show how much time has passed and negative diffs show how much time is left.\n\\[\\text{minuend} = \\text{subtrahend} + \\text{diff}\\]\n\\[\\text{minuend} = \\text{subtrahend} + \\text{diff}\\]\nThe Zone 0 tod relative to the solar noon that corresponds to the doy and longitude selected by the rangeüéöÔ∏èinputs above is .\nIn Zone 0, this was our solar noon, we could could all agree to center our daily schedules on the Zone 0 tod of our local solar noon, there would be no need for time zones. could start work two decidays before solar noon and finish two decidays after solar noon.\ndepends on longitude. At any given moment, there is only one UT and 105 five-digit mean solar times. The tzo we use to get the mean solar time of a location is equal to its deciparallel longitude. We can use the equation of time to turn the mean solar time of into apparent solar time.\nsum of a tzo and the Zone 0 tod. We can use the equation of time to turn the mean solar time of a location Similarly, the deciparallel longitude of the red‚≠ïÔ∏ècircle on the map above is the tzo that we sum with the Zone 0 tod to get mean solar time.\nboth cases, we are adding a tzo to the We can turn mean solar time A Dec time consists of a tod and a tzo. The current Dec time in Zone 0 is -0. If we add 27 seconds to the Zone 0 time, we will get the time in Zone 0.003125: -0.003125. We can evaluate any Dec time like a math expression to obtain a Zone 0 tod:  - 0.003125 = .\nWithout leap seconds, the duration of a day is constant, each hms triplet occurs only once per day, hms triplets can be derived directly from UNIX time or a tod independently of the date as shown above, and the som component stays within its bounds: 0 ‚â§ som &lt; 60. UTC is based on atomic clocks and UT is determined by the rotation of the Earth. rom the perspective of Dec,\nthat represents the difference between UT and the Zone 0 tod.\nTo display hms triplets, Dec uses math expressions that evaluate to a deciday tod and leave no doubt about the measurement unit of each component: hod/2.4+moh/144+som/8640. Like the Julia, Matlab, and R programming languages, Dec uses colons for numeric sequences such as 12:15, which means 12, 13, 14, and 15 instead of 12.25 hours.\nDec uses centimillidays (cmds) in lieu of seconds. Centimillidays Instead of inserting a submultiple of a day into tods, would be to follow the switch from base 10 to base 11 on a specific date and then switch back. The last tod on that date would be 9.999Abbbbbbbbbbbbb able to take leap seconds into account without changing the duration of a day, repeating a tod within the same day, handles leap seconds by converting them to decidays and adding them to a ‚Äútime zone offset‚Äù (tzo). This way, Dec can match any time with any number of leap seconds the duration of a day never changes, hms triplets never repeat within the same day, Dec can match any possible All of the we can be certain that leap seconds do not exist, meaning that In Dec, days always have the same duration, we can obtain a tod without knowing the date, and tods never go outside their bounds or repeat within the same day. , of decimal inserts leap days to increase the duration of leap year from 365 to 366 days, but leap seconds cannot exist. Leap seconds /\nNegative leap seconds are evidence If an hms triplet repeats, we will know that a had just been inserted. If an hms triplet exceeds its bounds, we will know that a positive leap second had just been inserted. In general, we cannot know how many leap seconds have been inserted thus far simply by looking at an hms triplet.\nof sixty seconds in a minute. In Dec, every tod leap seconds are literally impossible, because days always have the same duration and tods are decimal numbers.\nPython\nIn Dec, days always have the same duration and tod calculations are independent of the date. Currently, 27 leap seconds To know how many leap seconds have been inserted by a given date, we have to consult a table. The duration of the days into which its are inserted. Instead of changing the duration of certain days, Dec handles leap seconds by converting them to decidays and adding them to a ‚Äútime zone offset‚Äù (tzo).\nThe languages in the tabset panels in this article, Julia, Python, Observable JavaScript, and R, do not differ in this regard which Dec refers to as the ‚ÄúQuarto principal languages‚Äù (Qpls).\nWith the code above we can convert between a Zone 0 tod and a UTC hms triplet. According to Dec and all four of the programming languages used above, UTC does not have any leap seconds.\nDec always measures tzos in decidays. The tzos of the ten Dec time zones are all single-digit positive integers. The difference between these ten tzos, 0 to 9, we can match the time in any UTC time zone to within 0.5 decidays.\nIf more precise matches are required, Dec can use tzos that have more than one digit. The level of precision required depends on the situtation. Let us say that we want to schedule a meeting with someone If we want to replicate a shift form make the time in UTC time zones that have a tzo of -5, 0, or 5, a . At some point the increased precision of additional digits will no If we lived in Zone 0 and wanted to schedule a meeting with someone on a particular date, we might two digits, the time difference will not exceed 5 millidays and will be able to shift tzos by one centiday, which is less a quarter hour. With four digits, the difference between Dec and UTC tzos would be either zero or 288 milliseconds. We can choose to have more than four digits, but the difference is not likely to be noticeable. Therefore, four digits is a sensible If we wanted to match The UTC tzo used by the highest number of people in the world is 10/3.\nThere are three types of purpose of time zones is to keep To match the time in a UTC time zone exactly, Dec will often need to use a decimal tzo.\nUTC, UNIX time, and Zone 0 all have a tzo of 0. tod and because both have a tzo of . If we add 27 leap seconds to UTC, Dec would describe the result as a Zone 0.003125 tod.\nEach leap second shifts a tzo by 1/8640. By default, Dec rounds decimal tzos to the near deciday: ‚åätzo + 0.5‚åã. When necessary, Dec is able to exactly match times that include leap seconds or a decimal tzo.\nThe result of adding leap seconds to a tzo depends on how many leap seconds we add. If we add a number of leap seconds that is a multiple of 8640, we get a\nand deals with negative tzos keeping the remainder after adding ten and then dividing by ten: (tzo + 10) mod 10.\nAfter combining a UTC tzo, Dec first combines it with to decidays, Dec rounds decimal tzos to the nearest deciday. and makes negative tzos that are positive integers. and therefore rounds\nUnless To support leap seconds and the vast majority of UTC tzos, Dec tzos that are . If we add leap seconds to these tzos, they will no longer be integers\n[\nIf a tzo is a repeating decimal, Dec will display it as a fraction.\n0003125. new tzo will be 0.003125 and the new uzi will be . the Dec time will be -0003125. The 0003125 The uzi tells us that the go from 0 to [0003125] and the D\nan hms triplet into a Dec time, we need to know its UTC tzo, and how many leap seconds it includes. a tod, from a programming language, it is can assume that leap seconds are not included. tzoThe Dec equivalent of UTC with is a Dec tod, tzo, uzi, If we add 27 leap seconds We can combine the tod in any Dec time zone by summing the Zone 0, 27 leap seconds to a Zone  tod, we get add the result deciday and the tzo selected by the rangeüéöÔ∏èinput below is [0.003125] +  = . If we add the resulting tzo to the Zone 0 tod, we get . last two digits of this tzo and uzi are not visible in a five-digit tod If we remove the decimal separator from this tzo, we get its uzi: .\n\nviewof offset = Inputs.range([-10, 9], {label: \"Offset\", value: 0, step: 1})\n\n\n\n\n\n\nEvery tzo has a corresponding ‚Äútime zone index‚Äù (tzi). In the case of the ten Dec time zones, the tzo and tzi are identical. The tzi that corresponds to the Dec measures tzos in decidays. If a tzo is a single-digit integer, it likely or fractions. The tzos of the ten Dec time zones are positive integers. contain leap seconds as fractions. Even if we disregard leap seconds, fractions in tods and tzos to are single-digit integers or fractions. Dec only uses ten Dec time zones each have a tzo that is a : 0 to 9 decidays. In contrast, UTC tzos range range from -5 to 5.83ÃÖ decidays. A UTC time zone with a negative tzo will be between have a similar time To avoid date mismatches with , we can subtract ten decidays from any positive Dec tzo to make it negative:  ‚Äì 10 = .\nfar increase the Each leap second shifts the ozi by\nFinding the Dec time zone with the closest tzo to a given UTC tzo entails converting an hms triplet to decidays, adding ten, keeping the remainder after dividing by ten, and then rounding to the nearest deciday. matching a tzo of -5 yields the same tod as exactly one day behind Zone [5 Dec avoids incompatible with the ten Dec time zones. Dec expresses incompatibles tzos as fractions. Officially, t Dec refers to UTC with 27 leap seconds as UTC+00:00:27 or UTC+1/320. Dec can relax its requirement that each tzo be a single-digit positive integer deciday to match any UTC tzo.\n\nviewof hmsinput = Inputs.form([\n  Inputs.range([-24, 24], {label: \"Hour\", value: 0, step: 1}),\n  Inputs.range([0, 60], {label: \"Minute\", value: 0, step: 1}),\n  Inputs.range([0, 60], {label: \"Second\", value: 0, step: 1}),\n])\n\n\n\n\n\n\ntzos is\nDec Positive and negative offsets that differ by exactly ten decidays yield identical times, but result in dates that are precisely one day apart.\nhttps://stackoverflow.com/a/23575642 Use fractions.js to turn non standard offsets into fractions.\nTo determine which Dec time zone you are in, Dec would need to know your longitude. In general, Dec allows for everyone to use whatever tzo they want, regardless of their geographic location. The UTC tzo provided by your web browser is -300 minutes √∑ 144 = -2.083333 dd. In the absence of any other information, Dec would round this tzo to the nearest deciday (dd), , and infer that you are in Zone 8. which Dec time zone you are in unless Rounding UTC tzos can result in a time difference of up to 0.5 dd. Adding 27 leap seconds increases the maximum time difference to 161/320 dd. With time zone rounding, the time difference between your Dec and UTC time zones is 11.52 √∑ 144 = 0.08 dd. With 27 leap seconds, this difference is /320.\nThe UTC offset provided by your web browser is  √∑ 144 =  dd. The Dec time zone that corresponds to this UTC offset is Zone . The time in corresponding Dec and UTC time zones can differ by up to 0.5 dd. The difference between your Dec and UTC time is  √∑ 144 =  dd.\nTo obtain the time in Zone 0, we can subtract the offset of any time zone from its time. Inversely, we can get the time in any time zone by adding its offset to the Zone 0 time. The dates and times in Zone 0 and UTC+00:00 match exactly. Zone 5 and UTC+12:00 also have matching dates and times, both are precisely one day ahead of UTC-12:00.\nThis stance is at odds with the International Earth Rotation and Reference Systems Service, which has inserted 27 leap seconds into UTC.\nsince [1972]. Dec does not automatically shift time away necessary, Dec handles any shift away from leap seconds in time zone offsets.\nLeap seconds\nTo indicate the\nIn Dec, the components of an hms triplet are called the ‚Äúhour of day‚Äù (hod), ‚Äúminute of hour‚Äù (moh), and ‚Äúsecond of minute‚Äù (som).\nDec handles differences from Zone 0 with time zone offsets. There is no time difference between Zone 0 and UNIX time. Dec applies a time zone offset 5 decidays to Julian dates because the Dec epoch occurred at midnight (0 decidays) and the Julian period started at noon (5 decidays).\nTo convert days to decidays, we multiply the tod by ten.\nIn Dec, days start at midnight, instead of noon, but have the same duration as Julian days: 86400 International System of Units (SI) seconds or 100000 Dec beats.\nThe duration of days in Dec and Julian dates The difference between the Dec epoch and the beginning of the Julian period is the only thing that distinguishes Julian date and a doe is its epoch.\nIn Coordinated Universal Time (UTC), days start at midnight, but the length of a day can vary due to leap seconds. In Dec, a day always has the same duration as a\nWhen matching UTC is required, Dec avoids day length changes by adding leap seconds to a UTC time zone offset. According to Dec, the UTC+00:00 time zone does not have any leap seconds because its offset is 0. To indicate that a UTC time zone includes the 27 leap seconds that have been inserted into UTC so far, Dec appends :27 to its offset.\nThe Dec equivalent of the UTC+00:00:27 time zone is Zone 1/320.\nIn UTC, the length of Day 121 or Day 305 can vary due to leap seconds. T this offset as T To represent the 27 leap seconds that have been added to UTC so far, Dec uses an offset of 1/320 dd. Dec refers to the UTC time zone that has this offset as UTC+00:00:32.\neither or secon Since 1972+121, 27 positive leap seconds have been added to UTC, and 0 negative leap seconds have been whave been in a Julian date or a doe i Dec does not allow The time in the ten Dec time zones never include\no depending on whether the leap second is p.¬†Dec uses to represent leap seconds without changing the length of a day in the same way as leap days changes the length of a year. Instead of allowing the length of a day included, some UTC days will be 86401 or 86399 seconds long. So far, 27 positive leap seconds have been added, some UTC days will differ in length. includes of seconds, Dec uses beats. 100000 The programming languages that the Quarto FAQ refers to as principal languages supported by Quarto, Python (Quarto principal languages), R, Julia, and Observable JavaScript, do not include leap seconds in UTC time. Therefore, a day in Even though the Dec, UNIX, and UTC epochs all occurred at midnight, UTC time may be shifted in relation to Dec or UNIX time because of leap seconds. Since 1972+121, 27\nWe can make the time in any Dec time zone match UNIX by subtracting its time zone offset. The time in the Zone 0 Dec time zone always matches UNIX time. because neither includes leap seconds. Dec considers Coordinated Universal Time (UTC) +00:00 time zone to also match UNIX time. If there is a leap seconds are not included. Dec handles leap seconds like an additional time zone offset. UTC +00:00:00 with 27 leap seconds is referred to as Zone 1/320 in Dec and . which\nUTC+00:00\nTo produce a Zone 0 tod from an hms triplet, we get the difference between the hms triplet and its UTC time zone offset, convert its components to either days or decidays, and sum the converted components.\nand\n\\[\\text{deciday} = \\frac{\\text{hour}}{2.4} + \\frac{\\text{minute}}{144} + \\frac{\\text{second}}{8640}\\]\n\\[\\text{day} = \\frac{\\text{hour}}{24} + \\frac{\\text{minute}}{1440} + \\frac{\\text{second}}{86400}\\]\ndoes not include leap seconds or a Coordinated Universal Time (UTC) time zone offset and\nthan +00 and +12 will not match the time in any of the ten Dec time zones. We can create a tod by summing the components of an hms triplet after\nthat were added a Coordinated Universal Time (UTC) +00:00 time zone. An hms triplet that includes leap seconds or a\nTo be compatible with Dec, a time zone offset must be equivalent to one of the ten positive single-digit integer deciday Dec offsets. The Zone 5 Dec time zone and UTC +12:00 time zone have equivalent offsets: 5 decidays = 12 hours. Likewise, the Zone 0 Dec time zone, UNIX time, and the UTC +00:00 time zone all have an offset of 0.\nApart from UTC +00:00 and +12:00, all of the other UTC time zones are incompatible with Dec.¬†To find the deciday time difference \\(\\Delta\\) between a UTC time zone and its closest Dec time zone, convert the offset of the UTC time zone to decidays and then calculate how much the converted offset changes after rounding it to the nearest deciday.\n\\[\\Delta = \\text{offset} - \\lfloor\\text{offset} + 0.5\\rfloor\\]\nRepeating decimal numbers\nDec expresses incompatible offsets as positive or negative fractions or multi-digit integers. UTC offsets are either repeating or terminating decimal numbers. Dec displays repeating decimal offsets as fractions and terminating decimal offsets as integers. UTC +08:00, the most populous UTC time zone, has an offset of .3 days and is called Zone 1/3 in Dec.¬†In contrast, UTC +03:00 has an offset of .125 days and is called Zone 125 in Dec.\nTerminating decimal number offsets can be displayed by Dec provided there is enough space for the additional digits. Dec displays repeating decimal number offsets as fractions. The second most populous UTC time zone, UTC +05:30, translates to Zone 55/24 or Zone 2.2916 in Dec.¬†The top six most populous UTC time zones all have positive offsets.\nWhen it is midnight (tod=0) in Zone 0, it is noon (tod=5) in Zone 5 and the time in every other time zone is equal to it it is ~5.33 in Zone 10/3, ~4.29 in Zone 55/24, and\nTo obtain the Zone 0 time, we evaluate any Dec time as a math expression, add 10, and then get the remainder after dividing by 10 to make sure the result is less than 10 decidays.\nThe use of incompatible offsets makes mental calculations involving time zones much harder. Also, incompatible offsets are more difficult to display and read in the format of Dec times. Despite these clear disadvantages, Dec will attempt to parse, process, and display any time zone offset that is provided. Incompatible offset that are repeating decimal numbers can be displayed as fractions, truncated numbers\nnoon in UTC +08:00 could be written as 5.00-10/3 or 5.00-3.3.\nDec does not set a hard limit on the number of time zones, but negative time zones offsets to improve its compability with UTC.\n\n\n\n\n\n\nBad Pun Alert\n\n\n\nSorry if reading this takes a long time; I hope you don‚Äôt zone out!\n\n\nIf a Dec time zone offset is not specified, we can detected a time zone using Whether or not negative time zones offsets are worth the trouble is a matter of that the offer little to no benefit. The UTC -12:00 and +12:00 time zones and the Zone 5 and -5 Dec time zones all have the same time, but their dates do not match, because UTC -12:00 and Zone -5 are one day behind UTC +12:00 and Zone 5. Dec discourages the use of time zones with negative offsets.\n\n// https://observablehq.com/@mattdzugan/population-by-time-zone-creating-a-dataset\nviewof sortParams = Inputs.form([\n  Inputs.toggle({ label: \"Sort ascending\" }),\n  Inputs.toggle({ label: \"Sort by offset\" }),\n  ])\n\n\n\n\n\n\n\n// https://observablehq.com/@mattdzugan/population-by-time-zone-creating-a-dataset\nPlot.plot({\n  width: width,\n  marginBottom: 50,\n  style: `overflow: visible;font-size:16px;`,\n  color: {scheme: \"RdBu\", className: \"barPlotLegend\"},\n  marginLeft: 75,\n  y: { label: null },\n  x: { grid: true, label: \"Population (billions)\", labelOffset: 38, transform: d =&gt; d / 1e9 },\n  marks: [\n    Plot.barX(sortedPop, {x: \"pop\", y: \"Sign\", fill: \"Offset\", stroke: \"black\", tip: true }),\n  ]\n})\n\n\n\n\n\n\nCoordinated Universal Time (UTC)\nThe UTC -12:00 time zone contains only strict nature reserves and thus does not have any inhabited territory.\nThe remaining UTC time zones with negative offsets\nIf we disregard leap seconds, the +00 UTC time zone is synchronized with UNIX time and the Zone 0 Dec time zone. The +12 and -12 UTC offsets have the same time but their dates are one day apart.\nWe can honor this difference by translating +12 compatible 37 UTC offsets, only 3 are integers after they are converted to time zones. Conversion between Dec time zones and UTC offsets is inexact, because UTC offsets depend on geographic and political boundaries, whereas Dec time zones are determined solely by longitude.\nbecause UNIX time, UTC+00:00, and Zone 0 are all synchronized.\nSimilarly, a UTC+00:00 hms triplet yields a Zone 5 tod.\nUTC\nInstead of passing an hms triplet and its UTC time zone offset to the UTC tod equation separately, we can subtract the offset from the triplet to produce a UTC+00:00 hms triplet. In other words, we can avoid converting time zone offsets if we always first shift the input hms triplet to UTC+00:00.\nTo obtain the Zone 0 time, we evaluate a Dec time as a math expression, add 10, and get the remainder after dividing by 10 to make sure the result is less than 10 decidays: (   + 10) mod 10 = .\nInstead of passing both a UTC hms triplets and its UTC time zone offset to the UTC tod equation.\nInstead of performing this calculation on both a UTC hms triplet and its UTC time zone offset, we should subtract the offset from the triplet.\nequation should be a UTC+00:00 hms triplet so that we do not have to convert a UTC time zone offset to decidays.\nWhen we add a UTC offset to a UTC hms triplet, with the resulting UTC+00:00 time.\nThe time in Zone 0 matches UTC time with the UTC+00:00 offset. UNIX time and three UTC offsets are called UTC+00:00, UTC+12:00, and UTC-12:00. Starting with a UTC+00:00 hms triplet results in Zone 0 tod.\nonly three out of the UTC time zones are synchronized with a Dec time zone it will most likely be easier to shift the hms triplet to will result in days instead of decidays if we divide by the most Dec and UTC time zones are not aligned. Whereas UNIX time is always synchronized with Zone 0 and UTC+00:00, This method ensure that the result matches\nUTC time zone offsets\nDrag the red‚≠ïÔ∏ècircle across the meridians (vertical‚Üïgray lines) on the mapüó∫Ô∏èto see how changing time zones affects the time. Only the first digit of the Dec times shown above, the deciday, varies across time zones, because the 10 Dec time zones, numbered 0 through 9 on the mapüó∫Ô∏è, are each 1 deciturn (dt) wide. Simply put, a deciturn of longitude translates into a deciday of time.\nThe leftmost vertical‚Üïline on the mapüó∫Ô∏èis Meridian 0, the Dec International Date Line and prime meridian, which cuts across the Atlantic Ocean through IcelandüáÆüá∏just West of Africaüåçand is the boundary between Zone 9 and Zone 0, the rightmost and leftmost Dec time zones on the mapüó∫Ô∏è, respectively. Arranging Dec time zones from 0 to 9 yields a Pacific-centric mapüó∫Ô∏è.\nWhile only positive Dec time zones are shown on the mapüó∫Ô∏è, every Dec time zone can also be expressed as a negative number. Each pair of time zone numbers produces the same Dec time, but result in Dec datesüóìÔ∏èthat are 1 day apart. Negative time zone numbers can be useful for getting Dec datesüóìÔ∏èto match Gregorian calendar datesüóìÔ∏èwith negative UTC offsets.\nIf you know your longitude in degrees (¬∞) or centiturns (ct), you can look up your Dec time zone (TZ) in the table below.\n\n\n\n\n\n\n\n\n\n\n\n\nTZ+\nTZ-\nStart¬∞\nMid¬∞\nEnd¬∞\nStart\\(ct\\)\n\nMid\\(ct\\)\n\nEnd\\(ct\\)\n\n\n\n\n9\n-1\n-54\n-36\n-18\n90\n95\n100\n\n\n8\n-2\n-90\n-72\n-54\n80\n85\n90\n\n\n7\n-3\n-126\n-108\n-90\n70\n75\n80\n\n\n6\n-4\n-162\n-144\n-126\n60\n65\n70\n\n\n5\n-5\n162\n180\n-162\n50\n55\n60\n\n\n4\n-6\n126\n144\n162\n40\n45\n50\n\n\n3\n-7\n90\n108\n126\n30\n35\n40\n\n\n2\n-8\n54\n72\n90\n20\n25\n30\n\n\n1\n-9\n18\n36\n54\n10\n15\n20\n\n\n0\n-10\n-18\n0\n18\n0\n5\n10\n\n\n\nDec times in Zone 0 and 5 can be directly converted to and from UTC times with an offset of 0 and 12 hours, respectively. The other Dec time zones\nUnit\nDec uses metric prefixes to create submultiples of a day that can naturally be combined together into a single decimal number. Conversion between decimal units is as simple as moving‚ÜîÔ∏éÔ∏èor removing‚ùåthe decimal separator. In contrast, an hh:mm:ss time is a mixed-radix number, where hh is the base-12 or base-24 hour, mm is the base-60 minute, and ss is the base-60 second.\n\n\n\n\n\n\n\n\nPrefix\nPower\nDay\n\nhh:mm:ss.sss\n\n\n\n\n\n0\n1\n24:00:00.000\n\n\ndeci\n-1\n.1\n02:24:00.000\n\n\ncenti\n-2\n.01\n00:14:24.000\n\n\nmilli\n-3\n.001\n00:01:26.400\n\n\ndecimilli\n-4\n.0001\n00:00:08.640\n\n\ncentimilli\n-5\n.00001\n00:00:00.864\n\n\n\nTo convert the hour h, minute m, and second s into the deciday d, Dec uses the following equation: d = h √∑ 2.4 + m √∑ 144 + s √∑ 8640. The current equation values in Zone  are:  =  √∑ 2.4 +  √∑ 144 +  √∑ 8640. Inversely, we can convert decidays into hours: h = d √ó 2.4, minutes: m = h mod 1 √ó 60, and seconds: s = m mod 1 √ó 60.\nInstead of dealing with hours, minutes, and seconds, we can convert the UNIX timestamp u into the Dec time d+0. First, we divide u by 86400 to convert seconds to days, then isolate the decimal part of the quotient, and finally multiply by 10: d + 0 = u √∑ 86400 mod 1 √ó 10. The current values in this equation are  + 0 =  √∑ 86400 mod 1 √ó 10.\nThe concept of measuring time in decimal days is not novel. In the late 1700s, the French Republican calendar time system referred to decidays as decimal hours, centidays as d√©cimes, millidays as decimal minutes, and centimillidays as decimal seconds. Similarly, Swatch Internet Time, a decimal time system introduced in 1998, uses the term ‚Äú.beats‚Äù for millidays.\nSwatch Internet Time differs from Dec in that it has no time zones and is obtained from the hours, minutes, and seconds of UTC+01:00. In contrast, the major innovations described in this article are the Dec time zone system and the simple equation for obtaining the Dec time in Zone 0 from a UNIX timestamp, but Dec has much more to offer than deciday times and zones.\nNext\nThe next article in the Dec section of my site compares Dec to the ISO 8601 international standard for dates and times. Like ISO 8601, Dec allows for combined date and time representations that can be paired up to express time intervals. In Dec, the combination of a date and time is called a snapü´∞and a time interval expressed as a pair of snaps is called a spanüåà.\nMy ISO 8601 article is unique because it avoids the use of Observable in favor of leveraging Jupyter support in Quarto to make the code underlying Dec available in multiple programming languages. Observable is a great visualization tool but does not translate well into Jupyter notebooks. After the next article, I return to the use of Observable in my Dec snapü´∞and spanüåàarticles.\n\n\n\n\n\n\n%%{init: {'theme': 'default', 'themeVariables': { 'fontSize': '32px'}}}%%\nflowchart LR\n   A[Dec]--&gt;B[date]--&gt;C[time]--&gt;D[snap]--&gt;E[span]\n   click A \"/dec\"\n   click B \"/dec/date\"\n   click C \"/dec/time\"\n   click D \"/dec/snap\"\n   click E \"/dec/span\"\n\n\n\n\n\n\n\nCite\nPlease spread the good word about Dec using the citation information at the bottom of this article. You may also want to cite the Observable notebooks that I adapted into the clocküïì, barüìächart, mapüó∫Ô∏è, and daylight‚òÄÔ∏èplot visualizations in this article or the 2014 blog post which proposed a system of 20 decimal time zones, each 5 centidays wide, based on the Greenwich Meridian:\n\n\nPearson, Tom. 2013+124. ‚ÄúSimple D3 clock.‚Äù +. https://observablehq.com/@d3/simple-clock.\n\nHeyen, Frank. 2021+246. ‚ÄúBarChart Clock.‚Äù +. https://observablehq.com/@fheyen/barchart-clock.\n\nJohnson, Ian. 2021+090. ‚ÄúDraggable World Map Coordinates Input.‚Äù +. https://observablehq.com/@enjalot/draggable-world-map-coordinates-input.\n\nBridges, Dan. 2021+311. ‚ÄúVisualizing Seasonal Daylight.‚Äù +. https://observablehq.com/@dbridges/visualizing-seasonal-daylight.\n\nClements, John. 2014+091, ‚ÄúDecimal Time Zones.‚Äù +. https://www.brinckerhoff.org/blog/2014/05/31/decimal-time-zones.\n\n\nfunction unix2dote(unix, zone, offset = 719468) {\n  return [(unix ?? Date.now()) / 86400000 + (\n    zone = zone ?? -Math.round(\n      (new Date).getTimezoneOffset() / 144)\n    ) / 10 + offset, zone]\n}\nfunction unix2dote1(unix, zone, offset = 719468) {\n  return [\n    (unix ?? Date.now()) / 86400000\n    + (zone = zone ?? (10 - Math.round(\n        (new Date).getTimezoneOffset() / 144)) % 10\n      ) / 10 + offset, zone]\n}\nfunction dote2date(dote, zone = 0) {\n  const cote = Math.floor((\n      dote &gt;= 0 ? dote\n      : dote - 146096\n    ) / 146097),\n  dotc = dote - cote * 146097,\n  yotc = Math.floor((dotc\n    - Math.floor(dotc / 1460)\n    + Math.floor(dotc / 36524)\n    - Math.floor(dotc / 146096)\n  ) / 365);\n  return [\n    yotc + cote * 400,\n    dotc - (yotc * 365\n      + Math.floor(yotc / 4)\n      - Math.floor(yotc / 100)\n  ), zone]}\nfunction getEot(day) {\n  const gamma = 2 * Math.PI * day / 365\n    return (\n      1.49504245e-5 +\n      -4.1898733e-2 * Math.cos(gamma) +\n      -2.9237036e-2 * Math.sin(gamma) +\n      -4.5694380e-2 * Math.cos(2 * gamma) +\n      5.17560175e-2 * Math.sin(2 * gamma)\n    )\n}\ndz = unix2dote(now)\ndecYear = ydz[0].toString().padStart(4, \"0\")\nzeroDote = unix2dote(now, 0)[0]\nzeroTime = zeroDote % 1\nzeroDate = dote2date(zeroDote)\nzeroYear = zeroDate[0]\nzeroYda = zeroDate[1]\nzeroDoy = Math.floor(zeroYda)\nzeroIsLeap = isLeapYear(zeroYear)\nzeroYdaHsl = textcolor(zeroYda.toFixed(5), d3.color(piecewiseColor(zeroYda / (365 + zeroIsLeap))).formatHex())\nzeroTimeHsl0 = textcolor(zeroTime.toFixed(5).slice(1), d3.color(piecewiseColor(zeroTime)).formatHex())\nzeroTimeHsl1 = textcolor(zeroTime.toFixed(5).slice(1), d3.color(piecewiseColor(zeroTime)).formatHex())\nzeroTimeHsl2 = textcolor((zeroTime * 10).toFixed(4), d3.color(piecewiseColor(zeroTime)).formatHex())\nzeroTimeHsl3 = textcolor((zeroTime * 10).toFixed(4), d3.color(piecewiseColor(zeroTime)).formatHex())\nzeroDotyHsl = textcolor(zeroDoy.toString().padStart(3, \"0\"), d3.color(piecewiseColor(zeroDoy / (365 + zeroIsLeap))).formatHex())\nzeroDoteHsl = textcolor(zeroDote.toFixed(5), d3.color(piecewiseColor(zeroDote % 1)).formatHex())\nzeroYearHsl = textcolor(zeroYear, d3.color(piecewiseColor(zeroYear % 1000 / 1000)).formatHex())\nbrowserDote = unix2dote(now)\nbrowserTime = browserDote[0] % 1 * 10\nbrowserZone = browserDote[1]\nbrowserSign = browserZone &gt; 0 ? \"-\" : \"+\"\nzone0time = (browserTime - browserZone + 10) % 10\nhours = browserTime * 2.4\nminutes = hours % 1 * 60\nseconds = minutes % 1 * 60\nselectedDote = unix2dote(now, long2zone(location[0]))\nselectedExact = selectedDote[0] % 1\nselectedExactN = (1 - selectedExact) % 1\nselectedZone = selectedDote[1]\nydz = dote2date(...selectedDote)\ndecDate = Math.floor(ydz[1])\ndecTime = (selectedExact * 10).toFixed(4)\ndecTimeN = (selectedExactN * 10).toFixed(4)\nbarDD = decTime[0]\nbarDDN = decTimeN[0]\nbarMils = decTime.slice(2, 4)\nbarMilsN = decTimeN.slice(2, 4)\nbarBeats = decTime.slice(4, 6)\nbarBeatsN = decTimeN.slice(4, 6)\nfunction lati2turn(degrees = -180, e = 3) {\n  // turns: e=0, deciturns: e=1, etc.\n  return (degrees %= 360) / (360 / 10**e) % 10**e;\n}\ngraticule = d3.geoGraticule().stepMinor([36,36]).stepMajor([36,36])()\ngraticule.coordinates = graticule.coordinates.map(\n  i =&gt; i.map(j =&gt; j.map((k, index, arr) =&gt; i.length === 3 && index === 0 ? k - 18 : k))\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction long2turn(degrees = -180, e = 3) {\n  // turns: e=0, deciturns: e=1, etc.\n  return (((degrees %= 360) &lt; 0 ? degrees + 360 : degrees) + 18) / (360 / 10**e) % 10**e;\n}\n// https://github.com/topojson/world-atlas\nworld = d3.json(\"https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json\")\ncountries = topojson.feature(world, world.objects.countries)\ntopojson = require(\"topojson-client@3\")\nfunction long2zone(degrees = -180) {\n  return Math.floor(long2turn(degrees, 1));\n}\nfunction year2leap(year = 1970) {\n    return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;\n}\n// https://observablehq.com/@dbridges/visualizing-seasonal-daylight\nsolarSystem = (root, vizwidth, location, date, hour, darkmode) =&gt; {\n  const earthRadius = 0.065 * vizwidth;\n  // const sunRadius = 0.015 * vizwidth;\n  const solarSystemRadius = vizwidth / 2 - (vizwidth &lt; 500 ? 4 : 20);\n  const stretch = 0.06;\n  const solarAngle = getSolarAngle(date);\n  const solarAngleDeg = (solarAngle * 180) / Math.PI;\n  const x = solarSystemRadius * Math.sin(solarAngle);\n  const y = stretch * solarSystemRadius * Math.cos(solarAngle);\n  const spin = 180 + -location[0] + solarAngleDeg + 360 * ((hour + 12) / 24);\n  const earthGeo = { type: \"Sphere\" };\n  const projection = d3\n    .geoOrthographic()\n    .fitWidth(earthRadius * 2, earthGeo)\n    .rotate([spin, 0, 23.5])\n    .translate([0, 0]);\n  const staticProjection = d3\n    .geoOrthographic()\n    .fitWidth(earthRadius * 2, earthGeo)\n    .rotate([solarAngleDeg - 90, 0])\n    .translate([0, 0]);\n  const path = d3.geoPath(projection).pointRadius(1.5);\n  const staticPath = d3.geoPath(staticProjection);\n  const oceanColor = darkmode ? \"#007FFF\" : mapcolors.ocean;\n  const landColor = darkmode ? \"#0808\" : mapcolors.land;\n  const borderColor = darkmode ? \"#eee\" : \"#333\";\n  const solarSystem = root\n    .append(\"g\")\n    .attr(\"transform\", `translate(${vizwidth / 2})`);\n  // solarSystem.append(\"circle\").attr(\"r\", sunRadius).attr(\"fill\", colors.sun);\n  /* Draw orbit */\n    solarSystem\n      .append(\"ellipse\")\n      .attr(\"rx\", solarSystemRadius)\n      .attr(\"ry\", stretch * solarSystemRadius)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke-width\", \"1.25\")\n      .attr(\"stroke\", \"black\");\n    /* Draw month ticks */\n    d3.range(12).map((m) =&gt; {\n      const d = new Date(date.getFullYear(), m, 1);\n      const angle = getSolarAngle(d);\n      solarSystem\n        .append(\"line\")\n        .attr(\"x1\", (solarSystemRadius + 9) * Math.sin(angle))\n        .attr(\"y1\", (solarSystemRadius + 9) * stretch * Math.cos(angle))\n        .attr(\"x2\", (solarSystemRadius - 9) * Math.sin(angle))\n        .attr(\"y2\", (solarSystemRadius - 9) * stretch * Math.cos(angle))\n        .attr(\"stroke-width\", \"1.75\")\n        .attr(\"stroke\", \"black\");\n      const startMonthAngle = getSolarAngle(new Date(date.getFullYear(), m, 1));\n      solarSystem\n        .append(\"text\")\n        .text(date2doty(d))\n        .attr(\"x\", (solarSystemRadius + 18 - width / 50) * Math.sin(startMonthAngle) * 1.1)\n        .attr(\n          \"y\",\n          (solarSystemRadius + 2 - width / 3) * 6.2 * stretch * Math.cos(startMonthAngle) + Math.sign(Math.cos(startMonthAngle)) * 12\n        )\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"dominant-baseline\", \"middle\")\n        .attr(\"font-size\", fontSize * (width &lt; 300 ? .9 : width &lt; 400 ? .95 : width &lt; 500 ? 1 : width &lt; 600 ? 1.05 : width &lt; 700 ? 1.1 : 1.2) + width / 100)\n        .attr(\"font-family\", \"sans-serif\")\n        .attr(\"fill\", \"black\");\n    });\n    const earth = solarSystem\n      .append(\"g\")\n      .attr(\"transform\", `translate(${x}, ${y})`);\n    function drawEarth() {\n      earth.append(\"line\").attr(\"y1\", -1.5 * earthRadius).attr(\"y2\", 1.5 * earthRadius).attr(\"stroke\", \"blue\").attr(\"transform\", `rotate(-23.5)`);\n      earth.append(\"path\").attr(\"d\", path(earthGeo)).attr(\"fill\", darkmode ? \"#007FFF\" : mapcolors.ocean).attr(\"id\", \"globeOcean\");\n      earth.append(\"path\").attr(\"d\", path(land)).attr(\"fill\", darkmode ? \"#0808\" : mapcolors.land).attr(\"id\", \"globeLand\");\n      earth.append(\"path\").attr(\"d\", path(countries)).attr(\"stroke-width\", \".08\").attr(\"fill\", \"none\").attr(\"stroke\", darkmode ? \"#eee\" : \"#333\").attr(\"id\", \"globeBorders\");\n      path.pointRadius(5.5);\n      earth.append(\"path\").attr(\"d\", path({ type: \"Point\", coordinates: location })).attr(\"fill\", \"none\").attr(\"stroke-width\", .6).attr(\"stroke\", \"black\");\n      path.pointRadius(4.5);\n      earth.append(\"path\").attr(\"d\", path({ type: \"Point\", coordinates: location })).attr(\"fill\", \"none\").attr(\"stroke-width\", 2.25).attr(\"stroke\", \"red\");\n  }\n  drawEarth();\n}\nfunction greg2doty(month = 1, day = 1) {\n    return Math.floor(\n        (153 * (month &gt; 2 ? month - 3 : month + 9) + 2) / 5 + day - 1\n)}\nfunction date2doty(date) {\n  return greg2doty(date.getMonth() + 1, date.getDate())\n}\nfunction date2doty1(date) {\n  return greg2doty(date.getMonth() + 1, date.getDate())\n}\n// https://observablehq.com/@dbridges/visualizing-seasonal-daylight\n// globe = (root, { vizwidth, location, date, hour }) =&gt; {\n//   const solarAngle = getSolarAngle(date);\n//   const solarAngleDeg = toDegrees(solarAngle);\n//   const hourSpin = 360 * ((hour + 12) / 24);\n//   const spin = (180 + -location[0] + solarAngleDeg + hourSpin);\n//   const tilt = -15;\n//   const projection = d3.geoOrthographic()\n//                        .fitWidth(vizwidth, graticule)\n//                        .rotate([spin, tilt, 23.5]);\n//   const path = d3.geoPath(projection);\n//   const unClippedProjection = d3.geoOrthographic()\n//                                 .clipAngle(null)\n//                                 .fitWidth(vizwidth, graticule)\n//                                 .rotate([spin, tilt, 23.5]);\n//   const unClippedPath = d3.geoPath(unClippedProjection);\n//   const staticProjection = d3.geoOrthographic()\n//                              .fitWidth(vizwidth, graticule)\n//                              .rotate([solarAngleDeg - 90, tilt]);\n//   const staticPath = d3.geoPath(staticProjection);\n//   const background = root.append(\"g\");\n//   const earth = root.append(\"g\").style(\"opacity\", 0.75);\n//   const foreground = root.append(\"g\");\n//   earth.append(\"path\")\n//     .attr(\"d\", path({type: \"Sphere\"}))\n//     .attr(\"fill\", mapcolors.ocean)\n//     .attr(\"stroke\", \"#9ecbda\");\n//   earth.append(\"path\")\n//     .attr(\"d\", path(land))\n//     .attr(\"fill\", mapcolors.land);\n//   earth.append(\"path\")\n//     .attr(\"d\", path(countries))\n//     .attr(\"stroke-width\", \"1\")\n//     .attr(\"fill\", \"none\")\n//     .attr(\"stroke\", \"#000\");\n//   background.append(\"path\")\n//     .attr(\"d\", unClippedPath({type: \"Point\", coordinates: location}))\n//     .attr(\"fill\", \"red\");\n//   const latitudeCoords = (latitude, start, end) =&gt; {\n//     const longitudes = d3.range(start, end, 2).concat(end);\n//     return longitudes.map(d =&gt; [d, latitude]);\n//   }\n//   const correctSpin = d3.geoRotation([-hourSpin, 0]);\n//   const correctTilt = d3.geoRotation([6, 0, 0]);\n//   /* total angular extent of day/night */\n//   const dayExtent = 360 * dayLength(date, location[1]) / 24;\n//   const nightExtent = 360 - dayExtent;\n//   const dayLine = {\n//     type: \"LineString\",\n//     coordinates: latitudeCoords(location[1],\n//                                 location[0] - dayExtent / 2,\n//                                 location[0] + dayExtent / 2).map(d =&gt; correctSpin(d))\n//   };\n//   const nightLine = {\n//     type: \"LineString\",\n//     coordinates: latitudeCoords(location[1],\n//                                 location[0] - dayExtent / 2 - nightExtent,\n//                                 location[0] - dayExtent / 2).map(d =&gt; correctSpin(d))\n//   };\n//   background.append(\"path\")\n//     .attr(\"d\", unClippedPath(dayLine))\n//     .attr(\"fill\", \"none\")\n//     .attr(\"stroke\", mapcolors.day)\n//     .attr(\"stroke-width\", 3);\n//   background.append(\"path\")\n//     .attr(\"d\", unClippedPath(nightLine))\n//     .attr(\"fill\", \"none\")\n//     .attr(\"stroke\", mapcolors.night)\n//     .attr(\"stroke-width\", 3);\n//   foreground.append(\"path\")\n//     .attr(\"d\", path(dayLine))\n//     .attr(\"fill\", \"none\")\n//     .attr(\"stroke\", mapcolors.day)\n//     .attr(\"stroke-width\", 3);\n//   foreground.append(\"path\")\n//     .attr(\"d\", path(nightLine))\n//     .attr(\"fill\", \"none\")\n//     .attr(\"stroke\", mapcolors.night)\n//     .attr(\"stroke-width\", 3);\n//   foreground.append(\"path\")\n//     .attr(\"d\", path({type: \"Point\", coordinates: location}))\n//     .attr(\"stroke-width\", .5)\n//     .attr(\"stroke\", \"black\")\n//     .attr(\"fill\", \"red\");\n//   const shadowPolygon = [[0, -90], [0, 0], [0, 90], [180, 0], [0, -90]].map(d =&gt; correctTilt(d));\n//   foreground.append(\"path\")\n//     .attr(\"d\", staticPath({type: \"Polygon\", coordinates: [shadowPolygon]}))\n//     .attr(\"fill\", \"rgba(0, 0, 0, 0.25)\");\n// }\ndayOfYear = (date) =&gt; {\n  const yearStart = new Date(date.getFullYear(), 0, 1+60);\n  return Math.floor((date.getTime() - yearStart.getTime())/86400000) + 1\n}\n// https://observablehq.com/@dbridges/visualizing-seasonal-daylight\ndaylightPlot = (\n  root,\n  { vizwidth, height, year, latitude, defaultDate, defaultHour }\n) =&gt; {\n  const margin = { top: 32, bottom: 32, left: 32, right: 0 };\n  const chartWidth = vizwidth - margin.left - margin.right;\n  const chartHeight = height - margin.top - margin.bottom;\n  const yTickValues =\n    width &gt; 380 ? [3, 6, 9, 12, 15, 18, 21] : width &gt; 90 ? [6, 12, 18] : [12];\n  const yScale = d3\n    .scaleLinear()\n    .domain([0, 24])\n    .range([margin.left, margin.left + chartWidth])\n    .clamp(true);\n  // y-axis scale\n  const xScale = d3\n    .scaleTime()\n    .domain([new Date(year, 0, 61), new Date(year, 11, 91)])\n    .range([margin.top, margin.top + chartHeight])\n    .clamp(true);\n  // y-axis labels\n  const xAxis = d3\n    .axisBottom(xScale)\n    .tickValues(d3.timeMonth.range(new Date(year, 0, 60), new Date(year, 12, 57)))\n    .tickSize(chartWidth)\n    .tickFormat(date2doty1);\n  const yAxis = d3\n    .axisLeft(yScale)\n    .tickValues(yTickValues)\n    .tickSize(chartHeight)\n    .tickFormat((d) =&gt; { return `${d / .024}` });\n  let date = defaultDate || new Date();\n  let hour = defaultHour != null ? defaultHour : date.getHours();\n  const handleMouseMove = (e) =&gt; {};\n  root\n    .append(\"rect\")\n    .attr(\"y\", margin.left)\n    .attr(\"x\", margin.top)\n    .attr(\"height\", chartWidth)\n    .attr(\"width\", chartHeight)\n    .attr(\"ry\", 0.05 * vizwidth)\n    .attr(\"fill\", mapcolors.night);\n  root\n    .append(\"g\")\n    .attr(\"transform\", `translate(0, ${margin.top})`)\n    .call(xAxis)\n    .call((g) =&gt; g.select(\".domain\").remove())\n    .call((g) =&gt; g.selectAll(\".tick\").attr(\"color\", mapcolors.grid))\n    .call((g) =&gt; g.selectAll(\".tick text\").attr(\"font-size\", (width &lt; 300 ? .7 : width &lt; 325 ? .725 : width &lt; 350 ? .75 : width &lt; 375 ? .8 : width &lt; 400 ? .9 : width &lt; 450 ? .95 : width &lt; 500 ? 1 : width &lt; 600 ? 1.2 : width &lt; 700 ? 1.3 : 1.4) * fontSize))\n    .call((g) =&gt; g.selectAll(\".tick text\").attr(\"color\", \"black\"))\n    .call((g) =&gt; g.selectAll(\".tick line\").attr(\"stroke-dasharray\", \"5 3\"));\n  root\n    .append(\"g\")\n    .attr(\"transform\", `translate(${margin.left + chartHeight}, 0)`)\n    .call(yAxis)\n    .call((g) =&gt; g.select(\".domain\").remove())\n    .call((g) =&gt; g.selectAll(\".tick\").attr(\"color\", mapcolors.grid))\n    .call((g) =&gt; g.selectAll(\".tick text\").attr(\"font-size\", (width &lt; 400 ? .9 : width &lt; 500 ? 1 : width &lt; 600 ? 1.1 : width &lt; 700 ? 1.2 : 1.3) * fontSize))\n    .call((g) =&gt; g.selectAll(\".tick text\").attr(\"color\", \"black\"))\n    .call((g) =&gt; g.selectAll(\".tick line\").attr(\"stroke-dasharray\", \"5 3\"));\n  root\n    .append(\"text\")\n    .text(\"Time of day\")\n    .attr(\"x\", margin.bottom + (width &lt; 275 ? -102 : width &lt; 300 ? -106 : width &lt; 325 ? -108 : width &lt; 350 ? -115 : width &lt; 375 ? -120 : width &lt; 400 ? -128 : width &lt; 425 ? -130 : width &lt; 450 ? -132 : width &lt; 475 ? -136 : width &lt; 500 ? -141 : width &lt; 525 ? -142 : width &lt; 550 ? -148 : width &lt; 575 ? -149 : width &lt; 600 ? -154 : width &lt; 650 ? -157 : width &lt; 675 ? -157 : width &lt; 700 ? -161 : width &lt; 725 ? -160 : width &lt; 750 ? -165 : width &lt; 775 ? -169 : -173))\n    .attr(\"y\", margin.top - (width &lt; 400 ? 33 : width &lt; 500 ? 35 : width &lt; 600 ? 37 : width &lt; 700 ? 40 : 42))\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"font-size\", fontSize * (width &lt; 300 ? .8 : width &lt; 400 ? .9 : width &lt; 500 ? 1 : width &lt; 600 ? 1.1 : width &lt; 700 ? 1.2 : 1.25) + width / 100)\n    .attr(\"font-family\", \"sans-serif\")\n    .attr(\"transform\", \"rotate(-90)\")\n    .attr(\"fill\", \"black\");\n  root\n    .append(\"text\")\n    .text(\"Day of year\")\n    .attr(\"x\", margin.left + width / 2 - (width &lt; 500 ? 30 : width &lt; 600 ? 28 : width &lt; 700 ? 24 : 22))\n    .attr(\"y\", margin.top + chartHeight / 4 + margin.bottom + (width &lt; 275 ? 10 : width &lt; 300 ? 18 : width &lt; 325 ? 19 : width &lt; 350 ? 22 : width &lt; 375 ? 30 : width &lt; 400 ? 37 : width &lt; 450 ? 39 : width &lt; 475 ? 40 : width &lt; 500 ? 44 : width &lt; 550 ? 50 : width &lt; 600 ? 51 : width &lt; 650 ? 50 : width &lt; 700 ? 44 : width &lt; 750 ? 40 : 43))\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"font-size\", fontSize * (width &lt; 300 ? .95 : width &lt; 400 ? 1 : width &lt; 500 ? 1.05 : width &lt; 600 ? 1.15 : width &lt; 700 ? 1.2 : 1.25) + width / 100)\n    .attr(\"font-family\", \"sans-serif\")\n    .attr(\"fill\", \"black\");\n  const data = yearDates(year)\n    .map((d) =&gt; [d, dayLength(d, latitude)])\n    .filter(([_, d]) =&gt; d &gt; 0);\n  /* Render separate polygons for each continuous sequence of\n   * days with more than 0 hours of day light\n   */\n  const polys = [];\n  let currentPoly = [];\n  for (let i = 0; i &lt; data.length; i++) {\n    const currentDate = data[i][0];\n    const prevDate = (data[i - 1] || [])[0];\n    if (\n      i === 0 ||\n      currentDate.getTime() - prevDate.getTime() &lt; 3600 * 24 * 1000 * 1.5\n    ) {\n      currentPoly.push(data[i]);\n    } else {\n      polys.push(currentPoly);\n      currentPoly = [data[i]];\n    }\n  }\n  polys.push(currentPoly);\n  polys.forEach((p) =&gt; {\n    const points = [\n      ...p.map(([d, l]) =&gt; `${xScale(d)},${yScale(12 - l / 2)}`),\n      ...p.reverse().map(([d, l]) =&gt; `${xScale(d)},${yScale(12 + l / 2)}`)\n    ].join(\" \");\n    root.append(\"polygon\").attr(\"points\", points).attr(\"fill\", mapcolors.day);\n  });\n  /* Legend */\n  const legend = root\n    .append(\"g\")\n    .attr(\"transform\", `translate(${margin.left + chartWidth / 2 - 64})`);\n  legend\n    .append(\"rect\")\n    .attr(\"x\", width &lt; 300 ? 63 : width &lt; 500 ? 62 : width &lt; 600 ? 61 : 60)\n    .attr(\"y\", width &lt; 450 ? 8 : 1)\n    .attr(\"rx\", 5)\n    .attr(\"width\", fontSize * (width &lt; 300 ? .95 : width &lt; 400 ? 1 : width &lt; 500 ? 1.05 : width &lt; 600 ? 1.15 : width &lt; 700 ? 1.2 : 1.25) + width / 100)\n    .attr(\"height\", fontSize * (width &lt; 300 ? .95 : width &lt; 400 ? 1 : width &lt; 500 ? 1.05 : width &lt; 600 ? 1.15 : width &lt; 700 ? 1.2 : 1.25) + width / 100)\n    .attr(\"fill\", mapcolors.day);\n  legend\n    .append(\"text\")\n    .attr(\"x\", width &lt; 400 ? 82 : width &lt; 500 ? 85 : width &lt; 600 ? 87 : 90)\n    .attr(\"y\", width &lt; 300 ? 22 : width &lt; 400 ? 23 : width &lt; 450 ? 24 : width &lt; 500 ? 18 : width &lt; 600 ? 20 : width &lt; 700 ? 21 : 23)\n    .attr(\"font-size\", fontSize * (width &lt; 300 ? .95 : width &lt; 400 ? 1 : width &lt; 500 ? 1.05 : width &lt; 600 ? 1.15 : width &lt; 700 ? 1.2 : 1.25) + width / 100)\n    .attr(\"font-family\", \"sans-serif\")\n    .text(\"Day\");\n  legend\n    .append(\"rect\")\n    .attr(\"x\", width &lt; 400 ? -10 : width &lt; 500 ? -20 : width &lt; 600 ? -40 : -39)\n    .attr(\"y\", width &lt; 450 ? 8 : 1)\n    .attr(\"rx\", 5)\n    .attr(\"width\", fontSize * (width &lt; 300 ? .95 : width &lt; 400 ? 1 : width &lt; 500 ? 1.05 : width &lt; 600 ? 1.15 : width &lt; 700 ? 1.2 : 1.25) + width / 100)\n    .attr(\"height\", fontSize * (width &lt; 300 ? .95 : width &lt; 400 ? 1 : width &lt; 500 ? 1.05 : width &lt; 600 ? 1.15 : width &lt; 700 ? 1.2 : 1.25) + width / 100)\n    .attr(\"fill\", mapcolors.night);\n  legend\n    .append(\"text\")\n    .attr(\"x\", width &lt; 400 ? 11 : width &lt; 500 ? 4 : width &lt; 600 ? -12 : -9)\n    .attr(\"y\", width &lt; 300 ? 22 : width &lt; 400 ? 23 : width &lt; 450 ? 24 : width &lt; 500 ? 18 : width &lt; 600 ? 19 : width &lt; 700 ? 21 : 23)\n    .attr(\"font-size\", fontSize * (width &lt; 300 ? .95 : width &lt; 400 ? 1 : width &lt; 500 ? 1.05 : width &lt; 600 ? 1.15 : width &lt; 700 ? 1.2 : 1.25) + width / 100)\n    .attr(\"font-family\", \"sans-serif\")\n    .text(\"Night\");\n  /* Time and date controls */\n  const dateLine = root.append(\"g\");\n  const updateControlPositions = () =&gt; {\n    dateLine\n      .select(\"line\")\n      .attr(\"y1\", yScale(0))\n      .attr(\"x1\", xScale(date))\n      .attr(\"y2\", yScale(24))\n      .attr(\"x2\", xScale(date));\n    dateLine\n      .select(\"rect\")\n      .attr(\"y\", yScale(0))\n      .attr(\"x\", xScale(date) - 4);\n    root\n      .select(\"#time-control\")\n      .attr(\"cy\", yScale(hour))\n      .attr(\"cx\", xScale(date));\n  };\n  const dispatchDateHourChange = () =&gt; {\n    const detail = { date, hour };\n    const changeEvent = new CustomEvent(EventType.DateHourChange, {\n      detail,\n      bubbles: true\n    });\n    root.node().dispatchEvent(changeEvent);\n  };\n  const handleDateLineDrag = ({ x }) =&gt; {\n    date = xScale.invert(x);\n    updateControlPositions();\n    dispatchDateHourChange();\n  };\n  const handleTimeCircleDrag = ({ y }) =&gt; {\n    hour = yScale.invert(y);\n    updateControlPositions();\n    dispatchDateHourChange();\n  };\n  dateLine.append(\"line\").attr(\"stroke-width\", 4).attr(\"stroke\", \"red\");\n  dateLine\n    .append(\"rect\")\n    .attr(\"height\", chartWidth)\n    .attr(\"width\", 8)\n    .attr(\"fill\", \"rgba(0, 0, 0, 0)\")\n    .style(\"cursor\", \"row-resize\")\n    .call(d3.drag().on(\"drag\", handleDateLineDrag));\n  root\n    .append(\"circle\")\n    .attr(\"id\", \"time-control\")\n    .attr(\"r\", 12)\n    .attr(\"fill\", \"red\")\n    .attr(\"stroke-width\", .6)\n    .attr(\"stroke\", \"black\")\n    .style(\"cursor\", \"pointer\")\n    .call(d3.drag().on(\"drag\", handleTimeCircleDrag));\n  updateControlPositions();\n}\nfontSize = 14;\ngetSolarAngle = (date) =&gt; (dayOfYear(date) + 10) / 365 * Math.PI * 2 - Math.PI / 2;\n/*\n * Formulas uses the CBM model as reviewed here:\n * https://www.ikhebeenvraag.be/mediastorage/FSDocument/171/Forsythe+-+A+model+comparison+for+daylength+as+a+function+of+latitude+and+day+of+year+-+1995.pdf\n */\ndayLength = (date, latitude) =&gt; {\n  const yearStart = new Date(date.getFullYear(), 0, 1);\n  const dayOfYear = Math.floor((date.getTime() - yearStart.getTime())/86400000) + 1;\n  const revAngle = 0.2163108 + 2 * Math.atan(0.9671396 * Math.tan(0.00860 * (dayOfYear - 186)));\n  const decAngle = Math.asin(0.39795 * Math.cos(revAngle));\n  /* daylight coefficient selected for apparent sunrise/sunset */\n  const p = 0.8333\n  const intResult =\n    (Math.sin((p * Math.PI) / 180) +\n      Math.sin((latitude * Math.PI) / 180) * Math.sin(decAngle)) /\n    (Math.cos((latitude * Math.PI) / 180) * Math.cos(decAngle));\n  if (intResult &gt;= 1) return 24;\n  if (intResult &lt;= -1) return 0;\n  return 24 - 24 * Math.acos(intResult) / Math.PI;\n}\nyearDates = (year) =&gt; {\n  const startDate = new Date(year, 0, 1+60);\n  const endDate = new Date(year + 1, 0, 1+60);\n  return d3.timeDay.range(startDate, endDate);\n}\nheight = 0.65 * width;\nEventType = ({\n  LocationChange: \"LOCATION_CHANGE\",\n  DateHourChange: \"DATE_HOUR_CHANGE\"\n})\nmapcolors = ({\n  night: \"#719fb6\",\n  day: \"#ffe438\",\n  grid: \"#4b6a79\",\n  ocean: \"#adeeff\",\n  land: \"#90ff7888\",\n  sun: \"#ffb438\"\n})\ntoRadians = (val) =&gt; val * Math.PI / 180\ntoDegrees = (val) =&gt; val * 180 / Math.PI;\nland = topojson.feature(world, world.objects.land);\nd3 = require(\"d3@7\", \"d3-geo-projection@3\")\nfunction input(config) {\n  let {\n    form,\n    type = \"text\",\n    attributes = {},\n    action,\n    getValue,\n    title,\n    description,\n    format,\n    display,\n    submit,\n    options\n  } = config;\n  const wrapper = html`&lt;div&gt;&lt;/div&gt;`;\n  if (!form)\n    form = html`&lt;form&gt;\n  &lt;input name=input type=${type} /&gt;\n  &lt;/form&gt;`;\n  Object.keys(attributes).forEach(key =&gt; {\n    const val = attributes[key];\n    if (val != null) form.input.setAttribute(key, val);\n  });\n  if (submit)\n    form.append(\n      html`&lt;input name=submit type=submit style=\"margin: 0 0.75em\" value=\"${\n        typeof submit == \"string\" ? submit : \"Submit\"\n      }\" /&gt;`\n    );\n  form.append(\n    html`&lt;output name=output style=\"font: 14px Menlo, Consolas, monospace; margin-left: 0.1em; text-align:center;\"&gt;&lt;/output&gt;`\n  );\n  if (title)\n    form.prepend(\n      html`&lt;div style=\"font: 700 0.9rem sans-serif; margin-bottom: 3px;\"&gt;${title}&lt;/div&gt;`\n    );\n  if (description)\n    form.append(\n      html`&lt;div style=\"font-size: 0.85rem; font-style: italic; margin-top: 3px;\"&gt;${description}&lt;/div&gt;`\n    );\n  if (format)\n    format = typeof format === \"function\" ? format : d3format.format(format);\n  if (action) {\n    action(form);\n  } else {\n    const verb = submit\n      ? \"onsubmit\"\n      : type == \"button\"\n      ? \"onclick\"\n      : type == \"checkbox\" || type == \"radio\"\n      ? \"onchange\"\n      : \"oninput\";\n    form[verb] = e =&gt; {\n      e && e.preventDefault();\n      const value = getValue ? getValue(form.input) : form.input.value;\n      if (form.output) {\n        const out = display ? display(value) : format ? format(value) : value;\n        if (out instanceof window.Element) {\n          while (form.output.hasChildNodes()) {\n            form.output.removeChild(form.output.lastChild);\n          }\n          form.output.append(out);\n        } else {\n          form.output.value = out;\n        }\n      }\n      form.value = value;\n      if (verb !== \"oninput\")\n        form.dispatchEvent(new CustomEvent(\"input\", { bubbles: true }));\n    };\n    if (verb !== \"oninput\")\n      wrapper.oninput = e =&gt; e && e.stopPropagation() && e.preventDefault();\n    if (verb !== \"onsubmit\") form.onsubmit = e =&gt; e && e.preventDefault();\n    form[verb]();\n  }\n  while (form.childNodes.length) {\n    wrapper.appendChild(form.childNodes[0]);\n  }\n  form.append(wrapper);\n  return form;\n}\nd3format = require(\"d3-format@1\")\n// https://observablehq.com/@enjalot/draggable-world-map-coordinates-input\nfunction worldMapCoordinates(config = {}, dimensions) {\n  const {\n    value = [], title, description, width = dimensions[0]\n  } = Array.isArray(config) ? {value: config} : config;\n  const height = dimensions[1];\n  let [lon, lat] = value;\n  lon = lon != null ? lon : null;\n  lat = lat != null ? lat : null;\n  const formEl = html`&lt;form id=\"formEl\" style=\"width: ${width}px;\"&gt;&lt;/form&gt;`;\n  const context = DOM.context2d(width, height-width/14);\n  const canvas = context.canvas;\n  canvas.style.margin = `0px 0px -26px 0px`;\n  const projection = d3\n    .geoEquirectangular()\n    .precision(0.1)\n    .fitSize([width, height], { type: \"Sphere\" }).rotate([-153, 0]);\n  const path = d3.geoPath(projection, context).pointRadius(2.5);\n  formEl.append(canvas);\n  function draw() {\n    context.fillStyle = window.darkmode ? \"black\" : \"white\";\n    context.fillRect(0, 0, width, height);\n    context.beginPath(); path({type: \"Sphere\"});\n    context.fillStyle = window.darkmode ? \"#007FFF\" : mapcolors.ocean;\n    context.fill();\n    context.beginPath();\n    path(graticule);\n    context.lineWidth = 0.95;\n    context.strokeStyle = `#aaa`;\n    context.stroke();\n    context.beginPath();\n    path(land);\n    context.fillStyle = window.darkmode ? \"#0808\" : mapcolors.land;\n    context.fill();\n    context.beginPath();\n    path(countries);\n    context.lineWidth = .95;\n    context.strokeStyle = window.darkmode ? \"#aaa\" : \"#333\";\n    context.stroke();\n    context.fillStyle = window.darkmode ? \"#fff\" : \"#000\";\n    context.font = width &lt; 760 ? \"14px serif\" : width &lt; 990 ? \"17px serif\" : \"23px serif\";\n    d3.range(-1.5, 342 + 1, 36).map(x =&gt;  context.fillText(long2zone(x), ...projection([x, 82 - (width &lt; 500) * 8.8])));\n    d3.range(-1.5, 342 + 1, 36).map(x =&gt;  context.fillText(long2zone(x), ...projection([x, -66 + (width &lt; 500) * 1.1])));\n    context.beginPath(), path(night), context.fillStyle = \"rgba(0,0,255,0.1)\", context.fill();\n    context.beginPath(); path.pointRadius(17); path({type: \"Point\", coordinates: sun}); context.strokeStyle = \"#0008\"; context.fillStyle = \"#ff08\"; context.lineWidth = 1; context.stroke(); context.fill();\n    if (lon != null && lat != null) {\n      path.pointRadius(17); context.strokeStyle = \"black\";\n      context.beginPath(); path({type: \"Point\", coordinates: [lon, lat]}); context.lineWidth = 1; context.stroke();\n      context.lineWidth = 6;\n      path.pointRadius(14); context.strokeStyle = \"red\";\n      context.beginPath(); path({type: \"Point\", coordinates: [lon, lat]}); context.stroke();\n    }\n  }\n  let drag = d3.drag()\n    .on(\"drag\", (event) =&gt; {\n      let coords = projection.invert([event.x, event.y]);\n      lon = +coords[0].toFixed(2);\n      lat = +coords[1].toFixed(2);\n      draw();\n      canvas.dispatchEvent(new CustomEvent(\"input\", { bubbles: true }));\n    })\n  d3.select(canvas).call(drag)\n  canvas.onclick = function(ev) {\n    const { offsetX, offsetY } = ev;\n    let coords = projection.invert([offsetX, offsetY]);\n    lon = +coords[0].toFixed(2);\n    lat = +coords[1].toFixed(2);\n    draw();\n    canvas.dispatchEvent(new CustomEvent(\"input\", { bubbles: true }));\n  };\n  draw();\n  const form = input({\n    type: \"worldMapCoordinates\",\n    title,\n    description,\n    display: v =&gt; (width &gt; 300) ? html`&lt;div style=\"width: ${width}px; white-space: nowrap; color: window.darkmode ? #fff : #000; text-align: center; font: ${width / 40}px monospace; position: relative; top: ${-16 - width / 50}px;  margin-bottom: -.4em;\"&gt;\n            &lt;span style=\"color: window.darkmode ? #fff : #000;\"&gt;Zone:&lt;/span&gt; ${lon != null ? long2zone(lon) : \"\"}\n            &nbsp; &nbsp;\n            &lt;span style=\"color: window.darkmode ? #fff : #000;\"&gt;Longitude:&lt;/span&gt; ${lon != null ? (long2turn(lon)).toFixed(0) : \"\"}\n            &nbsp; &nbsp;\n            &lt;span style=\"color: window.darkmode ? #fff : #000;\"&gt;Latitude:&lt;/span&gt; ${lat != null ? (lati2turn(lat)).toFixed(0) : \"\"}\n          &lt;/div&gt;` : '',\n    getValue: () =&gt; [lon != null ? lon : null, lat != null ? lat : null],\n    form: formEl\n  });\n  return form;\n}\nwindow.darkmode = document.getElementsByTagName(\"body\")[0].className.match(/quarto-dark/) ? true : false;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndocument.getElementsByClassName(\"quarto-color-scheme-toggle\")[0].onclick = function (e) {\n  window.quartoToggleColorScheme();\n  window.darkmode = document.getElementsByTagName(\"body\")[0].className.match(/quarto-dark/) ? true : false;\n  worldMapCoordinates.draw();\n  app.drawEarth();\n  return false;\n};\n\n\n\n\n\n\n\nsun = {\n  const now = new Date;\n  const day = new Date(+now).setUTCHours(0, 0, 0, 0);\n  const t = solar.century(now);\n  const longitude = (day - now) / 864e5 * 360 - 180;\n  return [longitude - solar.equationOfTime(t) / 4, solar.declination(t)];\n}\nnight = d3.geoCircle()\n    .radius(90)\n    .center(antipode(sun))\n  ()\nantipode = ([longitude, latitude]) =&gt; [longitude + 180, -latitude]\nsolar = require(\"solar-calculator@0.3/dist/solar-calculator.min.js\")\nviewof fancySecondsOFF = Inputs.toggle({\n  label: \"Ticking clock\",\n  value: true,\n})\nfunction setStyle(content, style = {}) {\n  function yiq(color) {\n    const {r, g, b} = d3.rgb(color);\n    return (r * 299 + g * 587 + b * 114) / 1000 / 255; // returns values between 0 and 1\n  }\n  const {\n    background,\n    color = yiq(background) &gt;= 0.6 ? \"#111\" : \"white\",\n    padding = \"0 1px\",\n    borderRadius = \"4px\",\n    fontWeight = 900,\n    fontSize = \"1em\",\n    ...rest\n  } = typeof style === \"string\" ? {background: style} : style;\n  return htl.html`&lt;span style=${{\n    background,\n    color,\n    padding,\n    borderRadius,\n    fontWeight,\n    ...rest\n  }}&gt;${content}&lt;/span&gt;`;\n}\nfunction yiq(color) {\n  const {r, g, b} = d3.rgb(color);\n  return (r * 299 + g * 587 + b * 114) / 1000 / 255; // returns values between 0 and 1\n}\nfunction textcolor(content, style = {}) {\n  const {\n    background,\n    color = yiq(background) &gt; 0.51 ? \"#000\" : \"white\",\n    padding = \"0 5px\",\n    borderRadius = \"4px\",\n    fontWeight = 400,\n    fontFamily = \"monospace\",\n    ...rest\n  } = typeof style === \"string\" ? {background: style} : style;\n  return htl.html`&lt;span style=${{\n    background,\n    color,\n    padding,\n    borderRadius,\n    fontWeight,\n    fontFamily,\n    ...rest\n  }}&gt;${content}&lt;/span&gt;`;\n}\nfunction isLeapYear(y) {\n  y += 1;\n  return y % 4 == 0 && y % 100 != 0 || y % 400 == 0;\n}\nelapsed = {\n  let i = 0;\n  while (true) {\n    yield Promises.tick(864, ++i);\n  }\n}\npiecewiseColor = d3.piecewise(d3.interpolateRgb, [\n  \"#f00\",    //  0   0 red\n  \"#f50\",    //  0.25  20 yr\n  \"#f60\",    //  0.5   24 yr orangered\n  \"#f70\",    //  0.75  28 yr\n  \"#f90\",    //  1     36 yr orange\n  \"#fb0\",    //  1.25  44 yr\n  \"#fc0\",    //  1.5   48 yr yelloworange\n  \"#fd0\",    //  1.75  52 yr\n  \"#ff0\",    //  2     60 yellow\n  \"#ef0\",    //  2.25  64 gy\n  \"#df0\",    //  2.5   68 gy limeyellow\n  \"#cf0\",    //  2.75  72 gy\n  \"#af0\",    //  3     80 gy lime\n  \"#8f0\",    //  3.25  88 gy\n  \"#7f0\",    //  3.5   92 gy greenlime\n  \"#6f0\",    //  3.75  96 gy\n  \"#0f0\",    //  4    120 green\n  \"#0f7\",    //  4.25 148 cg\n  \"#0f9\",    //  4.5  156 cg cyangreen\n  \"#0fb\",    //  4.75 164 cg\n  \"#0ff\",    //  5    180 cyan\n  \"#0cf\",    //  5.25 192 bc\n  \"#0bf\",    //  5.5  196 bc azurecyan\n  \"#0af\",    //  5.75 200 bc\n  \"#08f\",    //  6    208 bc azure\n  \"#06f\",    //  6.25 216 bc\n  \"#05f\",    //  6.5  220 bc blueazure\n  \"#04f\",    //  6.75 224 bc\n  \"#00f\",    //  7    240 blue\n  \"#50f\",    //  7.25 260 mb\n  \"#60f\",    //  7.5  264 mb purpleblue\n  \"#70f\",    //  7.75 268 mb\n  \"#90f\",    //  8    276 mb purple\n  \"#b0f\",    //  8.25 284 mb\n  \"#c0f\",    //  8.5  288 mb violetpurple\n  \"#d0f\",    //  8.75 292 mb\n  \"#f0f\",    //  9    300 magenta\n  \"#f0a\",    //  9.25 320 rm\n  \"#f08\",    //  9.5  328 rm\n  \"#f06\",    //  9.75 336 rm\n  \"#f00\",    //  0        0 red\n])\nslStr = `, 100%, 50%)`\nelaTime = elapsed % 1e5\nelaTimeHsl = textcolor(elaTime, `hsl(${d3.hsl(piecewiseColor(elaTime % 1000 / 1000)).h}` + slStr)\ndecMoty = Math.floor((5 * decDate + 2) / 153)\nisoYear = decYear + (decMoty &gt; 9)\nmonth = decMoty &lt; 10 ? decMoty + 3 : decMoty - 9\ndecHour = decTime * 24\ndecMinute = (decHour % 1) * 60\ndecSecond = (decMinute % 1) * 60\nisoHour = Math.floor(decHour)\nisoMinute = Math.floor(decMinute)\nisoSecond = Math.floor(decSecond)\ndecDek = Math.floor(decDate / 10)\ndecDod = decDate % 10\ndecDotm = Math.floor(decDate - (153 * decMoty + 2) / 5 + 1)\nselDote = unix2dote(selectedDate.getTime() - 86400000, 0)\nselDate = Math.floor(dote2date(...selDote)[1])\nselTime = selectedHour / 24\nselTimeOne = selTime % 1\nselTimeTen = selTime * 10 % 10\nselSnap = selDate + selTime\nselLati = lati2turn(location[1])\ndecDodHsl = textcolor(decDod, d3.color(piecewiseColor(decDod / 10)).formatHex())\ndecDateHsl = textcolor(decDate.toString().padStart(3, \"0\"), d3.color(piecewiseColor(decDate / (365 + isLeapYear(decYear)))).formatHex())\ndecTimeHsl = textcolor(decTime, d3.color(piecewiseColor(decTime / 10)).formatHex())\nselDateHsl = textcolor(selDate.toString().padStart(3, \"0\"), d3.color(piecewiseColor(selDate / 365)).formatHex())\nselLatiHsl = textcolor(selLati.toFixed(0), d3.color(piecewiseColor((selLati + 250) % 250 / 250)).formatHex())\nselTimeDay = textcolor(selTimeOne.toFixed(3).slice(2), d3.color(piecewiseColor(selTime)).formatHex())\nselTimeHsl0 = textcolor(selTimeTen.toFixed(4), d3.color(piecewiseColor(selTime)).formatHex())\nselTimeHsl1 = textcolor(selTimeTen.toFixed(4), d3.color(piecewiseColor(selTime)).formatHex())\nselZoneHsl = textcolor(selectedZone, d3.color(piecewiseColor(selectedZone / 10)).formatHex())\nselSnapDay = textcolor(selSnap.toFixed(3).padStart(6, \"0\"), d3.color(piecewiseColor(selSnap / 365)).formatHex())\nselSnapDec = textcolor((selSnap * 10).toFixed(4).padStart(9, \"0\"), d3.color(piecewiseColor(selSnap / 365)).formatHex())\ndecZoneHsl = textcolor(selectedZone, d3.color(piecewiseColor(selectedZone / 10)).formatHex())\nviewof selectedDate = Inputs.input(date2022)\nviewof selectedHour = Inputs.input(date2022.getHours())\ndate2022 = new Date(2022, new Date().getMonth(), new Date().getDate(), new Date().getHours())\nfunction set(input, value) {\n  input.value = value;\n  input.dispatchEvent(new Event(\"input\", {bubbles: true}));\n}\nhD121 = d3.hsl(piecewiseColor(121 / 365)).h\nhD268 = d3.hsl(piecewiseColor(268 / 365)).h\nhD305 = d3.hsl(piecewiseColor(305 / 365)).h\nhD306 = d3.hsl(piecewiseColor(306 / 365)).h\nh1by320 = d3.hsl(piecewiseColor(1 / 320)).h\nh1by8640 = d3.hsl(piecewiseColor(1 / 8640)).h\nhues = Object.fromEntries([\n  .0083,\n  .0166,\n  .0229,\n  .025,\n  .287,\n  .0333,\n  .0416,\n  .05,\n  .125,\n  .333,\n  .375,\n  .429,\n  .533,\n  .969,\n  .999,\n  ].map(i =&gt; [i, d3.hsl(piecewiseColor(i)).h])\n);\n// https://observablehq.com/@mattdzugan/population-by-time-zone-creating-a-dataset\npopulationByTimeZone = FileAttachment(\"../../asset/populationByTimeZone.json\").json();\nsortedPop = populationByTimeZone.sort(\n  (a, b) =&gt; sortParams[1] ? sortFunc(a.number, b.number) : sortFunc(a.pop, b.pop)\n)\nsortFunc = sortParams[0] ? d3.ascending : d3.descending\npopBySign = d3.rollup(sortedPop, v =&gt; d3.sum(v, d =&gt; d.pop / 1e9), d =&gt; d.Sign)\ntotalPop = d3.sum(sortedPop, d =&gt; d.pop / 1e9)\ndzOff = unix2dote(now, offset)\nydzOff = dote2date(...dzOff)\ndecTimeOff = ydzOff[1] % 1\ndecSignOff = offset &lt; 0 ? \"+\" : \"‚Äì\"\ndecOffsetPosi = (offset + 10) % 10\ndecOffsetNega = decOffsetPosi - 10\ndecOffsetHsl0 = textcolor(Math.abs(offset), `hsl(${d3.hsl(piecewiseColor(decOffsetPosi / 10)).h}` + slStr)\ndecOffsetHsl1 = textcolor(Math.abs(offset), `hsl(${d3.hsl(piecewiseColor(decOffsetPosi / 10)).h}` + slStr)\ndecOffsetHsl2 = textcolor(offset, `hsl(${d3.hsl(piecewiseColor(decOffsetPosi / 10)).h}` + slStr)\ndecOffsetHslP = textcolor(decOffsetPosi, `hsl(${d3.hsl(piecewiseColor(decOffsetPosi / 10)).h}` + slStr)\ndecOffsetHslN = textcolor(decOffsetNega, `hsl(${d3.hsl(piecewiseColor(decOffsetPosi / 10)).h}` + slStr)\ndecTimeOffHsl0 = textcolor((decTimeOff * 10).toFixed(4), `hsl(${d3.hsl(piecewiseColor(decTimeOff)).h}` + slStr)\ndecTimeOffHsl1 = textcolor((decTimeOff * 10).toFixed(4), `hsl(${d3.hsl(piecewiseColor(decTimeOff)).h}` + slStr)\ndecTimeOffHsl2 = textcolor((decTimeOff * 10).toFixed(4), `hsl(${d3.hsl(piecewiseColor(decTimeOff)).h}` + slStr)\ndecTimeOffHsl3 = textcolor((decTimeOff * 10).toFixed(4), `hsl(${d3.hsl(piecewiseColor(decTimeOff)).h}` + slStr)\ndecTimeOffLeapNum = offset * 320 + 1\ndecTimeOffLeapTodHsl = textcolor((decTimeOff * 10 + 1 / 320).toFixed(4), `hsl(${d3.hsl(piecewiseColor(decTimeOff)).h}` + slStr)\ndecTimeOffLeapTzoHsl = textcolor(`${decTimeOffLeapNum}/320`, `hsl(${d3.hsl(piecewiseColor((decTimeOffLeapNum / 320 + 10) % 10 / 10)).h}` + slStr)\nutcOffsetM = -(new Date).getTimezoneOffset()\nutcOffsetD = utcOffsetM / 144\nutcOffsetP = (utcOffsetD + 10) % 10\ndecZone = ydz[2]\ndecZonePos = (decZone + 10) % 10\nutcOffDiff = parseFloat((Math.round(utcOffsetD) - utcOffsetD).toFixed(2))\nutcOffHslM = textcolor(utcOffsetM, `hsl(${d3.hsl(piecewiseColor(utcOffsetP / 10)).h}` + slStr)\nutcOffHslD = textcolor(parseFloat(utcOffsetD.toFixed(2)), `hsl(${d3.hsl(piecewiseColor(utcOffsetP / 10)).h}` + slStr)\ndecZonHslP = textcolor(decZonePos, `hsl(${d3.hsl(piecewiseColor(decZonePos / 10)).h}` + slStr)\nutcOffsetMdiffHsl = textcolor(parseFloat((utcOffDiff * 144).toFixed(2)), `hsl(${d3.hsl(piecewiseColor(utcOffDiff / 10)).h}` + slStr)\nutcOffDiffHsl = textcolor(utcOffDiff, `hsl(${d3.hsl(piecewiseColor(utcOffDiff / 10)).h}` + slStr)\nfunction date2dote(year = 1969, doty = 306, zone = 0) {\n    const cote = Math.floor((year &gt;= 0 ? year : year - 399) / 400), yote = year - cote * 400;\n    return [cote * 146097 + yote * 365 + Math.floor(yote / 4) - Math.floor(yote / 100) + doty, zone]\n}\nleapSecondDotes = [\n  [1972, 121],\n  [1972, 305],\n  [1973, 305],\n  [1974, 305],\n  [1975, 305],\n  [1976, 305],\n  [1977, 305],\n  [1978, 305],\n  [1979, 305],\n  [1981, 121],\n  [1982, 121],\n  [1983, 121],\n  [1985, 121],\n  [1987, 305],\n  [1989, 305],\n  [1990, 305],\n  [1992, 121],\n  [1993, 121],\n  [1994, 121],\n  [1995, 305],\n  [1997, 121],\n  [1998, 305],\n  [2005, 305],\n  [2008, 305],\n  [2012, 121],\n  [2015, 121],\n  [2016, 305],\n].map(x =&gt; date2dote(...x)[0])\nleapSecondDote = date2dote(leapSecondYear, leapSecondDate)[0]\nleapCount = leapSecondDotes.filter(dote =&gt; leapSecondDote &gt; dote).length;\nleapColor = d3.color(piecewiseColor(leapCount / 86400)).formatHex()\nleapCountHsl = textcolor(leapCount, leapColor)\nfrac = require(\"fraction.js\")\nleapDecidaysHsl = textcolor(frac(leapCount).div(8640).toFraction(), leapColor)\nlongInputHsl = textcolor(longInput, d3.color(piecewiseColor(longInput / 10)).formatHex())\neot = getEot(leapSecondDate)\nastTzo = eot + longInput\nastTzoHsl = textcolor(astTzo.toFixed(4), d3.color(piecewiseColor(astTzo / 10)).formatHex())\nsolarNoon = (5 - astTzo + 10) % 10\nsolarNoonHsl = textcolor(solarNoon.toFixed(4), d3.color(piecewiseColor(solarNoon / 10)).formatHex())\nsolarDiff = zeroTime - solarNoon\nsolarSign = solarDiff &lt; 0 ? \"-\" : \"+\"\nsolarDiffHsl = textcolor(Math.abs(solarDiff).toFixed(4), d3.color(piecewiseColor((solarDiff + 10) % 10 / 10)).formatHex())\neotHsl = textcolor(eot.toFixed(4), d3.color(piecewiseColor(eot / 10)).formatHex())\neotSum = (zeroTime + astTzo + 10) % 10\neotSumHsl = textcolor(eotSum.toFixed(4), d3.color(piecewiseColor(eotSum / 10)).formatHex())\n// https://observablehq.com/@mcmcclur/adaptive-plotter\nfunction build_samples(f, a, b, opts = {}) {\n  let { N = 9, max_depth = 6 } = opts;\n  let dx = (b - a) / N;\n  let root_intervals = Array.from({ length: N }).map(\n    (_, i) =&gt; new Interval(a + i * dx, a + (i + 1) * dx, 0)\n  );\n  root_intervals.forEach((I) =&gt; {\n    I.fa = f(I.a);\n    I.fb = f(I.b);\n  });\n  root_intervals.reverse();\n  let stack = root_intervals;\n  let cnt = 0;\n  let pts = [];\n  let nodeRight, nodeLeft;\n  while (stack.length &gt; 0 && cnt++ &lt; 100000) {\n    let node = stack.pop();\n    if (test(f, node, opts)) {\n      let midpoint = node.midpoint;\n      let new_depth = node.depth + 1;\n      if (new_depth &lt;= max_depth) {\n        let a_left = node.a;\n        let b_left = midpoint;\n        nodeLeft = new Interval(a_left, b_left, new_depth);\n        nodeLeft.fa = f(a_left);\n        nodeLeft.fb = f(b_left);\n        node.left = nodeLeft;\n\n        let a_right = midpoint;\n        let b_right = node.b;\n        nodeRight = new Interval(a_right, b_right, new_depth);\n        nodeRight.fa = f(a_left);\n        nodeRight.fb = f(b_left);\n        node.right = nodeRight;\n\n        stack.push(nodeRight);\n        stack.push(nodeLeft);\n      } else {\n        pts.push(node.a);\n      }\n    } else {\n      pts.push(node.a);\n    }\n  }\n  pts.push(b);\n  //  pts = pts.map(x =&gt; ({ x: x, y: f(x) }));\n  pts = pts.map((x) =&gt; [x, f(x)]);\n  if (opts.show_roots) {\n    let function_roots = [];\n    pts.forEach(function (o, i) {\n      if (i &lt; pts.length - 1 && Math.sign(o.y) != Math.sign(pts[i + 1].y)) {\n        function_roots.push((o.x + pts[i + 1].x) / 2);\n      }\n    });\n    pts.function_roots = function_roots;\n  }\n  return pts;\n}\nfunction test(f, I, opts = {}) {\n  let { angle_tolerance = 0.01, check_roots = false } = opts;\n  let a = I.a;\n  let b = I.b;\n  let dx2 = (b - a) / 2;\n  let m = (a + b) / 2;\n  let fm = f(m);\n  I.midpoint = m;\n  I.f_mid = fm;\n  if (check_roots && Math.sign(I.fa) != Math.sign(I.fb)) {\n    return true;\n  }\n  let alpha = Math.atan((I.f_mid - I.fa) / dx2);\n  let beta = Math.atan((I.fb - I.f_mid) / dx2);\n  return Math.abs(alpha - beta) &gt; angle_tolerance;\n}\nclass Interval {\n  constructor(a, b, depth) {\n    this.a = a;\n    this.b = b;\n    this.depth = depth;\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhtml`\n&lt;style&gt;\n.colorNight {\n  background: #416f86;\n  color: white;\n  padding: 0px 2px 0px 4px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorDay {\n  background: #ffe438;\n  color: black;\n  padding: 0px 3px 0px 4px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorBkg {\n  background: ${window.darkmode ? \"black\" : \"white\"};\n  color: ${window.darkmode ? \"white\" : \"black\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color0 {\n  background: hsl(0 100% 50%);\n  color: ${yiq(`hsl(0, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color1by8640 {\n  background: hsl(${h1by8640} 100% 50%);\n  color: ${yiq(`hsl(${h1by8640}, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color1 {\n  background: hsl(300 100% 50%);\n  color: ${yiq(`hsl(300, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color2 {\n  background: hsl(280 100% 50%);\n  color: ${yiq(`hsl(280, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color3 {\n  background: hsl(240 100% 50%);\n  color: ${yiq(`hsl(240, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color4 {\n  background: hsl(200 100% 50%);\n  color: ${yiq(`hsl(200, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color5 {\n  background: hsl(180 100% 50%);\n  color: ${yiq(`hsl(180, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color583 {\n  background: hsl(129.88235294117646 100% 50%);\n  color: ${yiq(`hsl(129.88235294117646, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color6 {\n  background: hsl(120 100% 50%);\n  color: ${yiq(`hsl(120, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color7 {\n  background: hsl(80 100% 50%);\n  color: ${yiq(`hsl(80, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color8 {\n  background: hsl(60 100% 50%);\n  color: ${yiq(`hsl(60, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color9 {\n  background: hsl(40 100% 50%);\n  color: ${yiq(`hsl(40, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color375 {\n  background: hsl(${hues[0.375]} 100% 50%);\n  color: ${yiq(`hsl(${hues[0.375]}, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color0083 {\n  background: hsl(${hues[0.0083]} 100% 50%);\n  color: ${yiq(`hsl(${hues[0.0083]}, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color0166 {\n  background: hsl(${hues[0.0166]} 100% 50%);\n  color: ${yiq(`hsl(${hues[0.0166]}, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color55by24 {\n  background: hsl(${hues[.0229]} 100% 50%);\n  color: ${yiq(`hsl(${hues[.0229]}, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color125 {\n  background: hsl(${hues[.125]} 100% 50%);\n  color: ${yiq(`hsl(${hues[.125]}, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color025 {\n  background: hsl(${hues[0.025]} 100% 50%);\n  color: ${yiq(`hsl(${hues[0.025]}, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color287 {\n  background: hsl(${hues[0.287]} 100% 50%);\n  color: ${yiq(`hsl(${hues[0.287]}, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color333 {\n  background: hsl(${hues[0.333]} 100% 50%);\n  color: ${yiq(`hsl(${hues[0.333]}, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color0333 {\n  background: hsl(${hues[0.0333]} 100% 50%);\n  color: ${yiq(`hsl(${hues[0.0333]}, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color0416 {\n  background: hsl(${hues[0.0416]} 100% 50%);\n  color: ${yiq(`hsl(${hues[0.0416]}, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color429 {\n  background: hsl(${hues[0.429]} 100% 50%);\n  color: ${yiq(`hsl(${hues[0.429]}, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color05 {\n  background: hsl(${hues[0.05]} 100% 50%);\n  color: ${yiq(`hsl(${hues[0.05]}, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color533 {\n  background: hsl(${hues[0.533]} 100% 50%);\n  color: ${yiq(`hsl(${hues[0.533]}, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color969 {\n  background: hsl(${hues[0.969]} 100% 50%);\n  color: ${yiq(`hsl(${hues[0.969]}, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color999 {\n  background: hsl(${hues[0.999]} 100% 50%);\n  color: ${yiq(`hsl(${hues[0.999]}, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.color1by320 {\n  background: hsl(${h1by320} 100% 50%);\n  color: ${yiq(`hsl(${h1by320}, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorD121 {\n  background: hsl(${hD121} 100% 50%);\n  color: ${yiq(`hsl(${hD121}, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorD268 {\n  background: hsl(${hD268} 100% 50%);\n  color: ${yiq(`hsl(${hD268}, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorD305 {\n  background: hsl(${hD305} 100% 50%);\n  color: ${yiq(`hsl(${hD305}, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n.colorD306 {\n  background: hsl(${hD306} 100% 50%);\n  color: ${yiq(`hsl(${hD306}, 100%, 50%)`) &gt; 0.51 ? \"black\" : \"white\"};\n  padding: 0px 5px;\n  border-radius: 4px;\n  font-weight: 400;\n  font-family: monospace;\n}\n&lt;/style&gt;\n`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Back to topReuseCC BY-SA 4.0CitationBibTeX citation:@online{laptev2024,\n  author = {Laptev, Martin},\n  title = {Dec {Time}},\n  date = {2024},\n  urldate = {2024},\n  url = {https://maptv.github.io/dec/time},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nLaptev, Martin. 2024. ‚ÄúDec Time.‚Äù 2024. https://maptv.github.io/dec/time.",
    "crumbs": [
      "Dec",
      "Time"
    ]
  },
  {
    "objectID": "history/ww2/index.html",
    "href": "history/ww2/index.html",
    "title": "World War 2",
    "section": "",
    "text": "Day 184 in the Gregorian Decalendar is the first day of Season 2 by meteorological reckoning and also the anniversary of the start of the World War 2. On 1939+184, World War 2 started with the German invasion of Poland. On 1939+200, sixteen days after the start of the war, the Soviet Union invaded Poland from the East. Germany and the Soviet Union split Poland according to the Molotov‚ÄìRibbentrop Pact signed on 1939+175. The map below shows the German and Soviet invasions of Poland on Days 184 and 200, respectively, of Year 1939, as well as other military movements over the course of the subsequent 1.83 years before Germany ended the Molotov‚ÄìRibbentrop Pact on 1941+113 with its invasion of the Soviet Union as part of Operation Barbarossa.\nOn the map, exact dates on the map are in the year+day format and approximate dates are decimal years. For more information on these date formats, take a look at date page in the Measurement section of my site. Briefly, the day in year+day counts the days since Day 0 and can be divided by the number of days in the year to obtain the fractional part of the decimal year. In the legend, there is a date range in the start:stop format, which is inspired by the slice syntax in the Python programming language.\n\n\n\nMap of military movements in Europe from 1939 to 1941\n\n\nWorld War 2 officially ended on 1945+185, 6 years and 1 day after it began, when Japan surrendered. The German surrender on 1945+068 is commemorated with Victory in Europe Day, typically on Day 68 in the West. In contrast, many countries in Russia‚Äôs sphere of influence commemorate Victory Day on Day 69. The chosen commemoration date can therefore be viewed as having political significance. On Day 69, the European Union celebrates the anniversary of the 1950 Schuman Declaration with a holiday called Europe Day. The Schuman Declaration aimed at normalizing relations and promoting political integration in Europe. Today, many countries that were opponents in World War 2 are now close allies, notably Germany, France, and Poland and the US and Japan.\n\n\n\n\n\n Back to topCitationBibTeX citation:@online{laptev2024,\n  author = {Laptev, Martin},\n  title = {World {War} 2},\n  date = {2024},\n  urldate = {2024},\n  url = {https://maptv.github.io/history/ww2},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nLaptev, Martin. 2024. ‚ÄúWorld War 2.‚Äù 2024. https://maptv.github.io/history/ww2.",
    "crumbs": [
      "History",
      "World War 2"
    ]
  },
  {
    "objectID": "jupyter/index.html",
    "href": "jupyter/index.html",
    "title": "Jupyter",
    "section": "",
    "text": "The goal of this blog post, the second to last (index: -2) in my Tools blog post series, is to\n\n\n\n\n\n\n\nflowchart TB\n   A[Git]--&gt;B[VSCode]--&gt;C[Quarto]\n   C--&gt;D[Observable]\n   C--&gt;E[Jupyter]\n   C--&gt;F[Knitr]\n   click A \"../git\"\n   click B \"../vscode\"\n   click C \"../quarto\"\n   click D \"../observable\"\n   click E \"../jupyter\"\n   click F \"../knitr\"\n   style E stroke:#99f,stroke-width:5px\n\n\n\n\nFigure¬†1: Tools series navigation chart",
    "crumbs": [
      "Software",
      "Jupyter"
    ]
  },
  {
    "objectID": "jupyter/index.html#tldr",
    "href": "jupyter/index.html#tldr",
    "title": "Jupyter",
    "section": "",
    "text": "The goal of this blog post, the second to last (index: -2) in my Tools blog post series, is to\n\n\n\n\n\n\n\nflowchart TB\n   A[Git]--&gt;B[VSCode]--&gt;C[Quarto]\n   C--&gt;D[Observable]\n   C--&gt;E[Jupyter]\n   C--&gt;F[Knitr]\n   click A \"../git\"\n   click B \"../vscode\"\n   click C \"../quarto\"\n   click D \"../observable\"\n   click E \"../jupyter\"\n   click F \"../knitr\"\n   style E stroke:#99f,stroke-width:5px\n\n\n\n\nFigure¬†1: Tools series navigation chart",
    "crumbs": [
      "Software",
      "Jupyter"
    ]
  },
  {
    "objectID": "jupyter/index.html#sec-intro",
    "href": "jupyter/index.html#sec-intro",
    "title": "Jupyter",
    "section": "Introduction",
    "text": "Introduction",
    "crumbs": [
      "Software",
      "Jupyter"
    ]
  },
  {
    "objectID": "list/index.html",
    "href": "list/index.html",
    "title": "",
    "section": "",
    "text": "Dec\n\n25 min\n\nIntroducing the Dec measurement system, which uses turns instead of months, weeks, hours, minutes, seconds, and degrees.\n\n\n\n\n\nWord Count\n\n\n4,822 words\n\n\n\n\n\n\n1749500311000\n\n\n\n\n\n\n\n\n\n\n\nDec Date\n\n33 min\n\nIntroducing the Dec calendar (Decalendar), which displays dates in years and days using math notation without the need for months or weeks.\n\n\n\n\n\nWord Count\n\n\n6,457 words\n\n\n\n\n\n\n1739135280000\n\n\n\n\n\n\n\n\n\n\n\nDec Time\n\n109 min\n\nIntroducing Declock, a timekeeping system that displays time in decimal days using math notation without the need for hours, minutes, or seconds.\n\n\n\n\n\nWord Count\n\n\n21,713 words\n\n\n\n\n\n\n1754334414349\n\n\n\n\n\n\n\n\n\n\n\nWorld War 2\n\n3 min\n\n\n\n\n\n\n\nWord Count\n\n\n409 words\n\n\n\n\n\n\n1725860445106\n\n\n\n\n\n\n\n\n\n\n\nGit\n\n14 min\n\n\ntool\n\ngit\n\n\n\n\n\n\n\n\n\nWord Count\n\n\n2,659 words\n\n\n\n\n\n\n1738642589465\n\n\n\n\n\n\n\n\n\n\n\nQuarto\n\n19 min\n\n\ntool\n\nquarto\n\nweb dev\n\ngit\n\n\n\n\n\n\n\n\n\nWord Count\n\n\n3,763 words\n\n\n\n\n\n\n1738643333504\n\n\n\n\n\n\n\n\n\n\n\nPositron\n\n14 min\n\n\ntool\n\ngit\n\nvscode\n\n\n\n\n\n\n\n\n\nWord Count\n\n\n2,627 words\n\n\n\n\n\n\n1746560774735\n\n\n\n\n\n\n\n\n\n\n\nObservable\n\n45 min\n\n\ntool\n\nobservable\n\nquarto\n\n\n\n\n\n\n\n\n\nWord Count\n\n\n8,966 words\n\n\n\n\n\n\n1738642623650\n\n\n\n\n\n\n\n\n\n\n\nJupyter\n\n1 min\n\n\ntool\n\nknitr\n\njupyter\n\nquarto\n\n\n\n\n\n\n\n\n\nWord Count\n\n\n79 words\n\n\n\n\n\n\n1738642636595\n\n\n\n\n\n\n\n\n\n\n\nKnitr\n\n1 min\n\n\ntool\n\nknitr\n\nquarto\n\n\n\n\n\n\n\n\n\nWord Count\n\n\n77 words\n\n\n\n\n\n\n1738642605607\n\n\n\n\n\n\n\n\n\n\n\nProbability\n\n5 min\n\n\nml\n\n\n\n\n\n\n\n\n\nWord Count\n\n\n913 words\n\n\n\n\n\n\n1725581207474\n\n\n\n\n\n\n\n\n\n\n\nLLM\n\n1 min\n\n\ntool\n\ngit\n\nllm\n\nml\n\n\n\n\n\n\n\n\n\nWord Count\n\n\n21 words\n\n\n\n\n\n\n1725581207466\n\n\n\n\nNo matching items\n Back to topAttributions\n\nAll artwork by @allison_horst except for the images related to the following articles:\n\nDec: Observable colorüé®wheel compassüß≠\nDec date: Observable calendarüóìÔ∏èplot\nDec time: Observable daylight‚òÄÔ∏èplot and globeüåç\nPositron: Positron logo by Posit\nLLM, which was generated by DALL¬∑E 3 with the following prompt:\n\n\na cartoon image of a person climbing a mountain to obtain answers to their questions from an omniscient robotic guru with a glowing positronic brain\n\n\n\n\nCitationBibTeX citation:@online{laptev2024,\n  author = {Laptev, Martin},\n  date = {2024},\n  urldate = {2024},\n  url = {https://maptv.github.io/list/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nLaptev, Martin. 2024. 2024. https://maptv.github.io/list/.",
    "crumbs": [
      "Article List"
    ]
  },
  {
    "objectID": "ml/prob/index.html",
    "href": "ml/prob/index.html",
    "title": "Probability",
    "section": "",
    "text": "In this blog post I will discuss a few examples of probability in machine learning. If you are new to probability, I recommend one of great textbooks that cover the topic and are available for free online, such as Think Bayes by Allen Downey and Bayes Rules! by Alicia A. Johnson, Miles Q. Ott, and Mine Dogucu.\nClassification algorithms algorithms can estimate \\(n \\times k\\) class membership probabilities for each dataset, where n is the number of data points in the dataset and k is the number of classes in the training dataset. Similarly, the Gaussian Mixtures clustering algorithm can generate \\(n \\times k\\) cluster label probabilities.\nBesides a data point and the Gaussian Mixtures models can estimate cluster membership probability. point , especially Logistic Regression and Naive Bayes. Every classification algorithm can estimate probabilities of belonging to each class.\n\\(\\Huge P(A\\vert B)={\\frac {P(B\\vert A)P(A)}{P(B)}}\\)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nfrom sklearn.decomposition import PCA\nfrom sklearn.impute import KNNImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import ConfusionMatrixDisplay\nfrom sklearn.model_selection import train_test_split\ndf = sns.load_dataset(\"penguins\")\ndf.head()\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nMale\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nFemale\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nFemale\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nFemale\ny = df[\"species\"]\nX = df.drop(\"species\", axis=1)\nX = pd.get_dummies(X, columns=[\"island\", \"sex\"])\nknni = KNNImputer()\ncolnames = X.columns\nX = knni.fit_transform(X)\nX = pd.DataFrame(X, columns=colnames)\n# https://blog.4dcu.be/programming/2021/03/19/Code-Nugget-PCA-with-loadings.html\npipeline = Pipeline([\n    (\"scaler\", StandardScaler()),\n    (\"pca\", PCA(n_components=2)),\n])\n\npca_data = pd.DataFrame(\n    pipeline.fit_transform(X),\n    columns=[\"PC1\", \"PC2\"],\n    index=df.index,\n)\npca_data[\"species\"] = df[\"species\"]\n\npca_step = pipeline.steps[1][1]\nloadings = pd.DataFrame(\n    pca_step.components_.T,\n    columns=[\"PC1\", \"PC2\"],\n    index=X.columns,\n)\n\ndef loading_plot(\n    coeff, labels, scale=1, text_x=None, text_y=None, colors=None, visible=None, ax=plt, arrow_size=0.5\n):\n    for i, label in enumerate(labels):\n        if visible is None or visible[i]:\n            ax.arrow(\n                0,\n                0,\n                coeff[i, 0] * scale,\n                coeff[i, 1] * scale,\n                head_width=arrow_size * scale,\n                head_length=arrow_size * scale,\n                color=\"#000\" if colors is None else colors[i],\n            )\n            ax.text(\n                text_x[i] if text_x.all() else coeff[i, 0] * 1.2 * scale,\n                text_y[i] if text_y.all() else coeff[i, 1] * 1.2 * scale,\n                label,\n                color=\"#000\" if colors is None else colors[i],\n                ha=\"center\",\n                va=\"center\",\n            )\n\nloadings = loadings * 3.2\n\ntext_x = loadings[\"PC1\"] * 2.4\ntext_y = loadings[\"PC2\"] * 2.4\n\ntext_y[\"sex_Male\"] -= .5\ntext_y[\"bill_depth_mm\"] -= .4\ntext_x[\"bill_depth_mm\"] -= .4\ntext_y[\"sex_Female\"] += .5\ntext_y[\"island_Torgersen\"] += .1\ntext_x[\"island_Dream\"] -= .5\ntext_y[\"island_Dream\"] -= .3\ntext_y[\"island_Biscoe\"] += .3\ntext_x[\"island_Biscoe\"] += .3\ntext_x[\"flipper_length_mm\"] += .55\ntext_x[\"body_mass_g\"] += .95\ntext_y[\"body_mass_g\"] -= .05\n\n# https://seaborn.pydata.org/generated/seaborn.jointplot.html\ng = sns.jointplot(data=pca_data, x=\"PC1\", y=\"PC2\", hue=\"species\", ratio=4, marginal_ticks=True, height=8)\ng.plot_joint(sns.kdeplot, zorder=0, levels=6)\ng.plot_marginals(sns.rugplot, height=-.025, clip_on=False)\n# Add loadings\nloading_plot(loadings[[\"PC1\", \"PC2\"]].values, loadings.index, text_x=text_x, text_y=text_y, scale=2, arrow_size=0.02)\n\n# Add variance explained by the\nplt.xlabel(f\"PC1 ({pca_step.explained_variance_ratio_[0]*100:.2f} %)\")\nplt.ylabel(f\"PC2 ({pca_step.explained_variance_ratio_[1]*100:.2f} %)\")\n\nplt.tight_layout()\nplt.savefig(\"PCA_with_loadings.png\", dpi=300)\nplt.show()\n\n/var/folders/mn/wpqfzxsn0z10p73_8jr0v2180000gn/T/ipykernel_56853/3221505183.py:36: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n  text_x[i] if text_x.all() else coeff[i, 0] * 1.2 * scale,\n/var/folders/mn/wpqfzxsn0z10p73_8jr0v2180000gn/T/ipykernel_56853/3221505183.py:37: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n  text_y[i] if text_y.all() else coeff[i, 1] * 1.2 * scale,\n\n\nText(0.5, 55.813333333333325, 'PC1 (42.48 %)')\n\n\nText(60.083333333333336, 0.5, 'PC2 (26.50 %)')\nsns.displot(df, x=\"bill_length_mm\", kde=True, hue=\"species\", stat=\"count\");\nsns.displot(df, x=\"bill_length_mm\", kde=True, hue=\"species\", stat=\"density\");\nplt.show()\nsns.displot(df, x=\"bill_length_mm\", kde=True, rug=True, hue=\"species\", stat=\"proportion\");\nplt.show()\nfig, axes = plt.subplots(1, 2, sharey=True)\nfig.suptitle('PDF and CDF comparision')\nsns.histplot(df[[\"bill_length_mm\", \"flipper_length_mm\"]], kde=True, ax=axes[0]);\nsns.ecdfplot(df[[\"bill_length_mm\", \"flipper_length_mm\"]], stat=\"count\", ax=axes[1], legend=False)\nplt.ylim((0, 375));\nplt.show()\n\nText(0.5, 0.98, 'PDF and CDF comparision')\nimport pathlib\nlr = LogisticRegression(max_iter=10000)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\nlr.fit(X_train, y_train)\ncmd = ConfusionMatrixDisplay.from_estimator(lr, X_test, y_test)\nplt.show()\n\nLogisticRegression(max_iter=10000)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.LogisticRegression?Documentation for LogisticRegressioniFitted\n        \n            \n                Parameters\n                \n\n\n\n\npenalty¬†\n'l2'\n\n\n\ndual¬†\nFalse\n\n\n\ntol¬†\n0.0001\n\n\n\nC¬†\n1.0\n\n\n\nfit_intercept¬†\nTrue\n\n\n\nintercept_scaling¬†\n1\n\n\n\nclass_weight¬†\nNone\n\n\n\nrandom_state¬†\nNone\n\n\n\nsolver¬†\n'lbfgs'\n\n\n\nmax_iter¬†\n10000\n\n\n\nmulti_class¬†\n'deprecated'\n\n\n\nverbose¬†\n0\n\n\n\nwarm_start¬†\nFalse\n\n\n\nn_jobs¬†\nNone\n\n\n\nl1_ratio¬†\nNone",
    "crumbs": [
      "Machine Learning",
      "Probablity"
    ]
  },
  {
    "objectID": "ml/prob/index.html#step-1.-write-out-the-linear-regression-equation",
    "href": "ml/prob/index.html#step-1.-write-out-the-linear-regression-equation",
    "title": "Probability",
    "section": "Step 1. Write out the linear regression equation",
    "text": "Step 1. Write out the linear regression equation\n\\(\\Huge y=\\beta_0+\\beta_1 x_1+...+\\beta_n x_n\\) ## Step 2. The logistic regression equation is the same as above except output is log odds \\(\\Huge log(odds)=\\beta_0+\\beta_1 x_1+...+\\beta_n x_n\\) ## Step 3. Exponentiate both sides of the logistic regression equation to get odds \\(\\Huge odds=e^{\\beta_0+\\beta_1 x_1+...+\\beta_n x_n}\\) ## Step 4. Write out the probability equation \\(\\Huge p=\\frac{odds}{1+odds}\\) ## Step 5. Plug odds (from step 3) into the probability equation \\(\\Huge p=\\frac{e^{\\beta_0+\\beta_1 x_1+...+\\beta_n x_n}}{1+e^{\\beta_0+\\beta_1 x_1+...+\\beta_n x_n}}\\) ## Step 6. Divide the numerator and denominator by the odds (from step 3) \\(\\Huge p=\\frac{1}{1+e^{-(\\beta_0+\\beta_1 x_1+...+\\beta_n x_n)}}\\)\n\ngnb = GaussianNB()\ngnb.fit(X_train, y_train)\ncmd = ConfusionMatrixDisplay.from_estimator(gnb, X_test, y_test)\nplt.show()\n\nGaussianNB()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.GaussianNB?Documentation for GaussianNBiFitted\n        \n            \n                Parameters\n                \n\n\n\n\npriors¬†\nNone\n\n\n\nvar_smoothing¬†\n1e-09\n\n\n\n\n            \n        \n    \n\n\n\n\n\n\n\n\n\n\nct = pd.crosstab(df[\"species\"], df[\"body_mass_g\"] &gt; df[\"body_mass_g\"].mean(), margins=True)\n\n\nct\n\n\n\n\n\n\n\nbody_mass_g\nFalse\nTrue\nAll\n\n\nspecies\n\n\n\n\n\n\n\nAdelie\n127\n25\n152\n\n\nChinstrap\n61\n7\n68\n\n\nGentoo\n7\n117\n124\n\n\nAll\n195\n149\n344\n\n\n\n\n\n\n\n\nlikelihood = ct.iloc[0, 0] / ct.iloc[0, 2]\nlikelihood\n\nnp.float64(0.8355263157894737)\n\n\n\nprior = ct.iloc[0, 2] / ct.iloc[3, 2]\nprior\n\nnp.float64(0.4418604651162791)\n\n\n\nnorm =  ct.iloc[3, 0] / ct.iloc[3, 2]\nnorm\n\nnp.float64(0.5668604651162791)\n\n\n\nposterior = ct.iloc[0, 0] / ct.iloc[3, 0]\nposterior\n\nnp.float64(0.6512820512820513)\n\n\n\\(\\Huge P(A\\vert B)={\\frac {P(B\\vert A)P(A)}{P(B)}}\\)\n\nresult = likelihood * prior / norm\n\n\ndf[\"body_mass_g\"] &gt; df[\"body_mass_g\"].mean()\n\n0      False\n1      False\n2      False\n3      False\n4      False\n       ...  \n339    False\n340     True\n341     True\n342     True\n343     True\nName: body_mass_g, Length: 344, dtype: bool\n\n\n\n# gnb.fit([df[\"body_mass_g\"] &gt; df[\"body_mass_g\"].mean()], y)",
    "crumbs": [
      "Machine Learning",
      "Probablity"
    ]
  },
  {
    "objectID": "positron/index.html",
    "href": "positron/index.html",
    "title": "Positron",
    "section": "",
    "text": "The goal of this blog post, the second in the Tools blog post series summarized by Figure¬†1, is to set up the Visual Studio Code (VSCode) source-code editor to run in the remote development environments provided by the Codespaces and GitPod computing platforms. To accomplish this goal, we will use VSCode to edit a setup script and configuration files in a Git repository (repo) named dotfiles.\n\n\n\n\n\n\n\nflowchart TB\n   A[Git]--&gt;B[VSCode]--&gt;C[Quarto]\n   C--&gt;D[Observable]\n   C--&gt;E[Jupyter]\n   C--&gt;F[Knitr]\n   click A \"../git\"\n   click B \"../vscode\"\n   click C \"../quarto\"\n   click D \"../observable\"\n   click E \"../knitr\"\n   click F \"../jupyter\"\n   style B stroke:#99f,stroke-width:5px\n\n\n\n\nFigure¬†1: Tools series navigation chart",
    "crumbs": [
      "Software",
      "Positron"
    ]
  },
  {
    "objectID": "positron/index.html#tldr",
    "href": "positron/index.html#tldr",
    "title": "Positron",
    "section": "",
    "text": "The goal of this blog post, the second in the Tools blog post series summarized by Figure¬†1, is to set up the Visual Studio Code (VSCode) source-code editor to run in the remote development environments provided by the Codespaces and GitPod computing platforms. To accomplish this goal, we will use VSCode to edit a setup script and configuration files in a Git repository (repo) named dotfiles.\n\n\n\n\n\n\n\nflowchart TB\n   A[Git]--&gt;B[VSCode]--&gt;C[Quarto]\n   C--&gt;D[Observable]\n   C--&gt;E[Jupyter]\n   C--&gt;F[Knitr]\n   click A \"../git\"\n   click B \"../vscode\"\n   click C \"../quarto\"\n   click D \"../observable\"\n   click E \"../knitr\"\n   click F \"../jupyter\"\n   style B stroke:#99f,stroke-width:5px\n\n\n\n\nFigure¬†1: Tools series navigation chart",
    "crumbs": [
      "Software",
      "Positron"
    ]
  },
  {
    "objectID": "positron/index.html#sec-intro",
    "href": "positron/index.html#sec-intro",
    "title": "Positron",
    "section": "Introduction",
    "text": "Introduction\nEven more Web-based editors can even run code and build software if equipped with computational resources via a service such as GitHub Codespaces and GitPod. have free tiers that should be sufficient for most . in cloud-based environments, which facilitates reproducibility. Notably,\nLike vscode.dev, these web-based editors provide access to the Visual Studio Code (VSCode) source-code editor via a web browser, but distinguish themselves from editors that instead of the local file system. from other services that such as by\nIf you do not have such a repo, you can create one by following along with the previous post in my tools blog post series, which is shown in Figure¬†1.",
    "crumbs": [
      "Software",
      "Positron"
    ]
  },
  {
    "objectID": "positron/index.html#sec-setup",
    "href": "positron/index.html#sec-setup",
    "title": "Positron",
    "section": "Setup",
    "text": "Setup\n\nHomebrew\nLinux, macOS, or Windows Subsystem for Linux (WSL) users can use Homebrew to install everything needed to follow along with this blog post. First, install Homebrew with the latest .pkg installer for macOS or by running the Example¬†1 Unix shell code in your terminal.\n\nExample 1 ¬†\n/bin/bash -c \"$(curl -fsSL https://raw.github\\\nusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\nIf you are not completely satisfied with the integrated terminal built into your preferred source-code editor or the standalone terminal that comes with your operating system (OS), you can use Homebrew to install a new one. The standalone terminal I use most often is iTerm2, which is only for macOS, but I also have the following multi-OS terminals: Alacritty, Hyper, Kitty, and Tabby.\nAfter installing Homebrew, you can run brew doctor in your terminal to confirm that everything is set up correctly. If the brew command is not available, you need to follow the instructions provided after installation to add brew to your PATH variable.\nOnce Homebrew is ready, you can run the shell code in Example¬†2 to create a file called Brewfile with the echo shell command and install everything listed in this newly created Brewfile with the brew bundle shell command.\n\nExample 2 ¬†\necho 'brew \"gh\"\\nbrew \"git\"\\nbrew \"glab\"\ncask \"github\"\\ncask \"rstudio\"\\ncask \"vscodium\"\ncask \"visual-studio-code\"' &gt; Brewfile\nbrew bundle\n\nThe Brewfile created by the shell code in Example¬†2 installs:\n\nGit,\nthe command line interfaces (CLIs) for\n\nGitHub and\nGitLab,\n\nthe GitHub Desktop Git Graphical User Interface (GUI), and\nthree source-code editors:\n\nVisual Studio Code (VSCode),\nVSCodium, and\nRStudio.\n\n\nIf you are curious about how I set up my computer, you can take a look at my Brewfile and other configuration files in my setup repo on GitHub and GitLab. I will highlight a few configuration files in Section¬†4.\n\n\nCodespaces\nAs an alternative to installing tools on your computer, you can use GitHub Codespaces to perform all development tasks remotely. To get a feel for Codespaces, I recommend you first try the github.dev editor.\nBoth Codespaces and github.dev allow you to edit files in any GitHub repository via VSCode in your browser and load your VSCode settings automatically via Settings Sync, but github.dev can be started by going to any repo on GitHub and pressing . or changing the .com in the URL to .dev, e.g. https://github.com/maptv/maptv.github.io to https://github.dev/maptv/maptv.github.io. The github.dev editor starts up fast and is completely free, but comes with restrictions that prevent us from running code, building software, accessing the integrated terminal, or using non-web extensions.\nIn addition to being free of these restrictions, Codespaces allows us to use JupyterLab as the web interface instead of VSCode by appending /?editor=jupyter to the Codespaces URL. If you use a JetBrains integrated development environmentproducts, such as PyCharm (IDE), you can also try appending /?editor=jetbrains to the Codespaces URL and accessing Codespaces via JetBrains Gateway.\nEvery Codespaces instance (codespace) is pre-equipped with commonly used tools. If you want your codespaces to start with additional tools or settings for any tools other than VSCode, you will need to create a repo called dotfiles and enable automatic installation of your configuration files into every codespace you create.\n‚ÄúDotfiles‚Äù is a general term for files that contain user settings. The term ‚Äúdotfiles‚Äù is derived from hidden files in Unix and Unix-like environments, which have names that start with a dot (.). Despite the origin of the term, not all dotfiles are hidden files.\nIn fact, there is a new convention that places non-hidden configuration files in a hidden directory called .config. Despite the growing popularity of this new convention, many dotfiles are still stored according to the old convention, i.e. as hidden files in the home directory.\nExample¬†3 shows how the Vim and Neovim text editors differ in their approach to dotfile storage. The Vim configuration file ~/.vimrc follows the old convention, while the Neovim configuration file (~/.config/nvim/init.vim) follows the new convention, where ~ represents the home directory and / is directory delimiter used in Unix paths.\n\nExample 3 ¬†\n~\n‚îú‚îÄ‚îÄ .config\n‚îÇ¬†¬† ‚îî‚îÄ‚îÄ nvim\n‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ init.vim\n‚îî‚îÄ‚îÄ .vimrc\n\nIf do not have configuration files for any tool other than VSCode and do not need to install anything as part of Codespaces setup, you can forego creating a dotfiles repo and simply enable Settings Sync.\nyou can simply include all of your configuration files in your dotfiles repo with the desired directory structure, e.g.¬†as in Example¬†3. This way, whenever a codespace is created, its home directory (/home/codespace) will be set up to match your dotfiles repo using symbolic links.\nWhile this automatic dotfile setup approach does not allow you to install any additional tools, it is simple and avoids any installation steps that can significantly slow down build times. Importantly, if GitHub determines that your dotfiles repo contains a setup script based on its naming convention, it will not run the setup script and ignore any other files in the repo, because of the expectation that users with setup scripts will want to organize their configuration files themselves.\nFor more information on dotfiles, check out the resources at https://dotfiles.github.io. Regardless o you do have way to configure VSCode, you do not have to set up Codespaces. Instead you can any of the steps below https://docs.github.com/en/codespaces/setting-your-user-preferences/personalizing-github-codespaces-for-your-account#settings-sync\nThe setup script can install\nRegardless of whether you have a dotfiles repo, you can use Settings Sync to maintain consistency between your local and remote development environments. keep all of your configuration files in a repo called dotfiles. Instead\nbut we can add anything that may be missing with a Brewfile and a setup script.\nIn other words, we have the option to simply put configuration files in our dotfiles repo and not install anything.\nMy configuration files have dependencies that are not included in the default Codespaces image, so the configuration-files-only approach would not work for me. Codespaces of the expectation\nI chose setup.sh as the name of my setup script because it was shortest name that followed the naming convention set by GitHub and had the .sh filename extension.\nFor my configurationI need at very least convenient feature is disabled when we include a setup script in our dotfiles repo, because\nThe tools listed in the Brewfile can be installed with a shell script that GitHub will run when building the Codespace.\nIt is essential that your setup script be added to Git as an executable script! I only needed to run the shell code in Example¬†4 once for Git to change the mode of setup.sh and remember forever that its access permissions include execution (x).\n\nExample 4 ¬†\ngit add setup.sh --chmod=+x\n\nMaintaining local and remote settings may be challenging, but Homebrew makes it easier with the $HOMEBREW_PREFIX environment variable. This variable contains the Homebrew installation path that matches your computer hardware and OS.\nBefore you can use $HOMEBREW_PREFIX, the brew command needs to be added to your PATH. To ensure Codespaces setup, I added the code in Example¬†5 to my .zshrc.\n\nExample 5 ¬†\n\n\n.zshrc\n\nif [[ \"$(uname)\" == 'Linux' ]]; then\n    eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"\nfi\n\n\nTo prevent conflicts with web browser keybindings, you can install Codespaces as a Progressive Web App (PWA) by clicking on the ‚ÄúInstall Codespaces‚Äù icon at the end of the URL bar in Chrome or any Chromium-based web browser. When running as a PWA, Codespaces behaves like a desktop application and can thus provide a familiar user experience on any computer!\nOn macOS, the PWA installation location is ~/Applications/Chrome Apps.localized.\n\n\nRepository\nBefore you can benefit from everything GitHub and GitLab have to offer, you will need a GitHub and/or GitLab account and an SSH key. Even though there are other authentication methods, SSH keys are still the easiest way to authenticate to GitHub and GitLab.\nYou can create a repo using the web interface of https://github.com or https://gitlab.com in your browser, but the best way to start a new project is using the CLI for GitHub or GitLab in your terminal. First, run gh auth login or glab auth login and follow the prompts to authenticate via your web browser or with an authentication token.\nThe GitHub CLI allows you to add an SSH key to your account during or after authentication. The GitLab CLI does not handle SSH keys during authentication, but has a similar command for adding an SSH key to your GitLab account.\nAfter authentication and SSH key setup, you can run the code in either of the code chunks in Example¬†6 to set up your local and remote repos and create a Quarto website project in the local repo. You can create shell alias that combine all of the repo creation steps like I did in my .zshrc.\n\nExample 6 ¬†\n\nGitHubGitLab\n\n\ncd # start in home directory\nmkdir USERNAME\ncd USERNAME\ngh repo create REPONAME --add-readme --clone --public\ncd REPONAME\n\n\ncd # start in home directory\nmkdir USERNAME\ncd USERNAME\nglab repo create REPONAME --readme --defaultBranch main --public\ncd REPONAME\ngit pull origin main\ngit branch --set-upstream-to=origin/main main\n\n\n\n\nTo make it easier to backup my repos on both GitHub and GitLab, I set up each local repo to have two origin remote URLs using the code as shown in Example¬†7. With this setting, running git push in my local repo updates my remote repos on both GitHub and GitLab.\n\nExample 7 ¬†\ngit remote add lab git@gitlab.com:maptv/maptv.gitlab.io\ngit remote add hub git@github.com:maptv/maptv.github.io\ngit remote set-url --add origin $(git remote get-url lab)",
    "crumbs": [
      "Software",
      "Positron"
    ]
  },
  {
    "objectID": "positron/index.html#sec-workflow",
    "href": "positron/index.html#sec-workflow",
    "title": "Positron",
    "section": "Git workflow",
    "text": "Git workflow\nWhen I want to add or update the content on my site, I go through the steps in the standard Git workflow shown in Figure¬†2. Every time I ‚Äúpush‚Äù a collection of changes called a commit to my maptv.github.io repo on GitHub, a continuous integration (CI) system called GitHub Actions automatically completes the steps required to build and publish my website.\n\n\n\n\n\n\nflowchart LR\n   A[working&lt;br/&gt;directory]-.git&lt;br/&gt;add.-&gt;B{{staging&lt;br/&gt;area}}-.git&lt;br/&gt;commit.-&gt;C([local&lt;br/&gt;repo])-.git&lt;br/&gt;push.-&gt;D(remote&lt;br/&gt;repo)\n\n\n\n\nFigure¬†2: Git workflow\n\n\n\n\n\n\nShell aliases\nTo make it easier to make incremental changes to my website and frequently release new content, I combined all of the git shell commands in Figure¬†2 into shell aliases. You can add shell aliases to a shell configuration file like .bashrc or .zshrc on your computer to shorten one or more commands and any associated command arguments.\nThe git commit aliases in the .zshrc file in my setup repo on GitHub and GitLab target different groups of files for inclusion in the next commit. For example, cmp targets staged files, camp targets tracked files, a.cmp targets files in the current directory, and aacmp targets files in the repo.\nExample¬†8 shows the aacmp alias as an example of the shell alias syntax. The mnemonic device for this alias is add all, commit with a message, and push.\n\nExample 8 ¬†\n\n\n.zshrc\n\nalias aacmp=\"func() { git add --all && git commit --message \\\n    \\\"$(echo '${*:-$(echo $(git diff --name-status --cached \\\n    | tr \"[:space:]\" \" \"))}')\\\" && git push; }; func\"\n\n\nAliases like aacmp allow me to enter free-form commit messages directly on the command line without quotes, e.g.¬†aacmp edit first post. If you decide to try one of these aliases, please exercise extreme caution as any un-escaped or un-quoted metacharacters may yield surprising effects instead of being included verbatim in the commit message, e.g.¬†* is replaced by all of the file and directory names in the current directory!\nIf no commit message is provided after the aliases, a generic commit message is created that includes the change type and name of each changed file. In Section¬†4.2, I describe how I used this generic commit message approach to further simplify the Git workflow.\n\n\nKeybindings\nAn alternative to a shell alias that combines git commands is to use a keyboard shortcut in a Git Graphical User Interface (GUI) such as GitHub Desktop or the Git interface in a code editor like VSCode, VSCodium, or RStudio. I use keyboard shortcuts in VSCode and VSCodium to send shell commands to the integrated terminal without moving my focus away from the files I am editing.\nI created different shortcuts to control which files are included in each commit: ‚å•‚áßF for the current file only, ‚å•‚áßS for already staged files, ‚å•‚áßT for all tracked files, and ‚å•‚áßU for all files including untracked files. I also have keyboard shortcuts that affect a specific directory (and all of its subdirectories): ‚å•‚áßD for the current file‚Äôs directory, ‚å•‚áß. for shell‚Äôs current directory, ‚å•‚áßC for the current working directory according to VSCode/VSCodium, ‚å•‚áßW for the Workspace directory.\nExample¬†9 displays the ‚å•‚áßF shortcut as an example of the VSCode/VSCodium shortcut syntax. This shortcut uses the escape code for the return key (\\u000D) to run several git commands and predefined variables to insert the absolute (${file}) and relative (${relativeFile}) path to the currently open file.\n\nExample 9 ¬†\n\n\nkeybindings.json\n\n{\n  \"key\": \"shift+alt+f\",\n  \"command\": \"workbench.action.terminal.sendSequence\", \"args\": { \"text\":\n    \"git add ${file} && git commit -m \\\"M ${relativeFile}\\\" && git push\\u000D\" },\n  \"when\": \"terminalIsOpen\"\n}\n\n\nIf you want to set up similar shortcuts for yourself, take a look at my keybindings.json in my setup repo on GitHub and GitLab. As you create keyboard shortcuts, please be mindful of keybinding conflicts that may arise.\nTo set up a keyboard shortcut that runs a series of steps rather than a single line of shell code, I suggest you use the VSCode/VSCodium Tasks mechanism, a system designed to automate software build tasks. The default keyboard shortcut to run all tasks in a local or global task.json file is ‚åÉ‚áßB on Linux/Windows or ‚åò‚áßB on Mac (mnemonic: B is for Build), but you can bind other shortcuts to specific tasks.\nIf you use a text editor like Vim or Emacs, you can create keybindings for Vim plugins like fugitive or Emacs packages like magit that run through the entire Git workflow. Example¬†10 shows the Vim+fugitive equivalent of my ‚å•‚áßF VSCode/VSCodium keybinding.\n\nExample 10 ¬†\n\n\n.vimrc\n\nnnoremap &lt;A-S-f&gt; :Gw&lt;bar&gt;G! commit -m \"M \"%&lt;bar&gt;G! push&lt;CR&gt;\n\n\nThe drawback of my keyboard shortcut approach for the Git workflow is that it produces generic commit messages that are no very informative. Anyone reading the messages will not be able to tell what changes were made and more importantly why the changes were made.\nTo automatically generate commit messages based on the currently staged changes, we can use a Large Language Model (LLM). Generative artificial intelligence models like LLMs tend to be large in size and have atypical computational requirements, so I will save my adventures with LLMs for a different post.\nI really enjoy using Git, especially with shell aliases in my terminal and keyboard shortcuts in my favorite text editors. If we ever collaborate on a project together, you can be sure that I will insist on using Git!",
    "crumbs": [
      "Software",
      "Positron"
    ]
  },
  {
    "objectID": "quarto/include/index.html",
    "href": "quarto/include/index.html",
    "title": "Quarto",
    "section": "",
    "text": "This blog post is the most important post in my Tools blog post series, as indicated by its centrality in Figure¬†1, node of the netw focuses on the use of Quarto to author and publish digital content. As the third post in my , which is summarized by Figure¬†1, and depends on the. is my blog post on Quarto. The subsequent posts in the series demonstrate how to use Observable, Jupyter, and Knitr to execute code in Quarto documents.\n\n\n\n\n\n\n\nflowchart TB\n   A[Git]--&gt;B[VSCode]--&gt;C[Quarto]\n   C--&gt;D[Observable]\n   C--&gt;E[Jupyter]\n   C--&gt;F[Knitr]\n   click A \"../git\"\n   click B \"../vscode\"\n   click C \"../quarto\"\n   click D \"../observable\"\n   click E \"../jupyter\"\n   click F \"../knitr\"\n   style C stroke:#99f,stroke-width:5px\n\n\n\n\nFigure¬†1: Tools series navigation chart\n\n\n\n\nIf you do not have such a repo, you can create one by following along with the previous post in my tools blog post series, which is shown in Figure¬†1.",
    "crumbs": [
      "Software",
      "Quarto",
      "Include"
    ]
  },
  {
    "objectID": "quarto/include/index.html#tldr",
    "href": "quarto/include/index.html#tldr",
    "title": "Quarto",
    "section": "",
    "text": "This blog post is the most important post in my Tools blog post series, as indicated by its centrality in Figure¬†1, node of the netw focuses on the use of Quarto to author and publish digital content. As the third post in my , which is summarized by Figure¬†1, and depends on the. is my blog post on Quarto. The subsequent posts in the series demonstrate how to use Observable, Jupyter, and Knitr to execute code in Quarto documents.\n\n\n\n\n\n\n\nflowchart TB\n   A[Git]--&gt;B[VSCode]--&gt;C[Quarto]\n   C--&gt;D[Observable]\n   C--&gt;E[Jupyter]\n   C--&gt;F[Knitr]\n   click A \"../git\"\n   click B \"../vscode\"\n   click C \"../quarto\"\n   click D \"../observable\"\n   click E \"../jupyter\"\n   click F \"../knitr\"\n   style C stroke:#99f,stroke-width:5px\n\n\n\n\nFigure¬†1: Tools series navigation chart\n\n\n\n\nIf you do not have such a repo, you can create one by following along with the previous post in my tools blog post series, which is shown in Figure¬†1.",
    "crumbs": [
      "Software",
      "Quarto",
      "Include"
    ]
  },
  {
    "objectID": "quarto/include/index.html#sec-intro",
    "href": "quarto/include/index.html#sec-intro",
    "title": "Quarto",
    "section": "Introduction",
    "text": "Introduction\nQuarto is an open-source software system for turning plain-text source files into outputs like articles, books, blogs, dashboards, presentations, reports, and websites. Announced on 2022+149 by Posit CEO JJ Allaire, Quarto is already taking the worldüåêby storm‚õàÔ∏è!\nI strongly believe that everyone, regardless of their background and current technical skill level, can learn and benefit from Quarto. Getting started with Quarto is easy thanks to its excellent documentation and vibrant community of enthusiastic users and developers.\nRather than repeat the basic information already available elsewhere, I will share some advanced techniques along with the fundamental knowledge needed to understand how they work. The topics I cover are very technical, but my goal is to make the content on my blog as accessible as possible.\nThe first topic I will delve into is creating and publishing a website with Quarto. To follow the Quarto documentation on creating a website, you will need Visual Studio Code (VSCode), VSCodium, RStudio, or a terminal.",
    "crumbs": [
      "Software",
      "Quarto",
      "Include"
    ]
  },
  {
    "objectID": "quarto/include/index.html#sec-pub",
    "href": "quarto/include/index.html#sec-pub",
    "title": "Quarto",
    "section": "Publishing Quarto sites",
    "text": "Publishing Quarto sites\n\nInstalling tools\nIf you use macOS, Linux, or the Windows Subsystem for Linux (WSL), you can install all of the aforementioned tools with the Homebrew package manager. To install everything you will need to follow along with this blog post, you can first install Homebrew and then run brew bundle in a directory that contains the Brewfile shown in Example¬†1.\n\nExample 1 ¬†\n\n\nBrewfile\n\nbrew \"gh\"\nbrew \"git\"\nbrew \"glab\"\ncask \"github\"\ncask \"quarto\"\ncask \"rstudio\"\ncask \"vscodium\"\ncask \"visual-studio-code\"\nvscode \"quarto.quarto\"\nvscode \"REditorSupport.r\"\n\n\nUsing a package manager like Homebrew to install all the requirements with a single shell command like brew bundle is the fastest and easiest way to get ready to follow along with this blog post. If you are curious about how I set up my computer, you can take a look at my Brewfile and other configuration files in my setup repository (repo) on GitHub and GitLab.\nApart from RStudio, VSCode, and VSCodium, the Brewfile in Example¬†1 will install the Git version control system, the GitHub and GitLab command line interfaces (CLIs), and GitHub Desktop, a Git Graphical User Interface (GUI). For more information on Git, a tool used by 93% of software developers worldwide according to survey results published by StackOverflow on 2022+314, take a look at the ‚ÄúGitHub for supporting, reusing, contributing, and failing safely‚Äù post by Allison Horst and Julie Lowndes on the Openscapes blog.\nAs an alternative to installing tools on your computer, you can use the web interface provided by GitHub Codespaces. To set up a Codespace, you can remove the lines that start with cask from the Brewfile provided in Example¬†1 and add the file to a repo called dotfiles and along with a setup.sh file like the one shown in Example¬†2.\n\nExample 2 ¬†\n\n\nsetup.sh\n\necho | /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n(echo; echo 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"') &gt;&gt; /home/codespace/.profile\neval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"\nbrew bundle\n\n\n\n\nPublishing overview\nOnce you are done setting up your computer or Codespace, you create a Quarto website template and make your site publicly available on the internet using one of the many available publishing services. To explore and assess different publishing workflows and free website hosting options, I set up my personal website on four different web hosts: Quarto Pub, Netlify, GitHub Pages, and GitLab Pages.\nThere are so many different ways to publish a Quarto site that I decided to come up with a naming system for Quarto publishing methods. The naming system derives a code for each publishing method from the numbered lists in the Quarto publishing documentation. For example, I refer to the two methods to publish to Quarto Pub as Q1 and Q2:\nTable¬†1 uses this naming system in its Code column to identify the publishing methods I discuss in this blog post. Each publishing method targets a particular web Host, Renders content locally or on a remote server, and deploys sites using either the quarto publish or the git push shell Command.\n\n\n\n\n\n\nCode\nHost\nRender\nCommand\n\n\n\n\nG1\nGitHub\nLocal\npush\n\n\nG2\nGitHub\nLocal\npublish\n\n\nG3\nGitHub\nRemote\npush\n\n\nN1\nNetlify\nLocal\npublish\n\n\nN2\nNetlify\nLocal\npush\n\n\nN3\nNetlify\nRemote\npush\n\n\nQ1\nQuarto\nLocal\npublish\n\n\nQ2\nQuarto\nRemote\npush\n\n\n\n\n\nTable¬†1: Quarto website publishing methods\n\n\n\n\n\nGit workflow\nThe first publishing method I tried for my personal site was G1, which requires the use of Git to push all website content to a Git provider like GitHub or GitLab. After I set up GitHub Pages and GitLab Pages, I could update my website on both of these web hosts just by going through the standard Git workflow shown in Figure¬†2.\n\n\n\n\n\n\nflowchart LR\n   A[working&lt;br/&gt;directory]-.git&lt;br/&gt;add.-&gt;B{{staging&lt;br/&gt;area}}-.git&lt;br/&gt;commit.-&gt;C([local&lt;br/&gt;repo])-.git&lt;br/&gt;push.-&gt;D(remote&lt;br/&gt;repo)\n\n\n\n\nFigure¬†2: Git workflow\n\n\n\n\n\nTo make it easier to make incremental changes to my website and frequently release new content, I combined all of the git shell commands in Figure¬†2 into a shell alias. You can add shell aliases to a shell configuration file like .bashrc or .zshrc on your computer to shorten commands or combine any sequence of commands into one step.\nThe aacmp alias in the .zshrc file in my setup repo allows me to enter a free-form commit message directly on the command line without quotes, e.g.¬†qp edit first blog. If you decide to try my aacmp alias, please exercise extreme caution as any un-escaped or un-quoted metacharacters may yield surprising effects instead of being included verbatim in the commit message. For example, qp * will list the contents of the current directory in the commit message in place of the asterisk!\nAn alternative to a shell alias that combines git commands is a keyboard shortcut in Git-enabled GUI. Example¬†3 shows two files, tasks.json and update.sh, that we can use to set up VSCode, VSCodium, and GitHub Codespaces to go through the Git workflow whenever we press Ctrl+Shift+B on Linux/Windows or ‚åò+Shift+B on Mac (mnemonic: B is for Build).\n\nExample 3 ¬†\n\nupdate.shtasks.json\n\n\n\n\n\n\n\n\n\n\nThis mechanism is called Tasks and is used to automate software build tasks, which can include any steps required to build and publish a website. Importantly, the Tasks mechanism requires that the tasks.json file be added to the .vscode directory and that we enable execution of the update.sh script by running chmod +x update.sh in our project root.\nShell aliases and keyboard shortcuts can greatly facilitate the Git workflow which is essential not only for G1, but also G3, N3, and Q2. Unlike these other publishing methods, G1 leads to messy commits that contain changes to both source and output files.\n\n\nquarto publish\nTo have cleaner commits, I switched from G1 to G2 by adding quarto publish to my publishing workflow. With G2, I can track changes to my source files on my main branch and publish my output files to GitHub Pages and GitLab Pages from my gh-pages branch.\nQ1, N1, and G2 all use quarto publish to render website content locally and then deploy it in one fell swoop. If you do not plan to use the Git version control system or the advanced features offered by GitHub, GitLab, or Netlify, then I recommend deploying your site to Quarto Pub by running quarto publish quarto-pub (Q1 in Table¬†1).\nLike Q1, N1 is a deployment method that does not require Git and makes it possible to deploy our site with a single shell command: quarto publish netlify. N1 provides access to the advanced web hosting features offered by Netlify and can even render content as long as code execution is frozen.\nTo deploy my site to GitHub Pages, GitLab Pages, and Netlify, I combined G2 and N2. When I run quarto publish gh-pages, Quarto renders my site into my output directory, copies the output directory contents to the gh-pages branch of my local repo, and then commits and pushes the changes to my remote repos on GitHub and GitLab, which triggers Netlify to build my site from the gh-pages branch.\nTo summarize the Quarto publishing methods I discussed so far, Q1 and N1 are easy to configure and use, N2 automatically builds sites from Git repos, G1 is not recommended because it pollutes commits with output file changes, and G2 is more difficult to set up and use but provides clean commits and a nice separation of source and output files.\n\n\nGitHub Actions\nAll of the publishing methods I have discussed so far require us to generate output files locally by rendering our source files. In contrast, Q2, G3, and N3 make it possible to skip local rendering in favor of relying on GitHub Actions to handle all of the necessary steps.\nG3 is noteworthy, because it offers the same convenience of G1 but without messy commits that mix changes to source and output files. An added bonus of G3 is that rendering with GitHub Actions provides a reproducible computational environment that is not dependent on what you have installed on your computer.\nInstead of using GitHub Actions, I could have used GitLab CI/CD to build my site. I decided not to go down this route because the Quarto dev team has many GitHub Actions workflows available but currently no official support for GitLab CI/CD.\nBefore trying to use GitHub Actions or any other continuous integration systems in your publishing workflow, I suggest getting used to working with quarto publish (Q1, G2, or N1). You can always set up other publishing methods later without sacrificing anything, because all of the publishing methods except G1 can be combined together.\nIn Section¬†4, I will walk through the setup of both G2 and G3 to provide the option of rendering locally by running quarto publish or rendering remotely with GitHub Actions by pushing to the main branch. Along the way, I will share many practical tips and general advice that you can apply to any project.",
    "crumbs": [
      "Software",
      "Quarto",
      "Include"
    ]
  },
  {
    "objectID": "quarto/include/index.html#sec-set",
    "href": "quarto/include/index.html#sec-set",
    "title": "Quarto",
    "section": "Publishing setup",
    "text": "Publishing setup\n\nRepo setup\nBefore you can use GitHub Actions to publish your site, you will need a GitHub, an SSH key, and a repo like maptv.github.io that has a default branch called main and another branch which must be called gh-pages. If you want to publish on GitLab Pages, you will also need a GitLab account and an analogous GitLab repo like maptv.gitlab.io.\nYou can create the repo and the gh-pages branch using the web interface of https://github.com or https://gitlab.com in your browser, but the best way to start a new project is using the CLI for GitHub or GitLab in your terminal. First, run gh auth login or glab auth login and follow the prompts to authenticate via your web browser or with an authentication token.\nThe GitHub CLI allows you to add an SSH key to your account during or after authentication. The GitLab CLI does not handle SSH keys during authentication, but has a similar command for adding an SSH key to your GitLab account.\nAfter authentication and SSH key setup, you can run the code in either of the code chunks in Example¬†4 to set up your local and remote repos and create a Quarto website project in the local repo. You can create shell alias that combine all of the repo creation steps like I did in my .zshrc.\n\nExample 4 ¬†\n\nGitHubGitLab\n\n\ncd # start in home directory\nmkdir -p USERNAME\ncd USERNAME\ngh repo create USERNAME.github.io --add-readme --clone --public\ncd SITENAME\nquarto create project website USERNAME.github.io\n\n\ncd # start in home directory\nmkdir -p USERNAME\ncd USERNAME\nglab repo create USERNAME.gitlab.io --readme --defaultBranch main --public\ncd SITENAME\ngit pull origin main\ngit branch --set-upstream-to=origin/main main\nquarto create project website USERNAME.gitlab.io\n\n\n\n\nTo make it easier to maintain my site on both GitHub and GitLab Pages, I set up my local repo cloned to have two origin remote URLs using the code as shown in Example¬†5. Now, running quarto publish or git push in my local repo, updates my content on both GitHub and GitLab.\n\nExample 5 ¬†\ngit remote add lab git@gitlab.com:maptv/maptv.gitlab.io\ngit remote add hub git@github.com:maptv/maptv.github.io\ngit remote set-url --add origin $(git remote get-url lab)\n\nIf you want to have your website hosted on GitHub Pages, you will need to set gh-pages as your source branch in your repo settings. For GitLab Pages, you will need to add a .gitlab-ci.yml file to your repo and update your _quarto.yml file as shown in Example¬†6 to include .gitlab-ci.yml as a resource in your output directory.\n\nExample 6 ¬†\n\n.gitlab-ci.yml_quarto.yml\n\n\n# https://docs.gitlab.com/ee/user/project/pages/introduction.html#customize-the-default-folder\npages:\n  script: echo \"The site will be deployed to $CI_PAGES_URL\"\n  artifacts:\n    paths:\n      - \".\"\n  publish: \".\"\n  only:\n    - gh-pages\n\n\nauthor:\n  - name: Martin Laptev\n    url: https://maptv.github.io\n\n\n\n\nBy default, GitLab Pages includes a random hash in site URLs. To shorten the URL of my GitLab Pages site to &lt;maptv.gitlab.io&gt;, I had to uncheck Use unique domain under Deploy &gt; Pages in the GitLab sidebar.\nAt this point, we have completed G2 setup and you should be able to run quarto publish gh-pages from your main branch to render your site and deploy it to GitHub and/or GitLab Pages. Deploying with quarto publish at least once is a prerequisite for setting up any of the publishing methods that rely on GitHub Actions, because quarto publish creates a _publish.yml file in the root of your project that is required for publishing via GitHub Actions.\n\n\nGitHub Actions\nIn addition to the steps described above, G3 setup requires that we create a .github/workflows directory and add a YAML file to that directory. Example¬†7 contains the gh-pages.yml file I use for my own site and the shell code that can used to obtain this file.\n\nExample 7 ¬†\n\ncurlgh-pages.yml\n\n\nmkdir -p .github/workflows\ncd .github/workflows\ncurl -O https://raw.githubusercontent.com/maptv/maptv.github.io/main/.github/workflows/gh-pages.yml\n\n\non:\n  workflow_dispatch:\n  push:\n    branches: [main]\n\nname: Quarto Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v4\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n        with:\n          version: '1.4.489'\n          tinytex: true\n\n      - name: Install R\n        uses: r-lib/actions/setup-r@v2\n        with:\n          r-version: '4.2.0'\n\n      - name: Install R Dependencies\n        uses: r-lib/actions/setup-renv@v2\n        with:\n          cache-version: 1\n\n      - name: Install Python and Dependencies\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.10'\n          cache: 'pip'\n      - run: pip install jupyter\n      - run: pip install -r requirements.txt\n\n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Push To GitLab\n        env:\n          token: ${{ secrets.GITLAB_AUTH_TOKEN }}\n        run: |\n          echo Starting to push gh-pages branch to GitLab\n          git config user.name \"maptv\"\n          git config user.email \"129316885+maptv@users.noreply.github.com\"\n          git remote set-url origin \"https://oauth2:${token}@gitlab.com/maptv/maptv.gitlab.io\"\n          git push origin gh-pages\n\n\n\n\nThe gh-pages.yml file in Example¬†7 installs Quarto, the R and Python programming languages, and the packages in the renv.lock and requirements.txt files. If you do not need R and/or Python, you can remove any unnecessary portions of the file.\nTo modify the Python files that are installed by GitHub Actions, you can edit the requirements.txt file in your repo. To update your renv.lock file so that it includes all of the R packages your site requires, run renv::snapshot() in an R session or Rscript -e renv::snapshot() in a shell.\nAfter pushing the gh-pages.yml file, you can visit the Actions tab in your remote repo on GitHub to check the progress of the deployment of your site. If your site did not build successfully, you can go through the logs to try to diagnose the problem.\nI added a ‚ÄúPush to GitLab‚Äù step to my gh-pages.yml to make GitHub Actions push my remote gh-pages to GitLab so that my site is kept in sync on both GitHub and GitLab Pages. This required manually creating a token on GitLab and adding it to GitHub, which I accomplished using the GitHub CLI as shown in Example¬†8.\n\nExample 8 ¬†\ngh secret set GITLAB_AUTH_TOKEN\n\nAfter the setup described above, I now have two options for publishing my Quarto site: quarto publish and 2) git push. In addition to GitHub and GitLab Pages, both of these options automatically update my site on Netlify via N2.\nTo also automatically update my site on Quarto Pub, I created a separate GitHub Actions workflow by adding another YAML file to the .github/workflows directory in my repo. Example¬†9 shows my quarto-pub.yml file and the shell code that can be used to obtain it.\n\nExample 9 ¬†\n\ncurlquarto-pub.yml\n\n\nmkdir -p .github/workflows\ncd .github/workflows\ncurl -O https://raw.githubusercontent.com/maptv/maptv.github.io/main/.github/workflows/gh-pages.yml\n\n\non:\n  workflow_run:\n    workflows: [pages-build-deployment]\n    types: [completed]\n\nname: Update Quarto Pub\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out main repository\n        uses: actions/checkout@v4\n\n      - name: Check out _site\n        uses: actions/checkout@v4\n        with:\n          ref: gh-pages\n          path: _site\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n\n      - name: Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: quarto-pub\n          render: false\n          QUARTO_PUB_AUTH_TOKEN: ${{ secrets.QUARTO_PUB_AUTH_TOKEN }}\n          GITHUB_USERNAME: maptv\n\n\n\n\nMy quarto-pub.yml file is based on Q2, but it runs upon completion of the pages-build-deployment workflow instead of a push to main. I changed the workflow trigger so that it runs after my GitHub Pages site is built, regardless of whether I triggered the build by running quarto publish gh-pages or pushing to main.\nFigure¬†3 summarizes all of the steps that occur during my Quarto publishing workflow. This workflow allows me to publish my site on four web hosts every time I run quarto publish gh-pages (G2) or git push (G3)!\n\n\n\n\n\n\nflowchart LR\n    A[local&lt;br/&gt;main]-.G2.-&gt;B[local&lt;br/&gt;gh-pages]-.G2.-&gt;C[GitHub&lt;br/&gt;gh-pages]\n    B[local&lt;br/&gt;gh-pages]-.G2.-&gt;D[GitLab&lt;br/&gt;gh-pages]\n    A[local&lt;br/&gt;main]-.G3.-&gt;F[GitHub&lt;br/&gt;main]-.G3.-&gt;C[GitHub&lt;br/&gt;gh-pages]-.G3.-&gt;D[GitLab&lt;br/&gt;gh-pages]\n    A[local&lt;br/&gt;main]-.G3.-&gt;G[GitLab&lt;br/&gt;main]\n    C[GitHub&lt;br/&gt;gh-pages]-.N2.-&gt;E[Netlify]\n    C[GitHub&lt;br/&gt;gh-pages]-.Q2.-&gt;H[Quarto&lt;br/&gt;Pub]\n\n\n\n\nFigure¬†3: Quarto publishing workflow\n\n\n\n\n\nSo far I have only noticed one difference between the four web hosts I use for my site: GitHub Pages is the only web host that properly differentiates between internal and external links. All of the other web hosts include the external link icon on all links regardless of whether they target my site or an external site.\nI tried unsuccessfully to solve this issue by setting the link-external-filter property to a regular expression. If you notice a problem with the link-external-icon feature on other web hosts, I suggest switching to GitHub Pages.",
    "crumbs": [
      "Software",
      "Quarto",
      "Include"
    ]
  },
  {
    "objectID": "quarto/include/index.html#sec-cust",
    "href": "quarto/include/index.html#sec-cust",
    "title": "Quarto",
    "section": "Customizing Quarto sites",
    "text": "Customizing Quarto sites\n\nSite navigation\nOnce your site is built and published, you can make it easier to navigate with a customized navigation bar (navbar) and sidebar, as described in the Quarto documentation. Check out the _quarto.yml files for my site and the Quarto documentation site to see how the navigation components are set up.\nIn my navbar, I added toggle buttons for reader mode and dark mode. The names of the other icons on right side of the navbar are included in the sidebar.\n\n\nHTML blocks\nMy navbar also provides the current date and time in Dec ordinal (deco) format, which counts the years since 1 BC and the days since March 1. Dec is a calendar and time system that I created and use throughout my blog.\nTo add a custom timestamp to the navbar, I put a &lt;script&gt; element that runs time.js in an HTML block in every Quarto markdown (.qmd) file, as shown in Example¬†10. Mine √áetinkaya-Rundel wrote about HTML blocks as part of her A Quarto tip a day project.\n\nExample 10 ¬†\n\n*.qmdtime.js\n\n\n```{=html}\n&lt;script src=\"time.js\"&gt;&lt;/script&gt;\n```\n\n\n\n\n\n\n\nHTML blocks are useful for running JavaScript code in the context of a single page on your site without affecting the others. I also use HTML blocks to add a &lt;style&gt; element to my .qmd files as a last ditch effort to fine tune the style of my site.\nBefore I resort to the &lt;style&gt; element approach, I try writing CSS in my style.css, light.css, and dark.css files. So far, this approach has been sufficient to make any styling changes I want, but if it every fails, I can use JavaScript to override the default styling provided by Quarto by modifying style attributes, which have the highest specificity in CSS.\n\n\nPost-render script\nI wanted to my blog‚Äôs listing page to show dates in the same format as the navbar timestamp. To accomplish this, I used a post-render script written in the Python programming language.\nPre- and post-render scripts are set as project options in the _quarto.yml file in the root of your Quarto project. Example¬†11 shows the date.py post-render script and how this script is referenced in _quarto.yml.\n\nExample 11 ¬†\n\n_quarto.ymldate.py\n\n\nauthor:\n  - name: Martin Laptev\n    url: https://maptv.github.io\ndate-format: x\n\n\n# https://howardhinnant.github.io/date_algorithms.html#days_from_civil\nimport bs4\n\ndef unix2doty(ms):\n    dote = ms / 86400000 + 719468\n    cykl = (\n        dote if dote &gt;= 0\n        else dote - 146096\n    ) // 146097\n    dotc = dote - cykl * 146097\n    yotc = (dotc\n        - dotc // 1460\n        + dotc // 36524\n        - dotc // 146096\n    ) // 365\n    return [\n        int(yotc + cykl * 400),\n        dotc - (yotc * 365\n            + yotc // 4\n            - yotc // 100\n        )\n    ]\n\nwith open(\"_site/list/index.html\") as infile:\n    txt = infile.read()\n    soup = bs4.BeautifulSoup(txt, features=\"html.parser\")\nfor div in soup.find_all(\"div\", {\"class\": \"card-file-modified\"}):\n    if \"+\" not in div.text:\n        y, d = unix2doty(int(div.text))\n        div.string.replace_with(f\"{y:&gt;04}+{d.__floor__():&gt;03}\")\nfor div in soup.find_all(\"div\", {\"class\": \"listing-reading-time\"}):\n    if \"min\" in div.text:\n        div.string.replace_with(f\"{(int(div.text.split()[0]) / 1.44).__floor__()} milliday\")\nwith open(\"_site/list/index.html\", \"w\") as outfile:\n    outfile.write(str(soup))\n\n\n\n\nNormally, formatting dates in Quarto is as easy as setting the date-format YAML property. In my case it was more difficult, because I wanted dates based on Dec, the calendar and time system I created, instead of the ubiquitous Gregorian calendar.\nTo facilitate the calculations in date.py, I set date-format to x in my _metadata.yml file so all of the dates would be in millisecond UNIX time and I would not have to deal with Gregorian calendar date formats or time zones. After all of the dates are generated, my date.py script traverses the HTML in the output directory using Beautiful Soup and converts millisecond UNIX time dates into Dec dates (year+day).\n\n\nPandoc filter\nIn addition to customizing dates on the listing page of my blog, I wanted to customize the date format in every blog post. To complete this task, I used a Lua script as a Pandoc filter.\nPandoc is a program that converts documents into practically any format. The ‚Äúpan‚Äù in Pandoc comes from the Ancient Greek word for all. Pandoc strives to convert all document formats, just like Pangea contained all the land and a panacea solves all problems.\nQuarto uses Pandoc to convert markdown files into target format(s) like html or pdf. If the source files contain executable code, Quarto executes the code via one of two computational engines: Jupyter or Knitr. Figure¬†4 shows the Quarto workflow.\n\n\n\n\n\n\nflowchart LR\n   A[qmd&lt;br/&gt;ipynb]-.Knitr&lt;br/&gt;Jupyter.-&gt;B((md))-.Pandoc with&lt;br/&gt;Lua filters.-&gt;C(html&lt;br/&gt;pdf&lt;br/&gt;docx&lt;br/&gt;etc.)\n\n\n\n\nFigure¬†4: Quarto rendering workflow\n\n\n\n\n\nMine √áetinkaya-Rundel‚Äôs Quarto tip series includes a similar Quarto workflow mermaid diagram and her ‚ÄúHello, Quarto!‚Äù rstudio::conf(2022) keynote with Julia Stewart Lowndes contains truly beautiful Quarto workflow images by Allison Horst: 1, 2, 3, and 4.\nQuarto controls Pandoc, Jupyter, and Knitr in two ways: 1) with arguments passed to the Quarto CLI commands and 2) with YAML key-value pairs in .qmd, .ipynb, or .yml files.\nExample¬†12 shows how I set up every qmd file to generate the current date in millisecond UNIX time and designated date.lua as a Pandoc filter. Unlike post-render scripts, Pandoc filters are executed during the creation of the output files.\n\nExample 12 ¬†\n\n*.qmddate.lua\n\n\ndate: now\ndate-format: x\nfilters: date.lua\n\n\n-- https://howardhinnant.github.io/date_algorithms.html#days_from_civil\nfunction unix2deco(ms)\n  local dote = ms / 86400000 + 719468\n  local cykl = (\n    dote &gt;= 0 and dote\n    or dote - 146096\n  ) // 146097\n  local dotc = dote - cykl * 146097\n  local yotc = (\n    dotc - dotc // 1460\n    + dotc // 36524\n    - dotc // 146096\n  ) // 365\n  return string.format(\n    \"%s+%03d\",\n    math.floor(yotc + cykl * 400),\n    math.floor(dotc - (yotc * 365\n      + yotc // 4\n      - yotc // 100)))\nend\n\nlocal function to_decalendar(date)\n  local date = pandoc.utils.stringify(date)\n  local unix = date:match(\"(%d+)\")\n  return date:gsub(unix, unix2deco(unix))\nend\n\nfunction Meta(m)\n  m.date = to_decalendar(m.date)\n  return m\nend\n\n\n\n\nAll three of the customizations I described above convert millisecond UNIX time into a custom date format, but you can adapt these approaches to make all sorts of edits to your Quarto site. HTML blocks can run JavaScript which excels at making content dynamic and interactive, pre- and post-render scripts can be in any programming language, while Pandoc filters are written in Lua and modify output during rendering.\nComing up next on my blog is a post that Observable graphics. Get ready for an animated and interactive data visualization extravaganza!",
    "crumbs": [
      "Software",
      "Quarto",
      "Include"
    ]
  },
  {
    "objectID": "quarto/script/index.html",
    "href": "quarto/script/index.html",
    "title": "Quarto",
    "section": "",
    "text": "This blog post is the most important post in my Tools blog post series, as indicated by its centrality in Figure¬†1, node of the netw focuses on the use of Quarto to author and publish digital content. As the third post in my , which is summarized by Figure¬†1, and depends on the. is my blog post on Quarto. The subsequent posts in the series demonstrate how to use Observable, Jupyter, and Knitr to execute code in Quarto documents.\n\n\n\n\n\n\n\nflowchart TB\n   A[Git]--&gt;B[VSCode]--&gt;C[Quarto]\n   C--&gt;D[Observable]\n   C--&gt;E[Jupyter]\n   C--&gt;F[Knitr]\n   click A \"../git\"\n   click B \"../vscode\"\n   click C \"../quarto\"\n   click D \"../observable\"\n   click E \"../jupyter\"\n   click F \"../knitr\"\n   style C stroke:#99f,stroke-width:5px\n\n\n\n\nFigure¬†1: Tools series navigation chart\n\n\n\n\nIf you do not have such a repo, you can create one by following along with the previous post in my tools blog post series, which is shown in Figure¬†1.",
    "crumbs": [
      "Software",
      "Quarto",
      "Script"
    ]
  },
  {
    "objectID": "quarto/script/index.html#tldr",
    "href": "quarto/script/index.html#tldr",
    "title": "Quarto",
    "section": "",
    "text": "This blog post is the most important post in my Tools blog post series, as indicated by its centrality in Figure¬†1, node of the netw focuses on the use of Quarto to author and publish digital content. As the third post in my , which is summarized by Figure¬†1, and depends on the. is my blog post on Quarto. The subsequent posts in the series demonstrate how to use Observable, Jupyter, and Knitr to execute code in Quarto documents.\n\n\n\n\n\n\n\nflowchart TB\n   A[Git]--&gt;B[VSCode]--&gt;C[Quarto]\n   C--&gt;D[Observable]\n   C--&gt;E[Jupyter]\n   C--&gt;F[Knitr]\n   click A \"../git\"\n   click B \"../vscode\"\n   click C \"../quarto\"\n   click D \"../observable\"\n   click E \"../jupyter\"\n   click F \"../knitr\"\n   style C stroke:#99f,stroke-width:5px\n\n\n\n\nFigure¬†1: Tools series navigation chart\n\n\n\n\nIf you do not have such a repo, you can create one by following along with the previous post in my tools blog post series, which is shown in Figure¬†1.",
    "crumbs": [
      "Software",
      "Quarto",
      "Script"
    ]
  },
  {
    "objectID": "quarto/script/index.html#sec-intro",
    "href": "quarto/script/index.html#sec-intro",
    "title": "Quarto",
    "section": "Introduction",
    "text": "Introduction\nQuarto is an open-source software system for turning plain-text source files into outputs like articles, books, blogs, dashboards, presentations, reports, and websites. Announced on 2022+149 by Posit CEO JJ Allaire, Quarto is already taking the worldüåêby storm‚õàÔ∏è!\nI strongly believe that everyone, regardless of their background and current technical skill level, can learn and benefit from Quarto. Getting started with Quarto is easy thanks to its excellent documentation and vibrant community of enthusiastic users and developers.\nRather than repeat the basic information already available elsewhere, I will share some advanced techniques along with the fundamental knowledge needed to understand how they work. The topics I cover are very technical, but my goal is to make the content on my blog as accessible as possible.\nThe first topic I will delve into is creating and publishing a website with Quarto. To follow the Quarto documentation on creating a website, you will need Visual Studio Code (VSCode), VSCodium, RStudio, or a terminal.",
    "crumbs": [
      "Software",
      "Quarto",
      "Script"
    ]
  },
  {
    "objectID": "quarto/script/index.html#sec-pub",
    "href": "quarto/script/index.html#sec-pub",
    "title": "Quarto",
    "section": "Publishing Quarto sites",
    "text": "Publishing Quarto sites\n\nInstalling tools\nIf you use macOS, Linux, or the Windows Subsystem for Linux (WSL), you can install all of the aforementioned tools with the Homebrew package manager. To install everything you will need to follow along with this blog post, you can first install Homebrew and then run brew bundle in a directory that contains the Brewfile shown in Example¬†1.\n\nExample 1 ¬†\n\n\nBrewfile\n\nbrew \"gh\"\nbrew \"git\"\nbrew \"glab\"\ncask \"github\"\ncask \"quarto\"\ncask \"rstudio\"\ncask \"vscodium\"\ncask \"visual-studio-code\"\nvscode \"quarto.quarto\"\nvscode \"REditorSupport.r\"\n\n\nUsing a package manager like Homebrew to install all the requirements with a single shell command like brew bundle is the fastest and easiest way to get ready to follow along with this blog post. If you are curious about how I set up my computer, you can take a look at my Brewfile and other configuration files in my setup repository (repo) on GitHub and GitLab.\nApart from RStudio, VSCode, and VSCodium, the Brewfile in Example¬†1 will install the Git version control system, the GitHub and GitLab command line interfaces (CLIs), and GitHub Desktop, a Git Graphical User Interface (GUI). For more information on Git, a tool used by 93% of software developers worldwide according to survey results published by StackOverflow on 2022+314, take a look at the ‚ÄúGitHub for supporting, reusing, contributing, and failing safely‚Äù post by Allison Horst and Julie Lowndes on the Openscapes blog.\nAs an alternative to installing tools on your computer, you can use the web interface provided by GitHub Codespaces. To set up a Codespace, you can remove the lines that start with cask from the Brewfile provided in Example¬†1 and add the file to a repo called dotfiles and along with a setup.sh file like the one shown in Example¬†2.\n\nExample 2 ¬†\n\n\nsetup.sh\n\necho | /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n(echo; echo 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"') &gt;&gt; /home/codespace/.profile\neval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"\nbrew bundle\n\n\n\n\nPublishing overview\nOnce you are done setting up your computer or Codespace, you create a Quarto website template and make your site publicly available on the internet using one of the many available publishing services. To explore and assess different publishing workflows and free website hosting options, I set up my personal website on four different web hosts: Quarto Pub, Netlify, GitHub Pages, and GitLab Pages.\nThere are so many different ways to publish a Quarto site that I decided to come up with a naming system for Quarto publishing methods. The naming system derives a code for each publishing method from the numbered lists in the Quarto publishing documentation. For example, I refer to the two methods to publish to Quarto Pub as Q1 and Q2:\nTable¬†1 uses this naming system in its Code column to identify the publishing methods I discuss in this blog post. Each publishing method targets a particular web Host, Renders content locally or on a remote server, and deploys sites using either the quarto publish or the git push shell Command.\n\n\n\n\n\n\nCode\nHost\nRender\nCommand\n\n\n\n\nG1\nGitHub\nLocal\npush\n\n\nG2\nGitHub\nLocal\npublish\n\n\nG3\nGitHub\nRemote\npush\n\n\nN1\nNetlify\nLocal\npublish\n\n\nN2\nNetlify\nLocal\npush\n\n\nN3\nNetlify\nRemote\npush\n\n\nQ1\nQuarto\nLocal\npublish\n\n\nQ2\nQuarto\nRemote\npush\n\n\n\n\n\nTable¬†1: Quarto website publishing methods\n\n\n\n\n\nGit workflow\nThe first publishing method I tried for my personal site was G1, which requires the use of Git to push all website content to a Git provider like GitHub or GitLab. After I set up GitHub Pages and GitLab Pages, I could update my website on both of these web hosts just by going through the standard Git workflow shown in Figure¬†2.\n\n\n\n\n\n\nflowchart LR\n   A[working&lt;br/&gt;directory]-.git&lt;br/&gt;add.-&gt;B{{staging&lt;br/&gt;area}}-.git&lt;br/&gt;commit.-&gt;C([local&lt;br/&gt;repo])-.git&lt;br/&gt;push.-&gt;D(remote&lt;br/&gt;repo)\n\n\n\n\nFigure¬†2: Git workflow\n\n\n\n\n\nTo make it easier to make incremental changes to my website and frequently release new content, I combined all of the git shell commands in Figure¬†2 into a shell alias. You can add shell aliases to a shell configuration file like .bashrc or .zshrc on your computer to shorten commands or combine any sequence of commands into one step.\nThe aacmp alias in the .zshrc file in my setup repo allows me to enter a free-form commit message directly on the command line without quotes, e.g.¬†qp edit first blog. If you decide to try my aacmp alias, please exercise extreme caution as any un-escaped or un-quoted metacharacters may yield surprising effects instead of being included verbatim in the commit message. For example, qp * will list the contents of the current directory in the commit message in place of the asterisk!\nAn alternative to a shell alias that combines git commands is a keyboard shortcut in Git-enabled GUI. Example¬†3 shows two files, tasks.json and update.sh, that we can use to set up VSCode, VSCodium, and GitHub Codespaces to go through the Git workflow whenever we press Ctrl+Shift+B on Linux/Windows or ‚åò+Shift+B on Mac (mnemonic: B is for Build).\n\nExample 3 ¬†\n\nupdate.shtasks.json\n\n\n\n\n\n\n\n\n\n\nThis mechanism is called Tasks and is used to automate software build tasks, which can include any steps required to build and publish a website. Importantly, the Tasks mechanism requires that the tasks.json file be added to the .vscode directory and that we enable execution of the update.sh script by running chmod +x update.sh in our project root.\nShell aliases and keyboard shortcuts can greatly facilitate the Git workflow which is essential not only for G1, but also G3, N3, and Q2. Unlike these other publishing methods, G1 leads to messy commits that contain changes to both source and output files.\n\n\nquarto publish\nTo have cleaner commits, I switched from G1 to G2 by adding quarto publish to my publishing workflow. With G2, I can track changes to my source files on my main branch and publish my output files to GitHub Pages and GitLab Pages from my gh-pages branch.\nQ1, N1, and G2 all use quarto publish to render website content locally and then deploy it in one fell swoop. If you do not plan to use the Git version control system or the advanced features offered by GitHub, GitLab, or Netlify, then I recommend deploying your site to Quarto Pub by running quarto publish quarto-pub (Q1 in Table¬†1).\nLike Q1, N1 is a deployment method that does not require Git and makes it possible to deploy our site with a single shell command: quarto publish netlify. N1 provides access to the advanced web hosting features offered by Netlify and can even render content as long as code execution is frozen.\nTo deploy my site to GitHub Pages, GitLab Pages, and Netlify, I combined G2 and N2. When I run quarto publish gh-pages, Quarto renders my site into my output directory, copies the output directory contents to the gh-pages branch of my local repo, and then commits and pushes the changes to my remote repos on GitHub and GitLab, which triggers Netlify to build my site from the gh-pages branch.\nTo summarize the Quarto publishing methods I discussed so far, Q1 and N1 are easy to configure and use, N2 automatically builds sites from Git repos, G1 is not recommended because it pollutes commits with output file changes, and G2 is more difficult to set up and use but provides clean commits and a nice separation of source and output files.\n\n\nGitHub Actions\nAll of the publishing methods I have discussed so far require us to generate output files locally by rendering our source files. In contrast, Q2, G3, and N3 make it possible to skip local rendering in favor of relying on GitHub Actions to handle all of the necessary steps.\nG3 is noteworthy, because it offers the same convenience of G1 but without messy commits that mix changes to source and output files. An added bonus of G3 is that rendering with GitHub Actions provides a reproducible computational environment that is not dependent on what you have installed on your computer.\nInstead of using GitHub Actions, I could have used GitLab CI/CD to build my site. I decided not to go down this route because the Quarto dev team has many GitHub Actions workflows available but currently no official support for GitLab CI/CD.\nBefore trying to use GitHub Actions or any other continuous integration systems in your publishing workflow, I suggest getting used to working with quarto publish (Q1, G2, or N1). You can always set up other publishing methods later without sacrificing anything, because all of the publishing methods except G1 can be combined together.\nIn Section¬†4, I will walk through the setup of both G2 and G3 to provide the option of rendering locally by running quarto publish or rendering remotely with GitHub Actions by pushing to the main branch. Along the way, I will share many practical tips and general advice that you can apply to any project.",
    "crumbs": [
      "Software",
      "Quarto",
      "Script"
    ]
  },
  {
    "objectID": "quarto/script/index.html#sec-set",
    "href": "quarto/script/index.html#sec-set",
    "title": "Quarto",
    "section": "Publishing setup",
    "text": "Publishing setup\n\nRepo setup\nBefore you can use GitHub Actions to publish your site, you will need a GitHub, an SSH key, and a repo like maptv.github.io that has a default branch called main and another branch which must be called gh-pages. If you want to publish on GitLab Pages, you will also need a GitLab account and an analogous GitLab repo like maptv.gitlab.io.\nYou can create the repo and the gh-pages branch using the web interface of https://github.com or https://gitlab.com in your browser, but the best way to start a new project is using the CLI for GitHub or GitLab in your terminal. First, run gh auth login or glab auth login and follow the prompts to authenticate via your web browser or with an authentication token.\nThe GitHub CLI allows you to add an SSH key to your account during or after authentication. The GitLab CLI does not handle SSH keys during authentication, but has a similar command for adding an SSH key to your GitLab account.\nAfter authentication and SSH key setup, you can run the code in either of the code chunks in Example¬†4 to set up your local and remote repos and create a Quarto website project in the local repo. You can create shell alias that combine all of the repo creation steps like I did in my .zshrc.\n\nExample 4 ¬†\n\nGitHubGitLab\n\n\ncd # start in home directory\nmkdir -p USERNAME\ncd USERNAME\ngh repo create USERNAME.github.io --add-readme --clone --public\ncd SITENAME\nquarto create project website USERNAME.github.io\n\n\ncd # start in home directory\nmkdir -p USERNAME\ncd USERNAME\nglab repo create USERNAME.gitlab.io --readme --defaultBranch main --public\ncd SITENAME\ngit pull origin main\ngit branch --set-upstream-to=origin/main main\nquarto create project website USERNAME.gitlab.io\n\n\n\n\nTo make it easier to maintain my site on both GitHub and GitLab Pages, I set up my local repo cloned to have two origin remote URLs using the code as shown in Example¬†5. Now, running quarto publish or git push in my local repo, updates my content on both GitHub and GitLab.\n\nExample 5 ¬†\ngit remote add lab git@gitlab.com:maptv/maptv.gitlab.io\ngit remote add hub git@github.com:maptv/maptv.github.io\ngit remote set-url --add origin $(git remote get-url lab)\n\nIf you want to have your website hosted on GitHub Pages, you will need to set gh-pages as your source branch in your repo settings. For GitLab Pages, you will need to add a .gitlab-ci.yml file to your repo and update your _quarto.yml file as shown in Example¬†6 to include .gitlab-ci.yml as a resource in your output directory.\n\nExample 6 ¬†\n\n.gitlab-ci.yml_quarto.yml\n\n\n# https://docs.gitlab.com/ee/user/project/pages/introduction.html#customize-the-default-folder\npages:\n  script: echo \"The site will be deployed to $CI_PAGES_URL\"\n  artifacts:\n    paths:\n      - \".\"\n  publish: \".\"\n  only:\n    - gh-pages\n\n\nauthor:\n  - name: Martin Laptev\n    url: https://maptv.github.io\n\n\n\n\nBy default, GitLab Pages includes a random hash in site URLs. To shorten the URL of my GitLab Pages site to &lt;maptv.gitlab.io&gt;, I had to uncheck Use unique domain under Deploy &gt; Pages in the GitLab sidebar.\nAt this point, we have completed G2 setup and you should be able to run quarto publish gh-pages from your main branch to render your site and deploy it to GitHub and/or GitLab Pages. Deploying with quarto publish at least once is a prerequisite for setting up any of the publishing methods that rely on GitHub Actions, because quarto publish creates a _publish.yml file in the root of your project that is required for publishing via GitHub Actions.\n\n\nGitHub Actions\nIn addition to the steps described above, G3 setup requires that we create a .github/workflows directory and add a YAML file to that directory. Example¬†7 contains the gh-pages.yml file I use for my own site and the shell code that can used to obtain this file.\n\nExample 7 ¬†\n\ncurlgh-pages.yml\n\n\nmkdir -p .github/workflows\ncd .github/workflows\ncurl -O https://raw.githubusercontent.com/maptv/maptv.github.io/main/.github/workflows/gh-pages.yml\n\n\non:\n  workflow_dispatch:\n  push:\n    branches: [main]\n\nname: Quarto Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v4\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n        with:\n          version: '1.4.489'\n          tinytex: true\n\n      - name: Install R\n        uses: r-lib/actions/setup-r@v2\n        with:\n          r-version: '4.2.0'\n\n      - name: Install R Dependencies\n        uses: r-lib/actions/setup-renv@v2\n        with:\n          cache-version: 1\n\n      - name: Install Python and Dependencies\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.10'\n          cache: 'pip'\n      - run: pip install jupyter\n      - run: pip install -r requirements.txt\n\n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Push To GitLab\n        env:\n          token: ${{ secrets.GITLAB_AUTH_TOKEN }}\n        run: |\n          echo Starting to push gh-pages branch to GitLab\n          git config user.name \"maptv\"\n          git config user.email \"129316885+maptv@users.noreply.github.com\"\n          git remote set-url origin \"https://oauth2:${token}@gitlab.com/maptv/maptv.gitlab.io\"\n          git push origin gh-pages\n\n\n\n\nThe gh-pages.yml file in Example¬†7 installs Quarto, the R and Python programming languages, and the packages in the renv.lock and requirements.txt files. If you do not need R and/or Python, you can remove any unnecessary portions of the file.\nTo modify the Python files that are installed by GitHub Actions, you can edit the requirements.txt file in your repo. To update your renv.lock file so that it includes all of the R packages your site requires, run renv::snapshot() in an R session or Rscript -e renv::snapshot() in a shell.\nAfter pushing the gh-pages.yml file, you can visit the Actions tab in your remote repo on GitHub to check the progress of the deployment of your site. If your site did not build successfully, you can go through the logs to try to diagnose the problem.\nI added a ‚ÄúPush to GitLab‚Äù step to my gh-pages.yml to make GitHub Actions push my remote gh-pages to GitLab so that my site is kept in sync on both GitHub and GitLab Pages. This required manually creating a token on GitLab and adding it to GitHub, which I accomplished using the GitHub CLI as shown in Example¬†8.\n\nExample 8 ¬†\ngh secret set GITLAB_AUTH_TOKEN\n\nAfter the setup described above, I now have two options for publishing my Quarto site: quarto publish and 2) git push. In addition to GitHub and GitLab Pages, both of these options automatically update my site on Netlify via N2.\nTo also automatically update my site on Quarto Pub, I created a separate GitHub Actions workflow by adding another YAML file to the .github/workflows directory in my repo. Example¬†9 shows my quarto-pub.yml file and the shell code that can be used to obtain it.\n\nExample 9 ¬†\n\ncurlquarto-pub.yml\n\n\nmkdir -p .github/workflows\ncd .github/workflows\ncurl -O https://raw.githubusercontent.com/maptv/maptv.github.io/main/.github/workflows/gh-pages.yml\n\n\non:\n  workflow_run:\n    workflows: [pages-build-deployment]\n    types: [completed]\n\nname: Update Quarto Pub\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out main repository\n        uses: actions/checkout@v4\n\n      - name: Check out _site\n        uses: actions/checkout@v4\n        with:\n          ref: gh-pages\n          path: _site\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n\n      - name: Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: quarto-pub\n          render: false\n          QUARTO_PUB_AUTH_TOKEN: ${{ secrets.QUARTO_PUB_AUTH_TOKEN }}\n          GITHUB_USERNAME: maptv\n\n\n\n\nMy quarto-pub.yml file is based on Q2, but it runs upon completion of the pages-build-deployment workflow instead of a push to main. I changed the workflow trigger so that it runs after my GitHub Pages site is built, regardless of whether I triggered the build by running quarto publish gh-pages or pushing to main.\nFigure¬†3 summarizes all of the steps that occur during my Quarto publishing workflow. This workflow allows me to publish my site on four web hosts every time I run quarto publish gh-pages (G2) or git push (G3)!\n\n\n\n\n\n\nflowchart LR\n    A[local&lt;br/&gt;main]-.G2.-&gt;B[local&lt;br/&gt;gh-pages]-.G2.-&gt;C[GitHub&lt;br/&gt;gh-pages]\n    B[local&lt;br/&gt;gh-pages]-.G2.-&gt;D[GitLab&lt;br/&gt;gh-pages]\n    A[local&lt;br/&gt;main]-.G3.-&gt;F[GitHub&lt;br/&gt;main]-.G3.-&gt;C[GitHub&lt;br/&gt;gh-pages]-.G3.-&gt;D[GitLab&lt;br/&gt;gh-pages]\n    A[local&lt;br/&gt;main]-.G3.-&gt;G[GitLab&lt;br/&gt;main]\n    C[GitHub&lt;br/&gt;gh-pages]-.N2.-&gt;E[Netlify]\n    C[GitHub&lt;br/&gt;gh-pages]-.Q2.-&gt;H[Quarto&lt;br/&gt;Pub]\n\n\n\n\nFigure¬†3: Quarto publishing workflow\n\n\n\n\n\nSo far I have only noticed one difference between the four web hosts I use for my site: GitHub Pages is the only web host that properly differentiates between internal and external links. All of the other web hosts include the external link icon on all links regardless of whether they target my site or an external site.\nI tried unsuccessfully to solve this issue by setting the link-external-filter property to a regular expression. If you notice a problem with the link-external-icon feature on other web hosts, I suggest switching to GitHub Pages.",
    "crumbs": [
      "Software",
      "Quarto",
      "Script"
    ]
  },
  {
    "objectID": "quarto/script/index.html#sec-cust",
    "href": "quarto/script/index.html#sec-cust",
    "title": "Quarto",
    "section": "Customizing Quarto sites",
    "text": "Customizing Quarto sites\n\nSite navigation\nOnce your site is built and published, you can make it easier to navigate with a customized navigation bar (navbar) and sidebar, as described in the Quarto documentation. Check out the _quarto.yml files for my site and the Quarto documentation site to see how the navigation components are set up.\nIn my navbar, I added toggle buttons for reader mode and dark mode. The names of the other icons on right side of the navbar are included in the sidebar.\n\n\nHTML blocks\nMy navbar also provides the current date and time in Dec ordinal (deco) format, which counts the years since 1 BC and the days since March 1. Dec is a calendar and time system that I created and use throughout my blog.\nTo add a custom timestamp to the navbar, I put a &lt;script&gt; element that runs time.js in an HTML block in every Quarto markdown (.qmd) file, as shown in Example¬†10. Mine √áetinkaya-Rundel wrote about HTML blocks as part of her A Quarto tip a day project.\n\nExample 10 ¬†\n\n*.qmdtime.js\n\n\n```{=html}\n&lt;script src=\"time.js\"&gt;&lt;/script&gt;\n```\n\n\n\n\n\n\n\nHTML blocks are useful for running JavaScript code in the context of a single page on your site without affecting the others. I also use HTML blocks to add a &lt;style&gt; element to my .qmd files as a last ditch effort to fine tune the style of my site.\nBefore I resort to the &lt;style&gt; element approach, I try writing CSS in my style.css, light.css, and dark.css files. So far, this approach has been sufficient to make any styling changes I want, but if it every fails, I can use JavaScript to override the default styling provided by Quarto by modifying style attributes, which have the highest specificity in CSS.\n\n\nPost-render script\nI wanted to my blog‚Äôs listing page to show dates in the same format as the navbar timestamp. To accomplish this, I used a post-render script written in the Python programming language.\nPre- and post-render scripts are set as project options in the _quarto.yml file in the root of your Quarto project. Example¬†11 shows the date.py post-render script and how this script is referenced in _quarto.yml.\n\nExample 11 ¬†\n\n_quarto.ymldate.py\n\n\nauthor:\n  - name: Martin Laptev\n    url: https://maptv.github.io\ndate-format: x\n\n\n# https://howardhinnant.github.io/date_algorithms.html#days_from_civil\nimport bs4\n\ndef unix2doty(ms):\n    dote = ms / 86400000 + 719468\n    cykl = (\n        dote if dote &gt;= 0\n        else dote - 146096\n    ) // 146097\n    dotc = dote - cykl * 146097\n    yotc = (dotc\n        - dotc // 1460\n        + dotc // 36524\n        - dotc // 146096\n    ) // 365\n    return [\n        int(yotc + cykl * 400),\n        dotc - (yotc * 365\n            + yotc // 4\n            - yotc // 100\n        )\n    ]\n\nwith open(\"_site/list/index.html\") as infile:\n    txt = infile.read()\n    soup = bs4.BeautifulSoup(txt, features=\"html.parser\")\nfor div in soup.find_all(\"div\", {\"class\": \"card-file-modified\"}):\n    if \"+\" not in div.text:\n        y, d = unix2doty(int(div.text))\n        div.string.replace_with(f\"{y:&gt;04}+{d.__floor__():&gt;03}\")\nfor div in soup.find_all(\"div\", {\"class\": \"listing-reading-time\"}):\n    if \"min\" in div.text:\n        div.string.replace_with(f\"{(int(div.text.split()[0]) / 1.44).__floor__()} milliday\")\nwith open(\"_site/list/index.html\", \"w\") as outfile:\n    outfile.write(str(soup))\n\n\n\n\nNormally, formatting dates in Quarto is as easy as setting the date-format YAML property. In my case it was more difficult, because I wanted dates based on Dec, the calendar and time system I created, instead of the ubiquitous Gregorian calendar.\nTo facilitate the calculations in date.py, I set date-format to x in my _metadata.yml file so all of the dates would be in millisecond UNIX time and I would not have to deal with Gregorian calendar date formats or time zones. After all of the dates are generated, my date.py script traverses the HTML in the output directory using Beautiful Soup and converts millisecond UNIX time dates into Dec dates (year+day).\n\n\nPandoc filter\nIn addition to customizing dates on the listing page of my blog, I wanted to customize the date format in every blog post. To complete this task, I used a Lua script as a Pandoc filter.\nPandoc is a program that converts documents into practically any format. The ‚Äúpan‚Äù in Pandoc comes from the Ancient Greek word for all. Pandoc strives to convert all document formats, just like Pangea contained all the land and a panacea solves all problems.\nQuarto uses Pandoc to convert markdown files into target format(s) like html or pdf. If the source files contain executable code, Quarto executes the code via one of two computational engines: Jupyter or Knitr. Figure¬†4 shows the Quarto workflow.\n\n\n\n\n\n\nflowchart LR\n   A[qmd&lt;br/&gt;ipynb]-.Knitr&lt;br/&gt;Jupyter.-&gt;B((md))-.Pandoc with&lt;br/&gt;Lua filters.-&gt;C(html&lt;br/&gt;pdf&lt;br/&gt;docx&lt;br/&gt;etc.)\n\n\n\n\nFigure¬†4: Quarto rendering workflow\n\n\n\n\n\nMine √áetinkaya-Rundel‚Äôs Quarto tip series includes a similar Quarto workflow mermaid diagram and her ‚ÄúHello, Quarto!‚Äù rstudio::conf(2022) keynote with Julia Stewart Lowndes contains truly beautiful Quarto workflow images by Allison Horst: 1, 2, 3, and 4.\nQuarto controls Pandoc, Jupyter, and Knitr in two ways: 1) with arguments passed to the Quarto CLI commands and 2) with YAML key-value pairs in .qmd, .ipynb, or .yml files.\nExample¬†12 shows how I set up every qmd file to generate the current date in millisecond UNIX time and designated date.lua as a Pandoc filter. Unlike post-render scripts, Pandoc filters are executed during the creation of the output files.\n\nExample 12 ¬†\n\n*.qmddate.lua\n\n\ndate: now\ndate-format: x\nfilters: date.lua\n\n\n-- https://howardhinnant.github.io/date_algorithms.html#days_from_civil\nfunction unix2deco(ms)\n  local dote = ms / 86400000 + 719468\n  local cykl = (\n    dote &gt;= 0 and dote\n    or dote - 146096\n  ) // 146097\n  local dotc = dote - cykl * 146097\n  local yotc = (\n    dotc - dotc // 1460\n    + dotc // 36524\n    - dotc // 146096\n  ) // 365\n  return string.format(\n    \"%s+%03d\",\n    math.floor(yotc + cykl * 400),\n    math.floor(dotc - (yotc * 365\n      + yotc // 4\n      - yotc // 100)))\nend\n\nlocal function to_decalendar(date)\n  local date = pandoc.utils.stringify(date)\n  local unix = date:match(\"(%d+)\")\n  return date:gsub(unix, unix2deco(unix))\nend\n\nfunction Meta(m)\n  m.date = to_decalendar(m.date)\n  return m\nend\n\n\n\n\nAll three of the customizations I described above convert millisecond UNIX time into a custom date format, but you can adapt these approaches to make all sorts of edits to your Quarto site. HTML blocks can run JavaScript which excels at making content dynamic and interactive, pre- and post-render scripts can be in any programming language, while Pandoc filters are written in Lua and modify output during rendering.\nComing up next on my blog is a post that Observable graphics. Get ready for an animated and interactive data visualization extravaganza!",
    "crumbs": [
      "Software",
      "Quarto",
      "Script"
    ]
  }
]